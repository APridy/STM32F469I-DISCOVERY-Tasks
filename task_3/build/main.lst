ARM GAS  /tmp/ccWiGGaB.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.delayMs,"ax",%progbits
  18              		.align	1
  19              		.global	delayMs
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	delayMs:
  27              	.LVL0:
  28              	.LFB130:
  29              		.file 1 "main.c"
   1:main.c        **** #include "stm32f4xx.h"
   2:main.c        **** #include "util.h"
   3:main.c        **** 
   4:main.c        **** #define MAX_ITOA_OUTPUT_LENGTH 12
   5:main.c        **** 
   6:main.c        **** #define address_invalid(addr) ((addr > 511) || (addr < 0))
   7:main.c        **** 
   8:main.c        **** const char* errorInvalidMode = "ERROR: Invalid memory output mode\n\r\0";
   9:main.c        **** const char* errorInvalidAddress = "ERROR: Address must vary between 0 and 2047\n\r\0";
  10:main.c        **** const char* errorBeyondMemory = "ERROR: String goes beyond memory size\n\r\0";
  11:main.c        **** 
  12:main.c        **** enum memoryDisplayMode {
  13:main.c        **** 	BINARY = 1,
  14:main.c        **** 	DECIMAL = 2,
  15:main.c        **** 	ASCII = 3
  16:main.c        **** };
  17:main.c        **** 
  18:main.c        **** enum opCode {
  19:main.c        **** 	OPCODE_READ = 0b10,
  20:main.c        **** 	OPCODE_WRITE = 0b01,
  21:main.c        **** 	OPCODE_WEN = 0b00,
  22:main.c        **** 	OPCODE_WDS = 0b00,
  23:main.c        **** 	OPCODE_ERASE = 0b11,
  24:main.c        **** 	OPCODE_ERAL = 0b00,
  25:main.c        **** 	OPCODE_WRAL = 0b00
  26:main.c        **** };
  27:main.c        **** 
  28:main.c        **** enum dummyAddress {
  29:main.c        **** 	DUMMYADDRESS_WEN = 3 << 8,
ARM GAS  /tmp/ccWiGGaB.s 			page 2


  30:main.c        **** 	DUMMYADDRESS_WDS = 0 << 9,
  31:main.c        **** 	DUMMYADDRESS_ERAL = 1 << 9,
  32:main.c        **** 	DUMMYADDRESS_WRAL = 1 << 8
  33:main.c        **** };
  34:main.c        **** 
  35:main.c        **** int delvalue = 750;
  36:main.c        **** 
  37:main.c        **** volatile int ticks = 0;
  38:main.c        **** 
  39:main.c        **** void delayMs(unsigned int ms) { // delay in miliseconds
  30              		.loc 1 39 31 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  40:main.c        **** 	ticks = 0;
  35              		.loc 1 40 2 view .LVU1
  36              		.loc 1 40 8 is_stmt 0 view .LVU2
  37 0000 054B     		ldr	r3, .L3
  38 0002 0022     		movs	r2, #0
  39 0004 1A60     		str	r2, [r3]
  41:main.c        **** 	while(ticks<ms*1000);
  40              		.loc 1 41 2 is_stmt 1 view .LVU3
  41              	.L2:
  42              		.loc 1 41 22 discriminator 1 view .LVU4
  43              		.loc 1 41 7 discriminator 1 view .LVU5
  44              		.loc 1 41 16 is_stmt 0 discriminator 1 view .LVU6
  45 0006 4FF47A73 		mov	r3, #1000
  46 000a 03FB00F3 		mul	r3, r3, r0
  47              		.loc 1 41 13 discriminator 1 view .LVU7
  48 000e 024A     		ldr	r2, .L3
  49 0010 1268     		ldr	r2, [r2]
  50              		.loc 1 41 7 discriminator 1 view .LVU8
  51 0012 9342     		cmp	r3, r2
  52 0014 F7D8     		bhi	.L2
  42:main.c        **** }
  53              		.loc 1 42 1 view .LVU9
  54 0016 7047     		bx	lr
  55              	.L4:
  56              		.align	2
  57              	.L3:
  58 0018 00000000 		.word	.LANCHOR0
  59              		.cfi_endproc
  60              	.LFE130:
  62              		.section	.text.delayMcs,"ax",%progbits
  63              		.align	1
  64              		.global	delayMcs
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  68              		.fpu fpv4-sp-d16
  70              	delayMcs:
  71              	.LVL1:
  72              	.LFB131:
  43:main.c        **** 
  44:main.c        **** void delayMcs(int mcs) { // delay in microseconds
  73              		.loc 1 44 24 is_stmt 1 view -0
ARM GAS  /tmp/ccWiGGaB.s 			page 3


  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  45:main.c        ****     ticks = 0;
  78              		.loc 1 45 5 view .LVU11
  79              		.loc 1 45 11 is_stmt 0 view .LVU12
  80 0000 034B     		ldr	r3, .L7
  81 0002 0022     		movs	r2, #0
  82 0004 1A60     		str	r2, [r3]
  46:main.c        ****     while(ticks<mcs);
  83              		.loc 1 46 5 is_stmt 1 view .LVU13
  84              	.L6:
  85              		.loc 1 46 21 discriminator 1 view .LVU14
  86              		.loc 1 46 10 discriminator 1 view .LVU15
  87              		.loc 1 46 16 is_stmt 0 discriminator 1 view .LVU16
  88 0006 024B     		ldr	r3, .L7
  89 0008 1B68     		ldr	r3, [r3]
  90              		.loc 1 46 10 discriminator 1 view .LVU17
  91 000a 8342     		cmp	r3, r0
  92 000c FBDB     		blt	.L6
  47:main.c        **** }
  93              		.loc 1 47 1 view .LVU18
  94 000e 7047     		bx	lr
  95              	.L8:
  96              		.align	2
  97              	.L7:
  98 0010 00000000 		.word	.LANCHOR0
  99              		.cfi_endproc
 100              	.LFE131:
 102              		.section	.text.SysTick_Handler,"ax",%progbits
 103              		.align	1
 104              		.global	SysTick_Handler
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	SysTick_Handler:
 111              	.LFB132:
  48:main.c        **** 
  49:main.c        **** void SysTick_Handler(void) { // redefinition of SysTick_Handler
 112              		.loc 1 49 28 is_stmt 1 view -0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
  50:main.c        **** 	ticks++;
 117              		.loc 1 50 2 view .LVU20
 118              		.loc 1 50 7 is_stmt 0 view .LVU21
 119 0000 024A     		ldr	r2, .L10
 120 0002 1368     		ldr	r3, [r2]
 121 0004 0133     		adds	r3, r3, #1
 122 0006 1360     		str	r3, [r2]
  51:main.c        **** }
 123              		.loc 1 51 1 view .LVU22
 124 0008 7047     		bx	lr
 125              	.L11:
ARM GAS  /tmp/ccWiGGaB.s 			page 4


 126 000a 00BF     		.align	2
 127              	.L10:
 128 000c 00000000 		.word	.LANCHOR0
 129              		.cfi_endproc
 130              	.LFE132:
 132              		.section	.text.sendViaUsart,"ax",%progbits
 133              		.align	1
 134              		.global	sendViaUsart
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 138              		.fpu fpv4-sp-d16
 140              	sendViaUsart:
 141              	.LVL2:
 142              	.LFB133:
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** void sendViaUsart(const char* msg) {
 143              		.loc 1 54 36 is_stmt 1 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
  55:main.c        **** 	for(int i = 0; msg[i] != '\0'; i++) {
 148              		.loc 1 55 2 view .LVU24
 149              	.LBB8:
 150              		.loc 1 55 6 view .LVU25
 151              		.loc 1 55 10 is_stmt 0 view .LVU26
 152 0000 0022     		movs	r2, #0
 153              		.loc 1 55 2 view .LVU27
 154 0002 0CE0     		b	.L13
 155              	.LVL3:
 156              	.L15:
  56:main.c        **** 		USART6->DR = msg[i]; // put one character in data register
 157              		.loc 1 56 3 is_stmt 1 view .LVU28
 158              		.loc 1 56 14 is_stmt 0 view .LVU29
 159 0004 0849     		ldr	r1, .L16
 160 0006 4B60     		str	r3, [r1, #4]
  57:main.c        **** 		while(!(USART6->SR & (USART_SR_TC))); // wait until transmit is over
 161              		.loc 1 57 3 is_stmt 1 view .LVU30
 162              	.L14:
 163              		.loc 1 57 39 discriminator 1 view .LVU31
 164              		.loc 1 57 8 discriminator 1 view .LVU32
 165              		.loc 1 57 17 is_stmt 0 discriminator 1 view .LVU33
 166 0008 074B     		ldr	r3, .L16
 167 000a 1B68     		ldr	r3, [r3]
 168              		.loc 1 57 8 discriminator 1 view .LVU34
 169 000c 13F0400F 		tst	r3, #64
 170 0010 FAD0     		beq	.L14
  58:main.c        **** 		USART6->SR &= ~(USART_SR_TC); // clear transmit value
 171              		.loc 1 58 3 is_stmt 1 discriminator 2 view .LVU35
 172              		.loc 1 58 14 is_stmt 0 discriminator 2 view .LVU36
 173 0012 0549     		ldr	r1, .L16
 174 0014 0B68     		ldr	r3, [r1]
 175 0016 23F04003 		bic	r3, r3, #64
 176 001a 0B60     		str	r3, [r1]
  55:main.c        **** 		USART6->DR = msg[i]; // put one character in data register
ARM GAS  /tmp/ccWiGGaB.s 			page 5


 177              		.loc 1 55 33 is_stmt 1 discriminator 2 view .LVU37
  55:main.c        **** 		USART6->DR = msg[i]; // put one character in data register
 178              		.loc 1 55 34 is_stmt 0 discriminator 2 view .LVU38
 179 001c 0132     		adds	r2, r2, #1
 180              	.LVL4:
 181              	.L13:
  55:main.c        **** 		USART6->DR = msg[i]; // put one character in data register
 182              		.loc 1 55 17 is_stmt 1 discriminator 1 view .LVU39
  55:main.c        **** 		USART6->DR = msg[i]; // put one character in data register
 183              		.loc 1 55 20 is_stmt 0 discriminator 1 view .LVU40
 184 001e 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
  55:main.c        **** 		USART6->DR = msg[i]; // put one character in data register
 185              		.loc 1 55 2 discriminator 1 view .LVU41
 186 0020 002B     		cmp	r3, #0
 187 0022 EFD1     		bne	.L15
 188              	.LBE8:
  59:main.c        **** 	}
  60:main.c        **** }
 189              		.loc 1 60 1 view .LVU42
 190 0024 7047     		bx	lr
 191              	.L17:
 192 0026 00BF     		.align	2
 193              	.L16:
 194 0028 00140140 		.word	1073812480
 195              		.cfi_endproc
 196              	.LFE133:
 198              		.section	.text.UART6Config,"ax",%progbits
 199              		.align	1
 200              		.global	UART6Config
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv4-sp-d16
 206              	UART6Config:
 207              	.LFB134:
  61:main.c        **** 
  62:main.c        **** void UART6Config() {
 208              		.loc 1 62 20 is_stmt 1 view -0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
  63:main.c        **** 
  64:main.c        ****   	RCC->APB2ENR |= RCC_APB2ENR_USART6EN;  // enable USART6 clock, bit 5 on APB2ENR
 213              		.loc 1 64 4 view .LVU44
 214              		.loc 1 64 17 is_stmt 0 view .LVU45
 215 0000 264B     		ldr	r3, .L19
 216 0002 5A6C     		ldr	r2, [r3, #68]
 217 0004 42F02002 		orr	r2, r2, #32
 218 0008 5A64     		str	r2, [r3, #68]
  65:main.c        ****   	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;  // enable GPIOG clock, bit 6 on AHB1ENR
 219              		.loc 1 65 4 is_stmt 1 view .LVU46
 220              		.loc 1 65 17 is_stmt 0 view .LVU47
 221 000a 1A6B     		ldr	r2, [r3, #48]
 222 000c 42F04002 		orr	r2, r2, #64
 223 0010 1A63     		str	r2, [r3, #48]
  66:main.c        **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 6


  67:main.c        ****   	GPIOG->MODER &= ~(GPIO_MODER_MODER14_Msk);
 224              		.loc 1 67 4 is_stmt 1 view .LVU48
 225              		.loc 1 67 17 is_stmt 0 view .LVU49
 226 0012 A3F50053 		sub	r3, r3, #8192
 227 0016 1A68     		ldr	r2, [r3]
 228 0018 22F04052 		bic	r2, r2, #805306368
 229 001c 1A60     		str	r2, [r3]
  68:main.c        ****   	GPIOG->MODER |=  GPIO_MODER_MODER14_1; //set PG14 to alternate mode (USART6_TX pin)
 230              		.loc 1 68 4 is_stmt 1 view .LVU50
 231              		.loc 1 68 17 is_stmt 0 view .LVU51
 232 001e 1A68     		ldr	r2, [r3]
 233 0020 42F00052 		orr	r2, r2, #536870912
 234 0024 1A60     		str	r2, [r3]
  69:main.c        ****   	GPIOG->MODER &= ~(GPIO_MODER_MODER9_Msk);
 235              		.loc 1 69 4 is_stmt 1 view .LVU52
 236              		.loc 1 69 17 is_stmt 0 view .LVU53
 237 0026 1A68     		ldr	r2, [r3]
 238 0028 22F44022 		bic	r2, r2, #786432
 239 002c 1A60     		str	r2, [r3]
  70:main.c        ****   	GPIOG->MODER |=  GPIO_MODER_MODER14_1; //set PG9 to alternate mode (USART6_RX pin)
 240              		.loc 1 70 4 is_stmt 1 view .LVU54
 241              		.loc 1 70 17 is_stmt 0 view .LVU55
 242 002e 1A68     		ldr	r2, [r3]
 243 0030 42F00052 		orr	r2, r2, #536870912
 244 0034 1A60     		str	r2, [r3]
  71:main.c        **** 
  72:main.c        **** 	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED14_Msk|GPIO_OSPEEDR_OSPEED9_Msk);
 245              		.loc 1 72 2 is_stmt 1 view .LVU56
 246              		.loc 1 72 17 is_stmt 0 view .LVU57
 247 0036 9A68     		ldr	r2, [r3, #8]
 248 0038 22F04052 		bic	r2, r2, #805306368
 249 003c 22F44022 		bic	r2, r2, #786432
 250 0040 9A60     		str	r2, [r3, #8]
  73:main.c        ****   	GPIOG->OSPEEDR |= (GPIO_OSPEEDR_OSPEED14_1|GPIO_OSPEEDR_OSPEED9_1); // Set USART6_TX and USART6_
 251              		.loc 1 73 4 is_stmt 1 view .LVU58
 252              		.loc 1 73 19 is_stmt 0 view .LVU59
 253 0042 9A68     		ldr	r2, [r3, #8]
 254 0044 42F00052 		orr	r2, r2, #536870912
 255 0048 42F40022 		orr	r2, r2, #524288
 256 004c 9A60     		str	r2, [r3, #8]
  74:main.c        **** 
  75:main.c        **** 	GPIOG->AFR[1] &= ~(GPIO_AFRH_AFSEL9_Msk|GPIO_AFRH_AFSEL14_Msk);
 257              		.loc 1 75 2 is_stmt 1 view .LVU60
 258              		.loc 1 75 16 is_stmt 0 view .LVU61
 259 004e 5A6A     		ldr	r2, [r3, #36]
 260 0050 22F07062 		bic	r2, r2, #251658240
 261 0054 22F0F002 		bic	r2, r2, #240
 262 0058 5A62     		str	r2, [r3, #36]
  76:main.c        ****   	GPIOG->AFR[1] |= GPIO_AFRH_AFSEL9_3; // assign alternate function number 8 (USART_RX) to PG9 (US
 263              		.loc 1 76 4 is_stmt 1 view .LVU62
 264              		.loc 1 76 18 is_stmt 0 view .LVU63
 265 005a 5A6A     		ldr	r2, [r3, #36]
 266 005c 42F08002 		orr	r2, r2, #128
 267 0060 5A62     		str	r2, [r3, #36]
  77:main.c        ****   	GPIOG->AFR[1] |= GPIO_AFRH_AFSEL14_3; // assign alternate function number 8 (USART_TX) to PG14 (
 268              		.loc 1 77 4 is_stmt 1 view .LVU64
 269              		.loc 1 77 18 is_stmt 0 view .LVU65
ARM GAS  /tmp/ccWiGGaB.s 			page 7


 270 0062 5A6A     		ldr	r2, [r3, #36]
 271 0064 42F00062 		orr	r2, r2, #134217728
 272 0068 5A62     		str	r2, [r3, #36]
  78:main.c        **** 
  79:main.c        ****   	USART6->BRR = 0;
 273              		.loc 1 79 4 is_stmt 1 view .LVU66
 274              		.loc 1 79 16 is_stmt 0 view .LVU67
 275 006a A3F58233 		sub	r3, r3, #66560
 276 006e 0022     		movs	r2, #0
 277 0070 9A60     		str	r2, [r3, #8]
  80:main.c        ****   	USART6->BRR |= (48 << 4); // set BRR (frequency = 90 MHZ), BRR = frk/(baudrate * 16) = 90 * 10^6
 278              		.loc 1 80 4 is_stmt 1 view .LVU68
 279              		.loc 1 80 16 is_stmt 0 view .LVU69
 280 0072 9A68     		ldr	r2, [r3, #8]
 281 0074 42F44072 		orr	r2, r2, #768
 282 0078 9A60     		str	r2, [r3, #8]
  81:main.c        ****   	USART6->BRR |= 13;
 283              		.loc 1 81 4 is_stmt 1 view .LVU70
 284              		.loc 1 81 16 is_stmt 0 view .LVU71
 285 007a 9A68     		ldr	r2, [r3, #8]
 286 007c 42F00D02 		orr	r2, r2, #13
 287 0080 9A60     		str	r2, [r3, #8]
  82:main.c        **** 
  83:main.c        ****   	USART6->CR1 |= USART_CR1_TE; // enable tx pin
 288              		.loc 1 83 4 is_stmt 1 view .LVU72
 289              		.loc 1 83 16 is_stmt 0 view .LVU73
 290 0082 DA68     		ldr	r2, [r3, #12]
 291 0084 42F00802 		orr	r2, r2, #8
 292 0088 DA60     		str	r2, [r3, #12]
  84:main.c        ****   	USART6->CR1 |= USART_CR1_RE; // enable rx pin
 293              		.loc 1 84 4 is_stmt 1 view .LVU74
 294              		.loc 1 84 16 is_stmt 0 view .LVU75
 295 008a DA68     		ldr	r2, [r3, #12]
 296 008c 42F00402 		orr	r2, r2, #4
 297 0090 DA60     		str	r2, [r3, #12]
  85:main.c        **** 
  86:main.c        ****   	USART6->CR1 |= USART_CR1_UE; //enable usart6
 298              		.loc 1 86 4 is_stmt 1 view .LVU76
 299              		.loc 1 86 16 is_stmt 0 view .LVU77
 300 0092 DA68     		ldr	r2, [r3, #12]
 301 0094 42F40052 		orr	r2, r2, #8192
 302 0098 DA60     		str	r2, [r3, #12]
  87:main.c        **** 
  88:main.c        **** }
 303              		.loc 1 88 1 view .LVU78
 304 009a 7047     		bx	lr
 305              	.L20:
 306              		.align	2
 307              	.L19:
 308 009c 00380240 		.word	1073887232
 309              		.cfi_endproc
 310              	.LFE134:
 312              		.section	.text.sckUp,"ax",%progbits
 313              		.align	1
 314              		.global	sckUp
 315              		.syntax unified
 316              		.thumb
ARM GAS  /tmp/ccWiGGaB.s 			page 8


 317              		.thumb_func
 318              		.fpu fpv4-sp-d16
 320              	sckUp:
 321              	.LFB135:
  89:main.c        **** 
  90:main.c        **** void sckUp() {
 322              		.loc 1 90 14 is_stmt 1 view -0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		@ link register save eliminated.
  91:main.c        ****   	GPIOD->BSRR |= GPIO_BSRR_BS3;
 327              		.loc 1 91 4 view .LVU80
 328              		.loc 1 91 16 is_stmt 0 view .LVU81
 329 0000 024A     		ldr	r2, .L22
 330 0002 9369     		ldr	r3, [r2, #24]
 331 0004 43F00803 		orr	r3, r3, #8
 332 0008 9361     		str	r3, [r2, #24]
  92:main.c        **** }
 333              		.loc 1 92 1 view .LVU82
 334 000a 7047     		bx	lr
 335              	.L23:
 336              		.align	2
 337              	.L22:
 338 000c 000C0240 		.word	1073875968
 339              		.cfi_endproc
 340              	.LFE135:
 342              		.section	.text.sckDown,"ax",%progbits
 343              		.align	1
 344              		.global	sckDown
 345              		.syntax unified
 346              		.thumb
 347              		.thumb_func
 348              		.fpu fpv4-sp-d16
 350              	sckDown:
 351              	.LFB136:
  93:main.c        **** 
  94:main.c        **** void sckDown() {
 352              		.loc 1 94 16 is_stmt 1 view -0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              		@ link register save eliminated.
  95:main.c        ****   	GPIOD->BSRR |= GPIO_BSRR_BR3;
 357              		.loc 1 95 4 view .LVU84
 358              		.loc 1 95 16 is_stmt 0 view .LVU85
 359 0000 024A     		ldr	r2, .L25
 360 0002 9369     		ldr	r3, [r2, #24]
 361 0004 43F40023 		orr	r3, r3, #524288
 362 0008 9361     		str	r3, [r2, #24]
  96:main.c        **** }
 363              		.loc 1 96 1 view .LVU86
 364 000a 7047     		bx	lr
 365              	.L26:
 366              		.align	2
 367              	.L25:
 368 000c 000C0240 		.word	1073875968
ARM GAS  /tmp/ccWiGGaB.s 			page 9


 369              		.cfi_endproc
 370              	.LFE136:
 372              		.section	.text.csUp,"ax",%progbits
 373              		.align	1
 374              		.global	csUp
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 378              		.fpu fpv4-sp-d16
 380              	csUp:
 381              	.LFB137:
  97:main.c        **** 
  98:main.c        **** void csUp() {
 382              		.loc 1 98 13 is_stmt 1 view -0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 0
 385              		@ frame_needed = 0, uses_anonymous_args = 0
 386              		@ link register save eliminated.
  99:main.c        ****   	GPIOH->BSRR |= GPIO_BSRR_BS6;
 387              		.loc 1 99 4 view .LVU88
 388              		.loc 1 99 16 is_stmt 0 view .LVU89
 389 0000 024A     		ldr	r2, .L28
 390 0002 9369     		ldr	r3, [r2, #24]
 391 0004 43F04003 		orr	r3, r3, #64
 392 0008 9361     		str	r3, [r2, #24]
 100:main.c        **** }
 393              		.loc 1 100 1 view .LVU90
 394 000a 7047     		bx	lr
 395              	.L29:
 396              		.align	2
 397              	.L28:
 398 000c 001C0240 		.word	1073880064
 399              		.cfi_endproc
 400              	.LFE137:
 402              		.section	.text.csDown,"ax",%progbits
 403              		.align	1
 404              		.global	csDown
 405              		.syntax unified
 406              		.thumb
 407              		.thumb_func
 408              		.fpu fpv4-sp-d16
 410              	csDown:
 411              	.LFB138:
 101:main.c        **** 
 102:main.c        **** void csDown() {
 412              		.loc 1 102 15 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 103:main.c        ****   	GPIOH->BSRR |= GPIO_BSRR_BR6;
 417              		.loc 1 103 4 view .LVU92
 418              		.loc 1 103 16 is_stmt 0 view .LVU93
 419 0000 024A     		ldr	r2, .L31
 420 0002 9369     		ldr	r3, [r2, #24]
 421 0004 43F48003 		orr	r3, r3, #4194304
 422 0008 9361     		str	r3, [r2, #24]
ARM GAS  /tmp/ccWiGGaB.s 			page 10


 104:main.c        **** }
 423              		.loc 1 104 1 view .LVU94
 424 000a 7047     		bx	lr
 425              	.L32:
 426              		.align	2
 427              	.L31:
 428 000c 001C0240 		.word	1073880064
 429              		.cfi_endproc
 430              	.LFE138:
 432              		.section	.text.mosiUp,"ax",%progbits
 433              		.align	1
 434              		.global	mosiUp
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu fpv4-sp-d16
 440              	mosiUp:
 441              	.LFB139:
 105:main.c        **** 
 106:main.c        **** void mosiUp() {
 442              		.loc 1 106 15 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 107:main.c        ****   	GPIOB->BSRR |= GPIO_BSRR_BS15;
 447              		.loc 1 107 4 view .LVU96
 448              		.loc 1 107 16 is_stmt 0 view .LVU97
 449 0000 024A     		ldr	r2, .L34
 450 0002 9369     		ldr	r3, [r2, #24]
 451 0004 43F40043 		orr	r3, r3, #32768
 452 0008 9361     		str	r3, [r2, #24]
 108:main.c        **** }
 453              		.loc 1 108 1 view .LVU98
 454 000a 7047     		bx	lr
 455              	.L35:
 456              		.align	2
 457              	.L34:
 458 000c 00040240 		.word	1073873920
 459              		.cfi_endproc
 460              	.LFE139:
 462              		.section	.text.mosiDown,"ax",%progbits
 463              		.align	1
 464              		.global	mosiDown
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu fpv4-sp-d16
 470              	mosiDown:
 471              	.LFB140:
 109:main.c        **** 
 110:main.c        **** void mosiDown() {
 472              		.loc 1 110 17 is_stmt 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
ARM GAS  /tmp/ccWiGGaB.s 			page 11


 111:main.c        ****   	GPIOB->BSRR |= GPIO_BSRR_BR15;
 477              		.loc 1 111 4 view .LVU100
 478              		.loc 1 111 16 is_stmt 0 view .LVU101
 479 0000 024A     		ldr	r2, .L37
 480 0002 9369     		ldr	r3, [r2, #24]
 481 0004 43F00043 		orr	r3, r3, #-2147483648
 482 0008 9361     		str	r3, [r2, #24]
 112:main.c        **** }
 483              		.loc 1 112 1 view .LVU102
 484 000a 7047     		bx	lr
 485              	.L38:
 486              		.align	2
 487              	.L37:
 488 000c 00040240 		.word	1073873920
 489              		.cfi_endproc
 490              	.LFE140:
 492              		.section	.rodata.itoa.str1.4,"aMS",%progbits,1
 493              		.align	2
 494              	.LC0:
 495 0000 3000     		.ascii	"0\000"
 496              		.section	.text.itoa,"ax",%progbits
 497              		.align	1
 498              		.global	itoa
 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 502              		.fpu fpv4-sp-d16
 504              	itoa:
 505              	.LVL5:
 506              	.LFB141:
 113:main.c        **** 
 114:main.c        **** char itoa_output[MAX_ITOA_OUTPUT_LENGTH];
 115:main.c        **** 
 116:main.c        **** char* itoa(int value) {
 507              		.loc 1 116 23 is_stmt 1 view -0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 0
 510              		@ frame_needed = 0, uses_anonymous_args = 0
 511              		@ link register save eliminated.
 117:main.c        **** 
 118:main.c        **** 	if(value == 0) { return "0"; }
 512              		.loc 1 118 2 view .LVU104
 513              		.loc 1 118 4 is_stmt 0 view .LVU105
 514 0000 D8B1     		cbz	r0, .L46
 515 0002 0246     		mov	r2, r0
 119:main.c        **** 
 120:main.c        **** 	int n = 0;
 516              		.loc 1 120 2 is_stmt 1 view .LVU106
 517              	.LVL6:
 121:main.c        **** 	if(value < 0) {
 518              		.loc 1 121 2 view .LVU107
 519              		.loc 1 121 4 is_stmt 0 view .LVU108
 520 0004 0028     		cmp	r0, #0
 521 0006 12DB     		blt	.L54
 120:main.c        **** 	if(value < 0) {
 522              		.loc 1 120 6 view .LVU109
 523 0008 0021     		movs	r1, #0
ARM GAS  /tmp/ccWiGGaB.s 			page 12


 524              	.LVL7:
 525              	.L42:
 122:main.c        **** 		value *= -1;
 123:main.c        **** 		itoa_output[n] = '-';
 124:main.c        **** 		n++;
 125:main.c        **** 	}
 126:main.c        **** 
 127:main.c        ****  	while(value != 0) {
 526              		.loc 1 127 8 is_stmt 1 view .LVU110
 527 000a C2B1     		cbz	r2, .L55
 128:main.c        **** 		itoa_output[n] = value % 10 + 48;
 528              		.loc 1 128 3 view .LVU111
 529              		.loc 1 128 26 is_stmt 0 view .LVU112
 530 000c 1748     		ldr	r0, .L57
 531 000e 80FB0230 		smull	r3, r0, r0, r2
 532 0012 D317     		asrs	r3, r2, #31
 533 0014 C3EBA003 		rsb	r3, r3, r0, asr #2
 534 0018 1846     		mov	r0, r3
 535 001a 03EB8303 		add	r3, r3, r3, lsl #2
 536 001e A2EB4303 		sub	r3, r2, r3, lsl #1
 537              		.loc 1 128 31 view .LVU113
 538 0022 3033     		adds	r3, r3, #48
 539              		.loc 1 128 18 view .LVU114
 540 0024 124A     		ldr	r2, .L57+4
 541              	.LVL8:
 542              		.loc 1 128 18 view .LVU115
 543 0026 5354     		strb	r3, [r2, r1]
 129:main.c        ****     	value /= 10;
 544              		.loc 1 129 6 is_stmt 1 view .LVU116
 545              		.loc 1 129 12 is_stmt 0 view .LVU117
 546 0028 0246     		mov	r2, r0
 547              	.LVL9:
 130:main.c        ****     	n++;
 548              		.loc 1 130 6 is_stmt 1 view .LVU118
 549              		.loc 1 130 7 is_stmt 0 view .LVU119
 550 002a 0131     		adds	r1, r1, #1
 551              	.LVL10:
 552              		.loc 1 130 7 view .LVU120
 553 002c EDE7     		b	.L42
 554              	.LVL11:
 555              	.L54:
 122:main.c        **** 		itoa_output[n] = '-';
 556              		.loc 1 122 3 is_stmt 1 view .LVU121
 122:main.c        **** 		itoa_output[n] = '-';
 557              		.loc 1 122 9 is_stmt 0 view .LVU122
 558 002e 4242     		rsbs	r2, r0, #0
 559              	.LVL12:
 123:main.c        **** 		n++;
 560              		.loc 1 123 3 is_stmt 1 view .LVU123
 123:main.c        **** 		n++;
 561              		.loc 1 123 18 is_stmt 0 view .LVU124
 562 0030 0F4B     		ldr	r3, .L57+4
 563 0032 2D21     		movs	r1, #45
 564 0034 1970     		strb	r1, [r3]
 124:main.c        **** 	}
 565              		.loc 1 124 3 is_stmt 1 view .LVU125
 566              	.LVL13:
ARM GAS  /tmp/ccWiGGaB.s 			page 13


 124:main.c        **** 	}
 567              		.loc 1 124 4 is_stmt 0 view .LVU126
 568 0036 0121     		movs	r1, #1
 569 0038 E7E7     		b	.L42
 570              	.LVL14:
 571              	.L46:
 118:main.c        **** 
 572              		.loc 1 118 26 view .LVU127
 573 003a 0E48     		ldr	r0, .L57+8
 574              	.LVL15:
 118:main.c        **** 
 575              		.loc 1 118 26 view .LVU128
 576 003c 7047     		bx	lr
 577              	.LVL16:
 578              	.L55:
 131:main.c        ****   	}
 132:main.c        **** 
 133:main.c        ****   	itoa_output[n] ='\0';
 579              		.loc 1 133 4 is_stmt 1 view .LVU129
 580              		.loc 1 133 19 is_stmt 0 view .LVU130
 581 003e 0C4B     		ldr	r3, .L57+4
 582 0040 0020     		movs	r0, #0
 583 0042 5854     		strb	r0, [r3, r1]
 134:main.c        **** 
 135:main.c        ****   	int i = 0, j = n - 1; // reverse
 584              		.loc 1 135 4 is_stmt 1 view .LVU131
 585              	.LVL17:
 586              		.loc 1 135 15 is_stmt 0 view .LVU132
 587 0044 4B1E     		subs	r3, r1, #1
 588              	.LVL18:
 136:main.c        ****   	char buffer;
 589              		.loc 1 136 4 is_stmt 1 view .LVU133
 137:main.c        **** 
 138:main.c        ****   	while (i < j) {
 590              		.loc 1 138 4 view .LVU134
 591              		.loc 1 138 10 view .LVU135
 592 0046 9A42     		cmp	r2, r3
 593 0048 0DDA     		bge	.L56
 116:main.c        **** 
 594              		.loc 1 116 23 is_stmt 0 view .LVU136
 595 004a 10B4     		push	{r4}
 596              	.LCFI0:
 597              		.cfi_def_cfa_offset 4
 598              		.cfi_offset 4, -4
 599              	.LVL19:
 600              	.L45:
 139:main.c        ****     	buffer = itoa_output[i];
 601              		.loc 1 139 6 is_stmt 1 view .LVU137
 602              		.loc 1 139 13 is_stmt 0 view .LVU138
 603 004c 0849     		ldr	r1, .L57+4
 604 004e 885C     		ldrb	r0, [r1, r2]	@ zero_extendqisi2
 605              	.LVL20:
 140:main.c        ****     	itoa_output[i] = itoa_output[j];
 606              		.loc 1 140 6 is_stmt 1 view .LVU139
 607              		.loc 1 140 34 is_stmt 0 view .LVU140
 608 0050 CC5C     		ldrb	r4, [r1, r3]	@ zero_extendqisi2
 609              		.loc 1 140 21 view .LVU141
ARM GAS  /tmp/ccWiGGaB.s 			page 14


 610 0052 8C54     		strb	r4, [r1, r2]
 141:main.c        ****     	itoa_output[j] = buffer;
 611              		.loc 1 141 6 is_stmt 1 view .LVU142
 612              		.loc 1 141 21 is_stmt 0 view .LVU143
 613 0054 C854     		strb	r0, [r1, r3]
 142:main.c        ****     	i++;
 614              		.loc 1 142 6 is_stmt 1 view .LVU144
 615              		.loc 1 142 7 is_stmt 0 view .LVU145
 616 0056 0132     		adds	r2, r2, #1
 617              	.LVL21:
 143:main.c        ****     	j--;
 618              		.loc 1 143 6 is_stmt 1 view .LVU146
 619              		.loc 1 143 7 is_stmt 0 view .LVU147
 620 0058 013B     		subs	r3, r3, #1
 621              	.LVL22:
 138:main.c        ****     	buffer = itoa_output[i];
 622              		.loc 1 138 10 is_stmt 1 view .LVU148
 623 005a 9A42     		cmp	r2, r3
 624 005c F6DB     		blt	.L45
 144:main.c        ****   	}
 145:main.c        **** 
 146:main.c        ****   	return itoa_output;
 625              		.loc 1 146 11 is_stmt 0 view .LVU149
 626 005e 0448     		ldr	r0, .L57+4
 627              	.LVL23:
 147:main.c        **** }
 628              		.loc 1 147 1 view .LVU150
 629 0060 5DF8044B 		ldr	r4, [sp], #4
 630              	.LCFI1:
 631              		.cfi_restore 4
 632              		.cfi_def_cfa_offset 0
 633 0064 7047     		bx	lr
 634              	.LVL24:
 635              	.L56:
 146:main.c        **** }
 636              		.loc 1 146 11 view .LVU151
 637 0066 0248     		ldr	r0, .L57+4
 638              		.loc 1 147 1 view .LVU152
 639 0068 7047     		bx	lr
 640              	.L58:
 641 006a 00BF     		.align	2
 642              	.L57:
 643 006c 67666666 		.word	1717986919
 644 0070 00000000 		.word	itoa_output
 645 0074 00000000 		.word	.LC0
 646              		.cfi_endproc
 647              	.LFE141:
 649              		.section	.text.sckRise,"ax",%progbits
 650              		.align	1
 651              		.global	sckRise
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu fpv4-sp-d16
 657              	sckRise:
 658              	.LFB142:
 148:main.c        **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 15


 149:main.c        **** void sckRise() { // rises sck from 0 to 1
 659              		.loc 1 149 16 is_stmt 1 view -0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663 0000 08B5     		push	{r3, lr}
 664              	.LCFI2:
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 3, -8
 667              		.cfi_offset 14, -4
 150:main.c        **** 	sckDown();
 668              		.loc 1 150 2 view .LVU154
 669 0002 FFF7FEFF 		bl	sckDown
 670              	.LVL25:
 151:main.c        ****   	sckUp();
 671              		.loc 1 151 4 view .LVU155
 672 0006 FFF7FEFF 		bl	sckUp
 673              	.LVL26:
 152:main.c        **** }
 674              		.loc 1 152 1 is_stmt 0 view .LVU156
 675 000a 08BD     		pop	{r3, pc}
 676              		.cfi_endproc
 677              	.LFE142:
 679              		.section	.text.M93C76SetOperationCode,"ax",%progbits
 680              		.align	1
 681              		.global	M93C76SetOperationCode
 682              		.syntax unified
 683              		.thumb
 684              		.thumb_func
 685              		.fpu fpv4-sp-d16
 687              	M93C76SetOperationCode:
 688              	.LVL27:
 689              	.LFB143:
 153:main.c        **** 
 154:main.c        **** void M93C76SetOperationCode(enum opCode code) {
 690              		.loc 1 154 47 is_stmt 1 view -0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694              		.loc 1 154 47 is_stmt 0 view .LVU158
 695 0000 10B5     		push	{r4, lr}
 696              	.LCFI3:
 697              		.cfi_def_cfa_offset 8
 698              		.cfi_offset 4, -8
 699              		.cfi_offset 14, -4
 700 0002 0446     		mov	r4, r0
 155:main.c        **** 
 156:main.c        **** 	mosiUp(); // start bit
 701              		.loc 1 156 2 is_stmt 1 view .LVU159
 702 0004 FFF7FEFF 		bl	mosiUp
 703              	.LVL28:
 157:main.c        **** 	sckRise();
 704              		.loc 1 157 2 view .LVU160
 705 0008 FFF7FEFF 		bl	sckRise
 706              	.LVL29:
 158:main.c        **** 	if(code >> 1) mosiUp();
 707              		.loc 1 158 2 view .LVU161
ARM GAS  /tmp/ccWiGGaB.s 			page 16


 708              		.loc 1 158 4 is_stmt 0 view .LVU162
 709 000c 6308     		lsrs	r3, r4, #1
 710 000e 0BD0     		beq	.L62
 711              		.loc 1 158 16 is_stmt 1 discriminator 1 view .LVU163
 712 0010 FFF7FEFF 		bl	mosiUp
 713              	.LVL30:
 714              	.L63:
 159:main.c        **** 	else mosiDown();
 160:main.c        **** 	sckRise();
 715              		.loc 1 160 2 view .LVU164
 716 0014 FFF7FEFF 		bl	sckRise
 717              	.LVL31:
 161:main.c        **** 	if(code % 2) mosiUp();
 718              		.loc 1 161 2 view .LVU165
 719              		.loc 1 161 4 is_stmt 0 view .LVU166
 720 0018 14F0010F 		tst	r4, #1
 721 001c 07D0     		beq	.L64
 722              		.loc 1 161 15 is_stmt 1 discriminator 1 view .LVU167
 723 001e FFF7FEFF 		bl	mosiUp
 724              	.LVL32:
 725              	.L65:
 162:main.c        **** 	else mosiDown();
 163:main.c        ****  	sckRise();
 726              		.loc 1 163 3 view .LVU168
 727 0022 FFF7FEFF 		bl	sckRise
 728              	.LVL33:
 164:main.c        **** 
 165:main.c        **** }
 729              		.loc 1 165 1 is_stmt 0 view .LVU169
 730 0026 10BD     		pop	{r4, pc}
 731              	.L62:
 159:main.c        **** 	sckRise();
 732              		.loc 1 159 7 is_stmt 1 view .LVU170
 733 0028 FFF7FEFF 		bl	mosiDown
 734              	.LVL34:
 735 002c F2E7     		b	.L63
 736              	.L64:
 162:main.c        **** 	else mosiDown();
 737              		.loc 1 162 7 view .LVU171
 738 002e FFF7FEFF 		bl	mosiDown
 739              	.LVL35:
 740 0032 F6E7     		b	.L65
 741              		.cfi_endproc
 742              	.LFE143:
 744              		.section	.text.M93C76SetAddress,"ax",%progbits
 745              		.align	1
 746              		.global	M93C76SetAddress
 747              		.syntax unified
 748              		.thumb
 749              		.thumb_func
 750              		.fpu fpv4-sp-d16
 752              	M93C76SetAddress:
 753              	.LVL36:
 754              	.LFB144:
 166:main.c        **** 
 167:main.c        **** void M93C76SetAddress(unsigned int addr) {
 755              		.loc 1 167 42 view -0
ARM GAS  /tmp/ccWiGGaB.s 			page 17


 756              		.cfi_startproc
 757              		@ args = 0, pretend = 0, frame = 0
 758              		@ frame_needed = 0, uses_anonymous_args = 0
 759              		.loc 1 167 42 is_stmt 0 view .LVU173
 760 0000 38B5     		push	{r3, r4, r5, lr}
 761              	.LCFI4:
 762              		.cfi_def_cfa_offset 16
 763              		.cfi_offset 3, -16
 764              		.cfi_offset 4, -12
 765              		.cfi_offset 5, -8
 766              		.cfi_offset 14, -4
 767 0002 0546     		mov	r5, r0
 168:main.c        **** 
 169:main.c        **** 	for(int i = 9; i >= 0; i--) {
 768              		.loc 1 169 2 is_stmt 1 view .LVU174
 769              	.LBB9:
 770              		.loc 1 169 6 view .LVU175
 771              	.LVL37:
 772              		.loc 1 169 10 is_stmt 0 view .LVU176
 773 0004 0924     		movs	r4, #9
 774              		.loc 1 169 2 view .LVU177
 775 0006 04E0     		b	.L68
 776              	.LVL38:
 777              	.L69:
 170:main.c        **** 		if (((addr >> i) & 1) == 1) mosiUp();
 171:main.c        **** 		else mosiDown();
 778              		.loc 1 171 8 is_stmt 1 view .LVU178
 779 0008 FFF7FEFF 		bl	mosiDown
 780              	.LVL39:
 781              	.L70:
 172:main.c        **** 		sckRise();
 782              		.loc 1 172 3 discriminator 2 view .LVU179
 783 000c FFF7FEFF 		bl	sckRise
 784              	.LVL40:
 169:main.c        **** 		if (((addr >> i) & 1) == 1) mosiUp();
 785              		.loc 1 169 25 discriminator 2 view .LVU180
 169:main.c        **** 		if (((addr >> i) & 1) == 1) mosiUp();
 786              		.loc 1 169 26 is_stmt 0 discriminator 2 view .LVU181
 787 0010 013C     		subs	r4, r4, #1
 788              	.LVL41:
 789              	.L68:
 169:main.c        **** 		if (((addr >> i) & 1) == 1) mosiUp();
 790              		.loc 1 169 17 is_stmt 1 discriminator 1 view .LVU182
 169:main.c        **** 		if (((addr >> i) & 1) == 1) mosiUp();
 791              		.loc 1 169 2 is_stmt 0 discriminator 1 view .LVU183
 792 0012 002C     		cmp	r4, #0
 793 0014 07DB     		blt	.L73
 170:main.c        **** 		if (((addr >> i) & 1) == 1) mosiUp();
 794              		.loc 1 170 3 is_stmt 1 view .LVU184
 170:main.c        **** 		if (((addr >> i) & 1) == 1) mosiUp();
 795              		.loc 1 170 14 is_stmt 0 view .LVU185
 796 0016 25FA04F3 		lsr	r3, r5, r4
 170:main.c        **** 		if (((addr >> i) & 1) == 1) mosiUp();
 797              		.loc 1 170 6 view .LVU186
 798 001a 13F0010F 		tst	r3, #1
 799 001e F3D0     		beq	.L69
 170:main.c        **** 		if (((addr >> i) & 1) == 1) mosiUp();
ARM GAS  /tmp/ccWiGGaB.s 			page 18


 800              		.loc 1 170 31 is_stmt 1 discriminator 1 view .LVU187
 801 0020 FFF7FEFF 		bl	mosiUp
 802              	.LVL42:
 803 0024 F2E7     		b	.L70
 804              	.L73:
 170:main.c        **** 		if (((addr >> i) & 1) == 1) mosiUp();
 805              		.loc 1 170 31 is_stmt 0 discriminator 1 view .LVU188
 806              	.LBE9:
 173:main.c        **** 	}
 174:main.c        **** 
 175:main.c        **** }
 807              		.loc 1 175 1 view .LVU189
 808 0026 38BD     		pop	{r3, r4, r5, pc}
 809              		.loc 1 175 1 view .LVU190
 810              		.cfi_endproc
 811              	.LFE144:
 813              		.section	.text.M93C76setValue,"ax",%progbits
 814              		.align	1
 815              		.global	M93C76setValue
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu fpv4-sp-d16
 821              	M93C76setValue:
 822              	.LVL43:
 823              	.LFB145:
 176:main.c        **** 
 177:main.c        **** void M93C76setValue(uint16_t value) {
 824              		.loc 1 177 37 is_stmt 1 view -0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 0
 827              		@ frame_needed = 0, uses_anonymous_args = 0
 828              		.loc 1 177 37 is_stmt 0 view .LVU192
 829 0000 38B5     		push	{r3, r4, r5, lr}
 830              	.LCFI5:
 831              		.cfi_def_cfa_offset 16
 832              		.cfi_offset 3, -16
 833              		.cfi_offset 4, -12
 834              		.cfi_offset 5, -8
 835              		.cfi_offset 14, -4
 836 0002 0546     		mov	r5, r0
 178:main.c        **** 
 179:main.c        **** 	for(int i = 15; i >= 0; i--) { // data
 837              		.loc 1 179 2 is_stmt 1 view .LVU193
 838              	.LBB10:
 839              		.loc 1 179 6 view .LVU194
 840              	.LVL44:
 841              		.loc 1 179 10 is_stmt 0 view .LVU195
 842 0004 0F24     		movs	r4, #15
 843              		.loc 1 179 2 view .LVU196
 844 0006 04E0     		b	.L75
 845              	.LVL45:
 846              	.L76:
 180:main.c        **** 		if(((value >> i) & 1) == 1) mosiUp();
 181:main.c        **** 		else mosiDown();
 847              		.loc 1 181 8 is_stmt 1 view .LVU197
 848 0008 FFF7FEFF 		bl	mosiDown
ARM GAS  /tmp/ccWiGGaB.s 			page 19


 849              	.LVL46:
 850              	.L77:
 182:main.c        **** 		sckRise();
 851              		.loc 1 182 3 discriminator 2 view .LVU198
 852 000c FFF7FEFF 		bl	sckRise
 853              	.LVL47:
 179:main.c        **** 		if(((value >> i) & 1) == 1) mosiUp();
 854              		.loc 1 179 26 discriminator 2 view .LVU199
 179:main.c        **** 		if(((value >> i) & 1) == 1) mosiUp();
 855              		.loc 1 179 27 is_stmt 0 discriminator 2 view .LVU200
 856 0010 013C     		subs	r4, r4, #1
 857              	.LVL48:
 858              	.L75:
 179:main.c        **** 		if(((value >> i) & 1) == 1) mosiUp();
 859              		.loc 1 179 18 is_stmt 1 discriminator 1 view .LVU201
 179:main.c        **** 		if(((value >> i) & 1) == 1) mosiUp();
 860              		.loc 1 179 2 is_stmt 0 discriminator 1 view .LVU202
 861 0012 002C     		cmp	r4, #0
 862 0014 07DB     		blt	.L80
 180:main.c        **** 		if(((value >> i) & 1) == 1) mosiUp();
 863              		.loc 1 180 3 is_stmt 1 view .LVU203
 180:main.c        **** 		if(((value >> i) & 1) == 1) mosiUp();
 864              		.loc 1 180 14 is_stmt 0 view .LVU204
 865 0016 45FA04F3 		asr	r3, r5, r4
 180:main.c        **** 		if(((value >> i) & 1) == 1) mosiUp();
 866              		.loc 1 180 5 view .LVU205
 867 001a 13F0010F 		tst	r3, #1
 868 001e F3D0     		beq	.L76
 180:main.c        **** 		if(((value >> i) & 1) == 1) mosiUp();
 869              		.loc 1 180 31 is_stmt 1 discriminator 1 view .LVU206
 870 0020 FFF7FEFF 		bl	mosiUp
 871              	.LVL49:
 872 0024 F2E7     		b	.L77
 873              	.L80:
 874              	.LBE10:
 183:main.c        **** 	}
 184:main.c        **** 
 185:main.c        **** }
 875              		.loc 1 185 1 is_stmt 0 view .LVU207
 876 0026 38BD     		pop	{r3, r4, r5, pc}
 877              		.loc 1 185 1 view .LVU208
 878              		.cfi_endproc
 879              	.LFE145:
 881              		.section	.text.M93C76WaitReady,"ax",%progbits
 882              		.align	1
 883              		.global	M93C76WaitReady
 884              		.syntax unified
 885              		.thumb
 886              		.thumb_func
 887              		.fpu fpv4-sp-d16
 889              	M93C76WaitReady:
 890              	.LFB146:
 186:main.c        **** 
 187:main.c        **** void M93C76WaitReady() {
 891              		.loc 1 187 24 is_stmt 1 view -0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccWiGGaB.s 			page 20


 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895 0000 08B5     		push	{r3, lr}
 896              	.LCFI6:
 897              		.cfi_def_cfa_offset 8
 898              		.cfi_offset 3, -8
 899              		.cfi_offset 14, -4
 188:main.c        **** 
 189:main.c        **** 	csDown();
 900              		.loc 1 189 2 view .LVU210
 901 0002 FFF7FEFF 		bl	csDown
 902              	.LVL50:
 190:main.c        ****   	sckRise();
 903              		.loc 1 190 4 view .LVU211
 904 0006 FFF7FEFF 		bl	sckRise
 905              	.LVL51:
 191:main.c        ****   	delayMcs(delvalue);
 906              		.loc 1 191 4 view .LVU212
 907 000a 0A4B     		ldr	r3, .L84
 908 000c 1868     		ldr	r0, [r3]
 909 000e FFF7FEFF 		bl	delayMcs
 910              	.LVL52:
 192:main.c        ****   	csUp();
 911              		.loc 1 192 4 view .LVU213
 912 0012 FFF7FEFF 		bl	csUp
 913              	.LVL53:
 193:main.c        ****   	while (((GPIOB->IDR & GPIO_IDR_ID14) >> 14) == 1) {} // waiting till chip is ready
 914              		.loc 1 193 4 view .LVU214
 915              	.L82:
 916              		.loc 1 193 55 discriminator 1 view .LVU215
 917              		.loc 1 193 10 discriminator 1 view .LVU216
 918              		.loc 1 193 18 is_stmt 0 discriminator 1 view .LVU217
 919 0016 084B     		ldr	r3, .L84+4
 920 0018 1B69     		ldr	r3, [r3, #16]
 921              		.loc 1 193 10 discriminator 1 view .LVU218
 922 001a 13F4804F 		tst	r3, #16384
 923 001e FAD1     		bne	.L82
 194:main.c        ****   	csDown();
 924              		.loc 1 194 4 is_stmt 1 view .LVU219
 925 0020 FFF7FEFF 		bl	csDown
 926              	.LVL54:
 195:main.c        ****   	delayMcs(delvalue*3);
 927              		.loc 1 195 4 view .LVU220
 928 0024 034B     		ldr	r3, .L84
 929 0026 1868     		ldr	r0, [r3]
 930 0028 00EB4000 		add	r0, r0, r0, lsl #1
 931 002c FFF7FEFF 		bl	delayMcs
 932              	.LVL55:
 196:main.c        **** 
 197:main.c        **** }
 933              		.loc 1 197 1 is_stmt 0 view .LVU221
 934 0030 08BD     		pop	{r3, pc}
 935              	.L85:
 936 0032 00BF     		.align	2
 937              	.L84:
 938 0034 00000000 		.word	.LANCHOR1
 939 0038 00040240 		.word	1073873920
 940              		.cfi_endproc
ARM GAS  /tmp/ccWiGGaB.s 			page 21


 941              	.LFE146:
 943              		.section	.text.M93C76Read,"ax",%progbits
 944              		.align	1
 945              		.global	M93C76Read
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv4-sp-d16
 951              	M93C76Read:
 952              	.LVL56:
 953              	.LFB147:
 198:main.c        **** 
 199:main.c        **** uint16_t M93C76Read(unsigned int addr) {
 954              		.loc 1 199 40 is_stmt 1 view -0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 958              		.loc 1 199 40 is_stmt 0 view .LVU223
 959 0000 38B5     		push	{r3, r4, r5, lr}
 960              	.LCFI7:
 961              		.cfi_def_cfa_offset 16
 962              		.cfi_offset 3, -16
 963              		.cfi_offset 4, -12
 964              		.cfi_offset 5, -8
 965              		.cfi_offset 14, -4
 200:main.c        **** 
 201:main.c        **** 	if(address_invalid(addr)) { sendViaUsart(errorInvalidAddress); return 0; }
 966              		.loc 1 201 2 is_stmt 1 view .LVU224
 967              		.loc 1 201 4 is_stmt 0 view .LVU225
 968 0002 B0F5007F 		cmp	r0, #512
 969 0006 0BD2     		bcs	.L94
 970 0008 0446     		mov	r4, r0
 202:main.c        **** 
 203:main.c        ****   	csUp();
 971              		.loc 1 203 4 is_stmt 1 view .LVU226
 972 000a FFF7FEFF 		bl	csUp
 973              	.LVL57:
 204:main.c        **** 	M93C76SetOperationCode(OPCODE_READ);
 974              		.loc 1 204 2 view .LVU227
 975 000e 0220     		movs	r0, #2
 976 0010 FFF7FEFF 		bl	M93C76SetOperationCode
 977              	.LVL58:
 205:main.c        ****   	M93C76SetAddress(addr);
 978              		.loc 1 205 4 view .LVU228
 979 0014 2046     		mov	r0, r4
 980 0016 FFF7FEFF 		bl	M93C76SetAddress
 981              	.LVL59:
 206:main.c        **** 
 207:main.c        ****   	uint16_t value = 0;
 982              		.loc 1 207 4 view .LVU229
 208:main.c        ****   	for(int i = 0; i < 16; i++) { // recieving data (16 bits)
 983              		.loc 1 208 4 view .LVU230
 984              	.LBB11:
 985              		.loc 1 208 8 view .LVU231
 986              		.loc 1 208 12 is_stmt 0 view .LVU232
 987 001a 0025     		movs	r5, #0
 988              	.LBE11:
ARM GAS  /tmp/ccWiGGaB.s 			page 22


 207:main.c        ****   	for(int i = 0; i < 16; i++) { // recieving data (16 bits)
 989              		.loc 1 207 13 view .LVU233
 990 001c 2C46     		mov	r4, r5
 991              	.LVL60:
 992              	.LBB12:
 993              		.loc 1 208 4 view .LVU234
 994 001e 08E0     		b	.L89
 995              	.LVL61:
 996              	.L94:
 997              		.loc 1 208 4 view .LVU235
 998              	.LBE12:
 201:main.c        **** 
 999              		.loc 1 201 30 is_stmt 1 discriminator 1 view .LVU236
 1000 0020 104B     		ldr	r3, .L96
 1001 0022 1868     		ldr	r0, [r3]
 1002              	.LVL62:
 201:main.c        **** 
 1003              		.loc 1 201 30 is_stmt 0 discriminator 1 view .LVU237
 1004 0024 FFF7FEFF 		bl	sendViaUsart
 1005              	.LVL63:
 201:main.c        **** 
 1006              		.loc 1 201 65 is_stmt 1 discriminator 1 view .LVU238
 201:main.c        **** 
 1007              		.loc 1 201 72 is_stmt 0 discriminator 1 view .LVU239
 1008 0028 0024     		movs	r4, #0
 1009 002a 18E0     		b	.L88
 1010              	.LVL64:
 1011              	.L90:
 1012              	.LBB13:
 209:main.c        **** 		sckDown();
 210:main.c        **** 		sckUp();
 211:main.c        **** 		delayMcs(delvalue);
 212:main.c        **** 		if(((GPIOB->IDR & GPIO_IDR_ID14) >> 14) == 1) { value = value*2 + 1;}
 213:main.c        **** 		else value = value*2 + 0;
 1013              		.loc 1 213 8 is_stmt 1 view .LVU240
 1014              		.loc 1 213 14 is_stmt 0 view .LVU241
 1015 002c 6400     		lsls	r4, r4, #1
 1016              	.LVL65:
 1017              		.loc 1 213 14 view .LVU242
 1018 002e A4B2     		uxth	r4, r4
 1019              	.LVL66:
 1020              	.L91:
 208:main.c        **** 		sckDown();
 1021              		.loc 1 208 27 is_stmt 1 discriminator 2 view .LVU243
 208:main.c        **** 		sckDown();
 1022              		.loc 1 208 28 is_stmt 0 discriminator 2 view .LVU244
 1023 0030 0135     		adds	r5, r5, #1
 1024              	.LVL67:
 1025              	.L89:
 208:main.c        **** 		sckDown();
 1026              		.loc 1 208 19 is_stmt 1 discriminator 1 view .LVU245
 208:main.c        **** 		sckDown();
 1027              		.loc 1 208 4 is_stmt 0 discriminator 1 view .LVU246
 1028 0032 0F2D     		cmp	r5, #15
 1029 0034 11DC     		bgt	.L95
 209:main.c        **** 		sckDown();
 1030              		.loc 1 209 3 is_stmt 1 view .LVU247
ARM GAS  /tmp/ccWiGGaB.s 			page 23


 1031 0036 FFF7FEFF 		bl	sckDown
 1032              	.LVL68:
 210:main.c        **** 		delayMcs(delvalue);
 1033              		.loc 1 210 3 view .LVU248
 1034 003a FFF7FEFF 		bl	sckUp
 1035              	.LVL69:
 211:main.c        **** 		if(((GPIOB->IDR & GPIO_IDR_ID14) >> 14) == 1) { value = value*2 + 1;}
 1036              		.loc 1 211 3 view .LVU249
 1037 003e 0A4B     		ldr	r3, .L96+4
 1038 0040 1868     		ldr	r0, [r3]
 1039 0042 FFF7FEFF 		bl	delayMcs
 1040              	.LVL70:
 212:main.c        **** 		else value = value*2 + 0;
 1041              		.loc 1 212 3 view .LVU250
 212:main.c        **** 		else value = value*2 + 0;
 1042              		.loc 1 212 13 is_stmt 0 view .LVU251
 1043 0046 094B     		ldr	r3, .L96+8
 1044 0048 1B69     		ldr	r3, [r3, #16]
 212:main.c        **** 		else value = value*2 + 0;
 1045              		.loc 1 212 5 view .LVU252
 1046 004a 13F4804F 		tst	r3, #16384
 1047 004e EDD0     		beq	.L90
 212:main.c        **** 		else value = value*2 + 0;
 1048              		.loc 1 212 51 is_stmt 1 discriminator 1 view .LVU253
 212:main.c        **** 		else value = value*2 + 0;
 1049              		.loc 1 212 67 is_stmt 0 discriminator 1 view .LVU254
 1050 0050 6400     		lsls	r4, r4, #1
 1051              	.LVL71:
 212:main.c        **** 		else value = value*2 + 0;
 1052              		.loc 1 212 67 discriminator 1 view .LVU255
 1053 0052 A4B2     		uxth	r4, r4
 212:main.c        **** 		else value = value*2 + 0;
 1054              		.loc 1 212 57 discriminator 1 view .LVU256
 1055 0054 0134     		adds	r4, r4, #1
 1056 0056 A4B2     		uxth	r4, r4
 1057              	.LVL72:
 212:main.c        **** 		else value = value*2 + 0;
 1058              		.loc 1 212 57 discriminator 1 view .LVU257
 1059 0058 EAE7     		b	.L91
 1060              	.L95:
 212:main.c        **** 		else value = value*2 + 0;
 1061              		.loc 1 212 57 discriminator 1 view .LVU258
 1062              	.LBE13:
 214:main.c        ****   	}
 215:main.c        **** 
 216:main.c        ****   	csDown();
 1063              		.loc 1 216 4 is_stmt 1 view .LVU259
 1064 005a FFF7FEFF 		bl	csDown
 1065              	.LVL73:
 217:main.c        ****   	return value;
 1066              		.loc 1 217 4 view .LVU260
 1067              	.L88:
 218:main.c        **** }
 1068              		.loc 1 218 1 is_stmt 0 view .LVU261
 1069 005e 2046     		mov	r0, r4
 1070 0060 38BD     		pop	{r3, r4, r5, pc}
 1071              	.L97:
ARM GAS  /tmp/ccWiGGaB.s 			page 24


 1072 0062 00BF     		.align	2
 1073              	.L96:
 1074 0064 00000000 		.word	.LANCHOR2
 1075 0068 00000000 		.word	.LANCHOR1
 1076 006c 00040240 		.word	1073873920
 1077              		.cfi_endproc
 1078              	.LFE147:
 1080              		.section	.rodata.M93C76Dump.str1.4,"aMS",%progbits,1
 1081              		.align	2
 1082              	.LC1:
 1083 0000 0A0D00   		.ascii	"\012\015\000"
 1084 0003 00       		.align	2
 1085              	.LC2:
 1086 0004 306200   		.ascii	"0b\000"
 1087 0007 00       		.align	2
 1088              	.LC3:
 1089 0008 3100     		.ascii	"1\000"
 1090 000a 0000     		.align	2
 1091              	.LC4:
 1092 000c 2000     		.ascii	" \000"
 1093 000e 0000     		.align	2
 1094              	.LC5:
 1095 0010 20202000 		.ascii	"   \000"
 1096              		.align	2
 1097              	.LC6:
 1098 0014 202000   		.ascii	"  \000"
 1099              		.section	.text.M93C76Dump,"ax",%progbits
 1100              		.align	1
 1101              		.global	M93C76Dump
 1102              		.syntax unified
 1103              		.thumb
 1104              		.thumb_func
 1105              		.fpu fpv4-sp-d16
 1107              	M93C76Dump:
 1108              	.LVL74:
 1109              	.LFB148:
 219:main.c        **** 
 220:main.c        **** void M93C76Dump(int mode) { // mode: 1 - binary, 2 - decimal, 3 - ASCII
 1110              		.loc 1 220 27 is_stmt 1 view -0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 8
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              		.loc 1 220 27 is_stmt 0 view .LVU263
 1115 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1116              	.LCFI8:
 1117              		.cfi_def_cfa_offset 20
 1118              		.cfi_offset 4, -20
 1119              		.cfi_offset 5, -16
 1120              		.cfi_offset 6, -12
 1121              		.cfi_offset 7, -8
 1122              		.cfi_offset 14, -4
 1123 0002 83B0     		sub	sp, sp, #12
 1124              	.LCFI9:
 1125              		.cfi_def_cfa_offset 32
 221:main.c        **** 
 222:main.c        **** 	switch(mode) {
 1126              		.loc 1 222 2 is_stmt 1 view .LVU264
ARM GAS  /tmp/ccWiGGaB.s 			page 25


 1127 0004 0228     		cmp	r0, #2
 1128 0006 4FD0     		beq	.L99
 1129 0008 0328     		cmp	r0, #3
 1130 000a 73D0     		beq	.L100
 1131 000c 0128     		cmp	r0, #1
 1132 000e 05D0     		beq	.L124
 223:main.c        **** 		case 1: { //outputs memory in binary
 224:main.c        **** 			sendViaUsart("\n\r");
 225:main.c        **** 			for(int i = 0; i < 64; i++) {
 226:main.c        **** 				for(int j = 0; j < 8; j++) {
 227:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 228:main.c        **** 
 229:main.c        **** 					sendViaUsart("0b");
 230:main.c        **** 					for(int i = 15; i >=8;i-- ) {
 231:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 232:main.c        **** 						else sendViaUsart("0");
 233:main.c        **** 					}
 234:main.c        **** 					sendViaUsart(" ");
 235:main.c        **** 
 236:main.c        **** 					sendViaUsart("0b");
 237:main.c        **** 					for(int i = 7; i >=0;i--) {
 238:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 239:main.c        **** 						else sendViaUsart("0");
 240:main.c        **** 					}
 241:main.c        **** 					sendViaUsart(" ");
 242:main.c        **** 
 243:main.c        **** 					sendViaUsart("   ");
 244:main.c        **** 				}
 245:main.c        **** 				sendViaUsart("\n\r");
 246:main.c        **** 			}
 247:main.c        **** 		} break;
 248:main.c        **** 		case 2: { //outputs memory in decimal
 249:main.c        **** 			sendViaUsart("\n\r");
 250:main.c        **** 			for(int i = 0; i < 64; i++) {
 251:main.c        **** 				for(int j = 0; j < 8; j++) {
 252:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 253:main.c        **** 					uint8_t hvalue = word >> 8;
 254:main.c        **** 					uint8_t lvalue = word;
 255:main.c        **** 					sendViaUsart(itoa(hvalue));
 256:main.c        **** 					sendViaUsart(" ");
 257:main.c        **** 					sendViaUsart(itoa(lvalue));
 258:main.c        **** 					sendViaUsart("  ");
 259:main.c        **** 				}
 260:main.c        **** 				sendViaUsart("\n\r");
 261:main.c        **** 			}
 262:main.c        **** 		} break;
 263:main.c        **** 		case 3: { //outputs memory in ASCII
 264:main.c        **** 			sendViaUsart("\n\r");
 265:main.c        **** 			for(int i = 0; i < 64; i++) {
 266:main.c        **** 				for(int j = 0; j < 8; j++) {
 267:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 268:main.c        **** 					char symbol[3];
 269:main.c        **** 
 270:main.c        **** 					symbol[2] = '\0';
 271:main.c        **** 					symbol[1] = word;
 272:main.c        **** 					symbol[0] = word >> 8;
 273:main.c        **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 26


 274:main.c        **** 					sendViaUsart(symbol);
 275:main.c        **** 					sendViaUsart("  ");
 276:main.c        **** 				}
 277:main.c        **** 				sendViaUsart("\n\r");
 278:main.c        **** 			}
 279:main.c        **** 		} break;
 280:main.c        **** 		default: {
 281:main.c        **** 			sendViaUsart(errorInvalidMode);
 1133              		.loc 1 281 4 view .LVU265
 1134 0010 4A4B     		ldr	r3, .L128
 1135 0012 1868     		ldr	r0, [r3]
 1136              	.LVL75:
 1137              		.loc 1 281 4 is_stmt 0 view .LVU266
 1138 0014 FFF7FEFF 		bl	sendViaUsart
 1139              	.LVL76:
 282:main.c        **** 		} break;
 1140              		.loc 1 282 5 is_stmt 1 view .LVU267
 1141              	.L98:
 283:main.c        **** 	}
 284:main.c        **** 
 285:main.c        **** }
 1142              		.loc 1 285 1 is_stmt 0 view .LVU268
 1143 0018 03B0     		add	sp, sp, #12
 1144              	.LCFI10:
 1145              		.cfi_remember_state
 1146              		.cfi_def_cfa_offset 20
 1147              		@ sp needed
 1148 001a F0BD     		pop	{r4, r5, r6, r7, pc}
 1149              	.LVL77:
 1150              	.L124:
 1151              	.LCFI11:
 1152              		.cfi_restore_state
 224:main.c        **** 			for(int i = 0; i < 64; i++) {
 1153              		.loc 1 224 4 is_stmt 1 view .LVU269
 1154 001c 4848     		ldr	r0, .L128+4
 1155              	.LVL78:
 224:main.c        **** 			for(int i = 0; i < 64; i++) {
 1156              		.loc 1 224 4 is_stmt 0 view .LVU270
 1157 001e FFF7FEFF 		bl	sendViaUsart
 1158              	.LVL79:
 225:main.c        **** 				for(int j = 0; j < 8; j++) {
 1159              		.loc 1 225 4 is_stmt 1 view .LVU271
 1160              	.LBB14:
 225:main.c        **** 				for(int j = 0; j < 8; j++) {
 1161              		.loc 1 225 8 view .LVU272
 225:main.c        **** 				for(int j = 0; j < 8; j++) {
 1162              		.loc 1 225 12 is_stmt 0 view .LVU273
 1163 0022 0027     		movs	r7, #0
 225:main.c        **** 				for(int j = 0; j < 8; j++) {
 1164              		.loc 1 225 4 view .LVU274
 1165 0024 3CE0     		b	.L102
 1166              	.LVL80:
 1167              	.L104:
 1168              	.LBB15:
 1169              	.LBB16:
 1170              	.LBB17:
 232:main.c        **** 					}
ARM GAS  /tmp/ccWiGGaB.s 			page 27


 1171              		.loc 1 232 12 is_stmt 1 view .LVU275
 1172 0026 4748     		ldr	r0, .L128+8
 1173 0028 FFF7FEFF 		bl	sendViaUsart
 1174              	.LVL81:
 1175              	.L105:
 230:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1176              		.loc 1 230 28 discriminator 2 view .LVU276
 230:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1177              		.loc 1 230 29 is_stmt 0 discriminator 2 view .LVU277
 1178 002c 013C     		subs	r4, r4, #1
 1179              	.LVL82:
 1180              	.L103:
 230:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1181              		.loc 1 230 22 is_stmt 1 discriminator 1 view .LVU278
 230:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1182              		.loc 1 230 6 is_stmt 0 discriminator 1 view .LVU279
 1183 002e 072C     		cmp	r4, #7
 1184 0030 08DD     		ble	.L125
 231:main.c        **** 						else sendViaUsart("0");
 1185              		.loc 1 231 7 is_stmt 1 view .LVU280
 231:main.c        **** 						else sendViaUsart("0");
 1186              		.loc 1 231 17 is_stmt 0 view .LVU281
 1187 0032 45FA04F3 		asr	r3, r5, r4
 231:main.c        **** 						else sendViaUsart("0");
 1188              		.loc 1 231 9 view .LVU282
 1189 0036 13F0010F 		tst	r3, #1
 1190 003a F4D0     		beq	.L104
 231:main.c        **** 						else sendViaUsart("0");
 1191              		.loc 1 231 36 is_stmt 1 discriminator 1 view .LVU283
 1192 003c 4248     		ldr	r0, .L128+12
 1193 003e FFF7FEFF 		bl	sendViaUsart
 1194              	.LVL83:
 1195 0042 F3E7     		b	.L105
 1196              	.L125:
 1197              	.LBE17:
 234:main.c        **** 
 1198              		.loc 1 234 6 view .LVU284
 1199 0044 4148     		ldr	r0, .L128+16
 1200 0046 FFF7FEFF 		bl	sendViaUsart
 1201              	.LVL84:
 236:main.c        **** 					for(int i = 7; i >=0;i--) {
 1202              		.loc 1 236 6 view .LVU285
 1203 004a 4148     		ldr	r0, .L128+20
 1204 004c FFF7FEFF 		bl	sendViaUsart
 1205              	.LVL85:
 237:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1206              		.loc 1 237 6 view .LVU286
 1207              	.LBB18:
 237:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1208              		.loc 1 237 10 view .LVU287
 237:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1209              		.loc 1 237 14 is_stmt 0 view .LVU288
 1210 0050 0724     		movs	r4, #7
 1211              	.LVL86:
 237:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1212              		.loc 1 237 6 view .LVU289
 1213 0052 03E0     		b	.L107
ARM GAS  /tmp/ccWiGGaB.s 			page 28


 1214              	.LVL87:
 1215              	.L108:
 239:main.c        **** 					}
 1216              		.loc 1 239 12 is_stmt 1 view .LVU290
 1217 0054 3B48     		ldr	r0, .L128+8
 1218 0056 FFF7FEFF 		bl	sendViaUsart
 1219              	.LVL88:
 1220              	.L109:
 237:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1221              		.loc 1 237 27 discriminator 2 view .LVU291
 237:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1222              		.loc 1 237 28 is_stmt 0 discriminator 2 view .LVU292
 1223 005a 013C     		subs	r4, r4, #1
 1224              	.LVL89:
 1225              	.L107:
 237:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1226              		.loc 1 237 21 is_stmt 1 discriminator 1 view .LVU293
 237:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1227              		.loc 1 237 6 is_stmt 0 discriminator 1 view .LVU294
 1228 005c 002C     		cmp	r4, #0
 1229 005e 08DB     		blt	.L126
 238:main.c        **** 						else sendViaUsart("0");
 1230              		.loc 1 238 7 is_stmt 1 view .LVU295
 238:main.c        **** 						else sendViaUsart("0");
 1231              		.loc 1 238 17 is_stmt 0 view .LVU296
 1232 0060 45FA04F3 		asr	r3, r5, r4
 238:main.c        **** 						else sendViaUsart("0");
 1233              		.loc 1 238 9 view .LVU297
 1234 0064 13F0010F 		tst	r3, #1
 1235 0068 F4D0     		beq	.L108
 238:main.c        **** 						else sendViaUsart("0");
 1236              		.loc 1 238 36 is_stmt 1 discriminator 1 view .LVU298
 1237 006a 3748     		ldr	r0, .L128+12
 1238 006c FFF7FEFF 		bl	sendViaUsart
 1239              	.LVL90:
 1240 0070 F3E7     		b	.L109
 1241              	.L126:
 1242              	.LBE18:
 241:main.c        **** 
 1243              		.loc 1 241 6 discriminator 2 view .LVU299
 1244 0072 3648     		ldr	r0, .L128+16
 1245 0074 FFF7FEFF 		bl	sendViaUsart
 1246              	.LVL91:
 243:main.c        **** 				}
 1247              		.loc 1 243 6 discriminator 2 view .LVU300
 1248 0078 3648     		ldr	r0, .L128+24
 1249 007a FFF7FEFF 		bl	sendViaUsart
 1250              	.LVL92:
 1251              	.LBE16:
 226:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1252              		.loc 1 226 27 discriminator 2 view .LVU301
 226:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1253              		.loc 1 226 28 is_stmt 0 discriminator 2 view .LVU302
 1254 007e 0136     		adds	r6, r6, #1
 1255              	.LVL93:
 1256              	.L112:
 226:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
ARM GAS  /tmp/ccWiGGaB.s 			page 29


 1257              		.loc 1 226 20 is_stmt 1 discriminator 1 view .LVU303
 226:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1258              		.loc 1 226 5 is_stmt 0 discriminator 1 view .LVU304
 1259 0080 072E     		cmp	r6, #7
 1260 0082 09DC     		bgt	.L127
 1261              	.LBB20:
 227:main.c        **** 
 1262              		.loc 1 227 6 is_stmt 1 view .LVU305
 227:main.c        **** 
 1263              		.loc 1 227 22 is_stmt 0 view .LVU306
 1264 0084 06EBC700 		add	r0, r6, r7, lsl #3
 1265 0088 FFF7FEFF 		bl	M93C76Read
 1266              	.LVL94:
 1267 008c 0546     		mov	r5, r0
 1268              	.LVL95:
 229:main.c        **** 					for(int i = 15; i >=8;i-- ) {
 1269              		.loc 1 229 6 is_stmt 1 view .LVU307
 1270 008e 3048     		ldr	r0, .L128+20
 1271 0090 FFF7FEFF 		bl	sendViaUsart
 1272              	.LVL96:
 230:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1273              		.loc 1 230 6 view .LVU308
 1274              	.LBB19:
 230:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1275              		.loc 1 230 10 view .LVU309
 230:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1276              		.loc 1 230 14 is_stmt 0 view .LVU310
 1277 0094 0F24     		movs	r4, #15
 230:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1278              		.loc 1 230 6 view .LVU311
 1279 0096 CAE7     		b	.L103
 1280              	.LVL97:
 1281              	.L127:
 230:main.c        **** 						if(((word >> i) & 1) == 1) { sendViaUsart("1"); }
 1282              		.loc 1 230 6 view .LVU312
 1283              	.LBE19:
 1284              	.LBE20:
 1285              	.LBE15:
 245:main.c        **** 			}
 1286              		.loc 1 245 5 is_stmt 1 discriminator 2 view .LVU313
 1287 0098 2948     		ldr	r0, .L128+4
 1288 009a FFF7FEFF 		bl	sendViaUsart
 1289              	.LVL98:
 225:main.c        **** 				for(int j = 0; j < 8; j++) {
 1290              		.loc 1 225 27 discriminator 2 view .LVU314
 225:main.c        **** 				for(int j = 0; j < 8; j++) {
 1291              		.loc 1 225 28 is_stmt 0 discriminator 2 view .LVU315
 1292 009e 0137     		adds	r7, r7, #1
 1293              	.LVL99:
 1294              	.L102:
 225:main.c        **** 				for(int j = 0; j < 8; j++) {
 1295              		.loc 1 225 19 is_stmt 1 discriminator 1 view .LVU316
 225:main.c        **** 				for(int j = 0; j < 8; j++) {
 1296              		.loc 1 225 4 is_stmt 0 discriminator 1 view .LVU317
 1297 00a0 3F2F     		cmp	r7, #63
 1298 00a2 B9DC     		bgt	.L98
 1299              	.LBB21:
ARM GAS  /tmp/ccWiGGaB.s 			page 30


 226:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1300              		.loc 1 226 13 view .LVU318
 1301 00a4 0026     		movs	r6, #0
 1302 00a6 EBE7     		b	.L112
 1303              	.LVL100:
 1304              	.L99:
 226:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1305              		.loc 1 226 13 view .LVU319
 1306              	.LBE21:
 1307              	.LBE14:
 249:main.c        **** 			for(int i = 0; i < 64; i++) {
 1308              		.loc 1 249 4 is_stmt 1 view .LVU320
 1309 00a8 2548     		ldr	r0, .L128+4
 1310              	.LVL101:
 249:main.c        **** 			for(int i = 0; i < 64; i++) {
 1311              		.loc 1 249 4 is_stmt 0 view .LVU321
 1312 00aa FFF7FEFF 		bl	sendViaUsart
 1313              	.LVL102:
 250:main.c        **** 				for(int j = 0; j < 8; j++) {
 1314              		.loc 1 250 4 is_stmt 1 view .LVU322
 1315              	.LBB22:
 250:main.c        **** 				for(int j = 0; j < 8; j++) {
 1316              		.loc 1 250 8 view .LVU323
 250:main.c        **** 				for(int j = 0; j < 8; j++) {
 1317              		.loc 1 250 12 is_stmt 0 view .LVU324
 1318 00ae 0026     		movs	r6, #0
 250:main.c        **** 				for(int j = 0; j < 8; j++) {
 1319              		.loc 1 250 4 view .LVU325
 1320 00b0 1CE0     		b	.L114
 1321              	.LVL103:
 1322              	.L115:
 1323              	.LBB23:
 1324              	.LBB24:
 252:main.c        **** 					uint8_t hvalue = word >> 8;
 1325              		.loc 1 252 6 is_stmt 1 discriminator 3 view .LVU326
 252:main.c        **** 					uint8_t hvalue = word >> 8;
 1326              		.loc 1 252 22 is_stmt 0 discriminator 3 view .LVU327
 1327 00b2 04EBC600 		add	r0, r4, r6, lsl #3
 1328 00b6 FFF7FEFF 		bl	M93C76Read
 1329              	.LVL104:
 253:main.c        **** 					uint8_t lvalue = word;
 1330              		.loc 1 253 6 is_stmt 1 discriminator 3 view .LVU328
 254:main.c        **** 					sendViaUsart(itoa(hvalue));
 1331              		.loc 1 254 6 discriminator 3 view .LVU329
 254:main.c        **** 					sendViaUsart(itoa(hvalue));
 1332              		.loc 1 254 14 is_stmt 0 discriminator 3 view .LVU330
 1333 00ba C5B2     		uxtb	r5, r0
 1334              	.LVL105:
 255:main.c        **** 					sendViaUsart(" ");
 1335              		.loc 1 255 6 is_stmt 1 discriminator 3 view .LVU331
 255:main.c        **** 					sendViaUsart(" ");
 1336              		.loc 1 255 19 is_stmt 0 discriminator 3 view .LVU332
 1337 00bc C0F30720 		ubfx	r0, r0, #8, #8
 1338              	.LVL106:
 255:main.c        **** 					sendViaUsart(" ");
 1339              		.loc 1 255 19 discriminator 3 view .LVU333
 1340 00c0 FFF7FEFF 		bl	itoa
ARM GAS  /tmp/ccWiGGaB.s 			page 31


 1341              	.LVL107:
 255:main.c        **** 					sendViaUsart(" ");
 1342              		.loc 1 255 6 discriminator 3 view .LVU334
 1343 00c4 FFF7FEFF 		bl	sendViaUsart
 1344              	.LVL108:
 256:main.c        **** 					sendViaUsart(itoa(lvalue));
 1345              		.loc 1 256 6 is_stmt 1 discriminator 3 view .LVU335
 1346 00c8 2048     		ldr	r0, .L128+16
 1347 00ca FFF7FEFF 		bl	sendViaUsart
 1348              	.LVL109:
 257:main.c        **** 					sendViaUsart("  ");
 1349              		.loc 1 257 6 discriminator 3 view .LVU336
 257:main.c        **** 					sendViaUsart("  ");
 1350              		.loc 1 257 19 is_stmt 0 discriminator 3 view .LVU337
 1351 00ce 2846     		mov	r0, r5
 1352 00d0 FFF7FEFF 		bl	itoa
 1353              	.LVL110:
 257:main.c        **** 					sendViaUsart("  ");
 1354              		.loc 1 257 6 discriminator 3 view .LVU338
 1355 00d4 FFF7FEFF 		bl	sendViaUsart
 1356              	.LVL111:
 258:main.c        **** 				}
 1357              		.loc 1 258 6 is_stmt 1 discriminator 3 view .LVU339
 1358 00d8 1F48     		ldr	r0, .L128+28
 1359 00da FFF7FEFF 		bl	sendViaUsart
 1360              	.LVL112:
 1361              	.LBE24:
 251:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1362              		.loc 1 251 27 discriminator 3 view .LVU340
 251:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1363              		.loc 1 251 28 is_stmt 0 discriminator 3 view .LVU341
 1364 00de 0134     		adds	r4, r4, #1
 1365              	.LVL113:
 1366              	.L116:
 251:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1367              		.loc 1 251 20 is_stmt 1 discriminator 1 view .LVU342
 251:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1368              		.loc 1 251 5 is_stmt 0 discriminator 1 view .LVU343
 1369 00e0 072C     		cmp	r4, #7
 1370 00e2 E6DD     		ble	.L115
 1371              	.LBE23:
 260:main.c        **** 			}
 1372              		.loc 1 260 5 is_stmt 1 discriminator 2 view .LVU344
 1373 00e4 1648     		ldr	r0, .L128+4
 1374 00e6 FFF7FEFF 		bl	sendViaUsart
 1375              	.LVL114:
 250:main.c        **** 				for(int j = 0; j < 8; j++) {
 1376              		.loc 1 250 27 discriminator 2 view .LVU345
 250:main.c        **** 				for(int j = 0; j < 8; j++) {
 1377              		.loc 1 250 28 is_stmt 0 discriminator 2 view .LVU346
 1378 00ea 0136     		adds	r6, r6, #1
 1379              	.LVL115:
 1380              	.L114:
 250:main.c        **** 				for(int j = 0; j < 8; j++) {
 1381              		.loc 1 250 19 is_stmt 1 discriminator 1 view .LVU347
 250:main.c        **** 				for(int j = 0; j < 8; j++) {
 1382              		.loc 1 250 4 is_stmt 0 discriminator 1 view .LVU348
ARM GAS  /tmp/ccWiGGaB.s 			page 32


 1383 00ec 3F2E     		cmp	r6, #63
 1384 00ee 93DC     		bgt	.L98
 1385              	.LBB25:
 251:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1386              		.loc 1 251 13 view .LVU349
 1387 00f0 0024     		movs	r4, #0
 1388 00f2 F5E7     		b	.L116
 1389              	.LVL116:
 1390              	.L100:
 251:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1391              		.loc 1 251 13 view .LVU350
 1392              	.LBE25:
 1393              	.LBE22:
 264:main.c        **** 			for(int i = 0; i < 64; i++) {
 1394              		.loc 1 264 4 is_stmt 1 view .LVU351
 1395 00f4 1248     		ldr	r0, .L128+4
 1396              	.LVL117:
 264:main.c        **** 			for(int i = 0; i < 64; i++) {
 1397              		.loc 1 264 4 is_stmt 0 view .LVU352
 1398 00f6 FFF7FEFF 		bl	sendViaUsart
 1399              	.LVL118:
 265:main.c        **** 				for(int j = 0; j < 8; j++) {
 1400              		.loc 1 265 4 is_stmt 1 view .LVU353
 1401              	.LBB26:
 265:main.c        **** 				for(int j = 0; j < 8; j++) {
 1402              		.loc 1 265 8 view .LVU354
 265:main.c        **** 				for(int j = 0; j < 8; j++) {
 1403              		.loc 1 265 12 is_stmt 0 view .LVU355
 1404 00fa 0025     		movs	r5, #0
 265:main.c        **** 				for(int j = 0; j < 8; j++) {
 1405              		.loc 1 265 4 view .LVU356
 1406 00fc 18E0     		b	.L117
 1407              	.LVL119:
 1408              	.L118:
 1409              	.LBB27:
 1410              	.LBB28:
 267:main.c        **** 					char symbol[3];
 1411              		.loc 1 267 6 is_stmt 1 discriminator 3 view .LVU357
 267:main.c        **** 					char symbol[3];
 1412              		.loc 1 267 22 is_stmt 0 discriminator 3 view .LVU358
 1413 00fe 04EBC500 		add	r0, r4, r5, lsl #3
 1414 0102 FFF7FEFF 		bl	M93C76Read
 1415              	.LVL120:
 268:main.c        **** 
 1416              		.loc 1 268 6 is_stmt 1 discriminator 3 view .LVU359
 270:main.c        **** 					symbol[1] = word;
 1417              		.loc 1 270 6 discriminator 3 view .LVU360
 270:main.c        **** 					symbol[1] = word;
 1418              		.loc 1 270 16 is_stmt 0 discriminator 3 view .LVU361
 1419 0106 0023     		movs	r3, #0
 1420 0108 8DF80630 		strb	r3, [sp, #6]
 271:main.c        **** 					symbol[0] = word >> 8;
 1421              		.loc 1 271 6 is_stmt 1 discriminator 3 view .LVU362
 271:main.c        **** 					symbol[0] = word >> 8;
 1422              		.loc 1 271 16 is_stmt 0 discriminator 3 view .LVU363
 1423 010c 8DF80500 		strb	r0, [sp, #5]
 272:main.c        **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 33


 1424              		.loc 1 272 6 is_stmt 1 discriminator 3 view .LVU364
 272:main.c        **** 
 1425              		.loc 1 272 16 is_stmt 0 discriminator 3 view .LVU365
 1426 0110 000A     		lsrs	r0, r0, #8
 1427              	.LVL121:
 272:main.c        **** 
 1428              		.loc 1 272 16 discriminator 3 view .LVU366
 1429 0112 8DF80400 		strb	r0, [sp, #4]
 274:main.c        **** 					sendViaUsart("  ");
 1430              		.loc 1 274 6 is_stmt 1 discriminator 3 view .LVU367
 1431 0116 01A8     		add	r0, sp, #4
 1432 0118 FFF7FEFF 		bl	sendViaUsart
 1433              	.LVL122:
 275:main.c        **** 				}
 1434              		.loc 1 275 6 discriminator 3 view .LVU368
 1435 011c 0E48     		ldr	r0, .L128+28
 1436 011e FFF7FEFF 		bl	sendViaUsart
 1437              	.LVL123:
 1438              	.LBE28:
 266:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1439              		.loc 1 266 27 discriminator 3 view .LVU369
 266:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1440              		.loc 1 266 28 is_stmt 0 discriminator 3 view .LVU370
 1441 0122 0134     		adds	r4, r4, #1
 1442              	.LVL124:
 1443              	.L119:
 266:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1444              		.loc 1 266 20 is_stmt 1 discriminator 1 view .LVU371
 266:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1445              		.loc 1 266 5 is_stmt 0 discriminator 1 view .LVU372
 1446 0124 072C     		cmp	r4, #7
 1447 0126 EADD     		ble	.L118
 1448              	.LBE27:
 277:main.c        **** 			}
 1449              		.loc 1 277 5 is_stmt 1 discriminator 2 view .LVU373
 1450 0128 0548     		ldr	r0, .L128+4
 1451 012a FFF7FEFF 		bl	sendViaUsart
 1452              	.LVL125:
 265:main.c        **** 				for(int j = 0; j < 8; j++) {
 1453              		.loc 1 265 27 discriminator 2 view .LVU374
 265:main.c        **** 				for(int j = 0; j < 8; j++) {
 1454              		.loc 1 265 28 is_stmt 0 discriminator 2 view .LVU375
 1455 012e 0135     		adds	r5, r5, #1
 1456              	.LVL126:
 1457              	.L117:
 265:main.c        **** 				for(int j = 0; j < 8; j++) {
 1458              		.loc 1 265 19 is_stmt 1 discriminator 1 view .LVU376
 265:main.c        **** 				for(int j = 0; j < 8; j++) {
 1459              		.loc 1 265 4 is_stmt 0 discriminator 1 view .LVU377
 1460 0130 3F2D     		cmp	r5, #63
 1461 0132 3FF771AF 		bgt	.L98
 1462              	.LBB29:
 266:main.c        **** 					uint16_t word = M93C76Read(i*8 + j);
 1463              		.loc 1 266 13 view .LVU378
 1464 0136 0024     		movs	r4, #0
 1465 0138 F4E7     		b	.L119
 1466              	.L129:
ARM GAS  /tmp/ccWiGGaB.s 			page 34


 1467 013a 00BF     		.align	2
 1468              	.L128:
 1469 013c 00000000 		.word	.LANCHOR3
 1470 0140 00000000 		.word	.LC1
 1471 0144 00000000 		.word	.LC0
 1472 0148 08000000 		.word	.LC3
 1473 014c 0C000000 		.word	.LC4
 1474 0150 04000000 		.word	.LC2
 1475 0154 10000000 		.word	.LC5
 1476 0158 14000000 		.word	.LC6
 1477              	.LBE29:
 1478              	.LBE26:
 1479              		.cfi_endproc
 1480              	.LFE148:
 1482              		.section	.text.M93C76Erase,"ax",%progbits
 1483              		.align	1
 1484              		.global	M93C76Erase
 1485              		.syntax unified
 1486              		.thumb
 1487              		.thumb_func
 1488              		.fpu fpv4-sp-d16
 1490              	M93C76Erase:
 1491              	.LVL127:
 1492              	.LFB149:
 286:main.c        **** 
 287:main.c        **** void M93C76Erase(unsigned int addr) {
 1493              		.loc 1 287 37 is_stmt 1 view -0
 1494              		.cfi_startproc
 1495              		@ args = 0, pretend = 0, frame = 0
 1496              		@ frame_needed = 0, uses_anonymous_args = 0
 1497              		.loc 1 287 37 is_stmt 0 view .LVU380
 1498 0000 10B5     		push	{r4, lr}
 1499              	.LCFI12:
 1500              		.cfi_def_cfa_offset 8
 1501              		.cfi_offset 4, -8
 1502              		.cfi_offset 14, -4
 288:main.c        **** 
 289:main.c        **** 	if(address_invalid(addr)) { sendViaUsart(errorInvalidAddress); return; }
 1503              		.loc 1 289 2 is_stmt 1 view .LVU381
 1504              		.loc 1 289 4 is_stmt 0 view .LVU382
 1505 0002 B0F5007F 		cmp	r0, #512
 1506 0006 0BD2     		bcs	.L134
 1507 0008 0446     		mov	r4, r0
 290:main.c        **** 
 291:main.c        **** 	csUp();
 1508              		.loc 1 291 2 is_stmt 1 view .LVU383
 1509 000a FFF7FEFF 		bl	csUp
 1510              	.LVL128:
 292:main.c        **** 	M93C76SetOperationCode(OPCODE_ERASE);
 1511              		.loc 1 292 2 view .LVU384
 1512 000e 0320     		movs	r0, #3
 1513 0010 FFF7FEFF 		bl	M93C76SetOperationCode
 1514              	.LVL129:
 293:main.c        ****   	M93C76SetAddress(addr);
 1515              		.loc 1 293 4 view .LVU385
 1516 0014 2046     		mov	r0, r4
 1517 0016 FFF7FEFF 		bl	M93C76SetAddress
ARM GAS  /tmp/ccWiGGaB.s 			page 35


 1518              	.LVL130:
 294:main.c        **** 	M93C76WaitReady();
 1519              		.loc 1 294 2 view .LVU386
 1520 001a FFF7FEFF 		bl	M93C76WaitReady
 1521              	.LVL131:
 1522              	.L130:
 295:main.c        **** 
 296:main.c        **** }
 1523              		.loc 1 296 1 is_stmt 0 view .LVU387
 1524 001e 10BD     		pop	{r4, pc}
 1525              	.LVL132:
 1526              	.L134:
 289:main.c        **** 
 1527              		.loc 1 289 30 is_stmt 1 discriminator 1 view .LVU388
 1528 0020 024B     		ldr	r3, .L135
 1529 0022 1868     		ldr	r0, [r3]
 1530              	.LVL133:
 289:main.c        **** 
 1531              		.loc 1 289 30 is_stmt 0 discriminator 1 view .LVU389
 1532 0024 FFF7FEFF 		bl	sendViaUsart
 1533              	.LVL134:
 289:main.c        **** 
 1534              		.loc 1 289 65 is_stmt 1 discriminator 1 view .LVU390
 1535 0028 F9E7     		b	.L130
 1536              	.L136:
 1537 002a 00BF     		.align	2
 1538              	.L135:
 1539 002c 00000000 		.word	.LANCHOR2
 1540              		.cfi_endproc
 1541              	.LFE149:
 1543              		.section	.text.M93C76Write,"ax",%progbits
 1544              		.align	1
 1545              		.global	M93C76Write
 1546              		.syntax unified
 1547              		.thumb
 1548              		.thumb_func
 1549              		.fpu fpv4-sp-d16
 1551              	M93C76Write:
 1552              	.LVL135:
 1553              	.LFB150:
 297:main.c        **** 
 298:main.c        **** void M93C76Write(unsigned int addr, uint16_t value) {
 1554              		.loc 1 298 53 view -0
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 0
 1557              		@ frame_needed = 0, uses_anonymous_args = 0
 1558              		.loc 1 298 53 is_stmt 0 view .LVU392
 1559 0000 38B5     		push	{r3, r4, r5, lr}
 1560              	.LCFI13:
 1561              		.cfi_def_cfa_offset 16
 1562              		.cfi_offset 3, -16
 1563              		.cfi_offset 4, -12
 1564              		.cfi_offset 5, -8
 1565              		.cfi_offset 14, -4
 299:main.c        **** 
 300:main.c        **** 	if(address_invalid(addr)) { sendViaUsart(errorInvalidAddress); return; }
 1566              		.loc 1 300 2 is_stmt 1 view .LVU393
ARM GAS  /tmp/ccWiGGaB.s 			page 36


 1567              		.loc 1 300 4 is_stmt 0 view .LVU394
 1568 0002 B0F5007F 		cmp	r0, #512
 1569 0006 0FD2     		bcs	.L141
 1570 0008 0446     		mov	r4, r0
 1571 000a 0D46     		mov	r5, r1
 301:main.c        **** 
 302:main.c        **** 	csUp();
 1572              		.loc 1 302 2 is_stmt 1 view .LVU395
 1573 000c FFF7FEFF 		bl	csUp
 1574              	.LVL136:
 303:main.c        ****   	M93C76SetOperationCode(OPCODE_WRITE);
 1575              		.loc 1 303 4 view .LVU396
 1576 0010 0120     		movs	r0, #1
 1577 0012 FFF7FEFF 		bl	M93C76SetOperationCode
 1578              	.LVL137:
 304:main.c        ****   	M93C76SetAddress(addr);
 1579              		.loc 1 304 4 view .LVU397
 1580 0016 2046     		mov	r0, r4
 1581 0018 FFF7FEFF 		bl	M93C76SetAddress
 1582              	.LVL138:
 305:main.c        ****   	M93C76setValue(value);
 1583              		.loc 1 305 4 view .LVU398
 1584 001c 2846     		mov	r0, r5
 1585 001e FFF7FEFF 		bl	M93C76setValue
 1586              	.LVL139:
 306:main.c        ****   	M93C76WaitReady();
 1587              		.loc 1 306 4 view .LVU399
 1588 0022 FFF7FEFF 		bl	M93C76WaitReady
 1589              	.LVL140:
 1590              	.L137:
 307:main.c        **** 
 308:main.c        **** }
 1591              		.loc 1 308 1 is_stmt 0 view .LVU400
 1592 0026 38BD     		pop	{r3, r4, r5, pc}
 1593              	.LVL141:
 1594              	.L141:
 300:main.c        **** 
 1595              		.loc 1 300 30 is_stmt 1 discriminator 1 view .LVU401
 1596 0028 024B     		ldr	r3, .L142
 1597 002a 1868     		ldr	r0, [r3]
 1598              	.LVL142:
 300:main.c        **** 
 1599              		.loc 1 300 30 is_stmt 0 discriminator 1 view .LVU402
 1600 002c FFF7FEFF 		bl	sendViaUsart
 1601              	.LVL143:
 300:main.c        **** 
 1602              		.loc 1 300 65 is_stmt 1 discriminator 1 view .LVU403
 1603 0030 F9E7     		b	.L137
 1604              	.L143:
 1605 0032 00BF     		.align	2
 1606              	.L142:
 1607 0034 00000000 		.word	.LANCHOR2
 1608              		.cfi_endproc
 1609              	.LFE150:
 1611              		.section	.text.M93C76WriteAll,"ax",%progbits
 1612              		.align	1
 1613              		.global	M93C76WriteAll
ARM GAS  /tmp/ccWiGGaB.s 			page 37


 1614              		.syntax unified
 1615              		.thumb
 1616              		.thumb_func
 1617              		.fpu fpv4-sp-d16
 1619              	M93C76WriteAll:
 1620              	.LVL144:
 1621              	.LFB151:
 309:main.c        **** 
 310:main.c        **** void M93C76WriteAll(uint16_t value) {
 1622              		.loc 1 310 37 view -0
 1623              		.cfi_startproc
 1624              		@ args = 0, pretend = 0, frame = 0
 1625              		@ frame_needed = 0, uses_anonymous_args = 0
 1626              		.loc 1 310 37 is_stmt 0 view .LVU405
 1627 0000 10B5     		push	{r4, lr}
 1628              	.LCFI14:
 1629              		.cfi_def_cfa_offset 8
 1630              		.cfi_offset 4, -8
 1631              		.cfi_offset 14, -4
 1632 0002 0446     		mov	r4, r0
 311:main.c        **** 
 312:main.c        ****   	csUp();
 1633              		.loc 1 312 4 is_stmt 1 view .LVU406
 1634 0004 FFF7FEFF 		bl	csUp
 1635              	.LVL145:
 313:main.c        **** 	M93C76SetOperationCode(OPCODE_WRAL);
 1636              		.loc 1 313 2 view .LVU407
 1637 0008 0020     		movs	r0, #0
 1638 000a FFF7FEFF 		bl	M93C76SetOperationCode
 1639              	.LVL146:
 314:main.c        **** 	M93C76SetAddress(DUMMYADDRESS_WRAL);
 1640              		.loc 1 314 2 view .LVU408
 1641 000e 4FF48070 		mov	r0, #256
 1642 0012 FFF7FEFF 		bl	M93C76SetAddress
 1643              	.LVL147:
 315:main.c        ****   	M93C76setValue(value);
 1644              		.loc 1 315 4 view .LVU409
 1645 0016 2046     		mov	r0, r4
 1646 0018 FFF7FEFF 		bl	M93C76setValue
 1647              	.LVL148:
 316:main.c        **** 	M93C76WaitReady();
 1648              		.loc 1 316 2 view .LVU410
 1649 001c FFF7FEFF 		bl	M93C76WaitReady
 1650              	.LVL149:
 317:main.c        **** 
 318:main.c        **** }
 1651              		.loc 1 318 1 is_stmt 0 view .LVU411
 1652 0020 10BD     		pop	{r4, pc}
 1653              		.cfi_endproc
 1654              	.LFE151:
 1656              		.section	.text.M93C76EraseAll,"ax",%progbits
 1657              		.align	1
 1658              		.global	M93C76EraseAll
 1659              		.syntax unified
 1660              		.thumb
 1661              		.thumb_func
 1662              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccWiGGaB.s 			page 38


 1664              	M93C76EraseAll:
 1665              	.LFB152:
 319:main.c        **** 
 320:main.c        **** void M93C76EraseAll() {
 1666              		.loc 1 320 23 is_stmt 1 view -0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 1670 0000 08B5     		push	{r3, lr}
 1671              	.LCFI15:
 1672              		.cfi_def_cfa_offset 8
 1673              		.cfi_offset 3, -8
 1674              		.cfi_offset 14, -4
 321:main.c        **** 
 322:main.c        ****   	csUp();
 1675              		.loc 1 322 4 view .LVU413
 1676 0002 FFF7FEFF 		bl	csUp
 1677              	.LVL150:
 323:main.c        ****   	M93C76SetOperationCode(OPCODE_ERAL);
 1678              		.loc 1 323 4 view .LVU414
 1679 0006 0020     		movs	r0, #0
 1680 0008 FFF7FEFF 		bl	M93C76SetOperationCode
 1681              	.LVL151:
 324:main.c        ****   	M93C76SetAddress(DUMMYADDRESS_ERAL);
 1682              		.loc 1 324 4 view .LVU415
 1683 000c 4FF40070 		mov	r0, #512
 1684 0010 FFF7FEFF 		bl	M93C76SetAddress
 1685              	.LVL152:
 325:main.c        ****   	M93C76WaitReady();
 1686              		.loc 1 325 4 view .LVU416
 1687 0014 FFF7FEFF 		bl	M93C76WaitReady
 1688              	.LVL153:
 326:main.c        **** 
 327:main.c        **** }
 1689              		.loc 1 327 1 is_stmt 0 view .LVU417
 1690 0018 08BD     		pop	{r3, pc}
 1691              		.cfi_endproc
 1692              	.LFE152:
 1694              		.section	.text.M93C76Wen,"ax",%progbits
 1695              		.align	1
 1696              		.global	M93C76Wen
 1697              		.syntax unified
 1698              		.thumb
 1699              		.thumb_func
 1700              		.fpu fpv4-sp-d16
 1702              	M93C76Wen:
 1703              	.LFB153:
 328:main.c        **** 
 329:main.c        **** void M93C76Wen() {
 1704              		.loc 1 329 18 is_stmt 1 view -0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 0
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708 0000 08B5     		push	{r3, lr}
 1709              	.LCFI16:
 1710              		.cfi_def_cfa_offset 8
 1711              		.cfi_offset 3, -8
ARM GAS  /tmp/ccWiGGaB.s 			page 39


 1712              		.cfi_offset 14, -4
 330:main.c        **** 
 331:main.c        ****   	csUp();
 1713              		.loc 1 331 4 view .LVU419
 1714 0002 FFF7FEFF 		bl	csUp
 1715              	.LVL154:
 332:main.c        ****   	M93C76SetOperationCode(OPCODE_WEN);
 1716              		.loc 1 332 4 view .LVU420
 1717 0006 0020     		movs	r0, #0
 1718 0008 FFF7FEFF 		bl	M93C76SetOperationCode
 1719              	.LVL155:
 333:main.c        ****   	M93C76SetAddress(DUMMYADDRESS_WEN);
 1720              		.loc 1 333 4 view .LVU421
 1721 000c 4FF44070 		mov	r0, #768
 1722 0010 FFF7FEFF 		bl	M93C76SetAddress
 1723              	.LVL156:
 334:main.c        ****   	csDown();
 1724              		.loc 1 334 4 view .LVU422
 1725 0014 FFF7FEFF 		bl	csDown
 1726              	.LVL157:
 335:main.c        ****   	sckRise();
 1727              		.loc 1 335 4 view .LVU423
 1728 0018 FFF7FEFF 		bl	sckRise
 1729              	.LVL158:
 336:main.c        **** 
 337:main.c        **** }
 1730              		.loc 1 337 1 is_stmt 0 view .LVU424
 1731 001c 08BD     		pop	{r3, pc}
 1732              		.cfi_endproc
 1733              	.LFE153:
 1735              		.section	.text.M93C76Wds,"ax",%progbits
 1736              		.align	1
 1737              		.global	M93C76Wds
 1738              		.syntax unified
 1739              		.thumb
 1740              		.thumb_func
 1741              		.fpu fpv4-sp-d16
 1743              	M93C76Wds:
 1744              	.LFB154:
 338:main.c        **** 
 339:main.c        **** void M93C76Wds() {
 1745              		.loc 1 339 18 is_stmt 1 view -0
 1746              		.cfi_startproc
 1747              		@ args = 0, pretend = 0, frame = 0
 1748              		@ frame_needed = 0, uses_anonymous_args = 0
 1749 0000 08B5     		push	{r3, lr}
 1750              	.LCFI17:
 1751              		.cfi_def_cfa_offset 8
 1752              		.cfi_offset 3, -8
 1753              		.cfi_offset 14, -4
 340:main.c        **** 
 341:main.c        **** 	csUp();
 1754              		.loc 1 341 2 view .LVU426
 1755 0002 FFF7FEFF 		bl	csUp
 1756              	.LVL159:
 342:main.c        **** 	M93C76SetOperationCode(OPCODE_WDS);
 1757              		.loc 1 342 2 view .LVU427
ARM GAS  /tmp/ccWiGGaB.s 			page 40


 1758 0006 0020     		movs	r0, #0
 1759 0008 FFF7FEFF 		bl	M93C76SetOperationCode
 1760              	.LVL160:
 343:main.c        ****   	M93C76SetAddress(DUMMYADDRESS_WDS);
 1761              		.loc 1 343 4 view .LVU428
 1762 000c 0020     		movs	r0, #0
 1763 000e FFF7FEFF 		bl	M93C76SetAddress
 1764              	.LVL161:
 344:main.c        ****   	csDown();
 1765              		.loc 1 344 4 view .LVU429
 1766 0012 FFF7FEFF 		bl	csDown
 1767              	.LVL162:
 345:main.c        ****   	sckRise();
 1768              		.loc 1 345 4 view .LVU430
 1769 0016 FFF7FEFF 		bl	sckRise
 1770              	.LVL163:
 346:main.c        **** 
 347:main.c        **** }
 1771              		.loc 1 347 1 is_stmt 0 view .LVU431
 1772 001a 08BD     		pop	{r3, pc}
 1773              		.cfi_endproc
 1774              	.LFE154:
 1776              		.section	.text.strlen,"ax",%progbits
 1777              		.align	1
 1778              		.global	strlen
 1779              		.syntax unified
 1780              		.thumb
 1781              		.thumb_func
 1782              		.fpu fpv4-sp-d16
 1784              	strlen:
 1785              	.LVL164:
 1786              	.LFB155:
 348:main.c        **** 
 349:main.c        **** int strlen(const char* string) {
 1787              		.loc 1 349 32 is_stmt 1 view -0
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 0
 1790              		@ frame_needed = 0, uses_anonymous_args = 0
 1791              		@ link register save eliminated.
 1792              		.loc 1 349 32 is_stmt 0 view .LVU433
 1793 0000 0146     		mov	r1, r0
 350:main.c        **** 	int length = 0;
 1794              		.loc 1 350 2 is_stmt 1 view .LVU434
 1795              	.LVL165:
 351:main.c        **** 	for(int i = 0; string[i] !=0; i++) {
 1796              		.loc 1 351 2 view .LVU435
 1797              	.LBB30:
 1798              		.loc 1 351 6 view .LVU436
 1799              		.loc 1 351 10 is_stmt 0 view .LVU437
 1800 0002 0023     		movs	r3, #0
 1801              	.LBE30:
 350:main.c        **** 	int length = 0;
 1802              		.loc 1 350 6 view .LVU438
 1803 0004 1846     		mov	r0, r3
 1804              	.LVL166:
 1805              	.L153:
 1806              	.LBB31:
ARM GAS  /tmp/ccWiGGaB.s 			page 41


 1807              		.loc 1 351 17 is_stmt 1 discriminator 1 view .LVU439
 1808              		.loc 1 351 23 is_stmt 0 discriminator 1 view .LVU440
 1809 0006 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 1810              		.loc 1 351 2 discriminator 1 view .LVU441
 1811 0008 12B1     		cbz	r2, .L155
 352:main.c        **** 		length++;
 1812              		.loc 1 352 3 is_stmt 1 discriminator 3 view .LVU442
 1813              		.loc 1 352 9 is_stmt 0 discriminator 3 view .LVU443
 1814 000a 0130     		adds	r0, r0, #1
 1815              	.LVL167:
 351:main.c        **** 	for(int i = 0; string[i] !=0; i++) {
 1816              		.loc 1 351 32 is_stmt 1 discriminator 3 view .LVU444
 351:main.c        **** 	for(int i = 0; string[i] !=0; i++) {
 1817              		.loc 1 351 33 is_stmt 0 discriminator 3 view .LVU445
 1818 000c 0133     		adds	r3, r3, #1
 1819              	.LVL168:
 351:main.c        **** 	for(int i = 0; string[i] !=0; i++) {
 1820              		.loc 1 351 33 discriminator 3 view .LVU446
 1821 000e FAE7     		b	.L153
 1822              	.L155:
 351:main.c        **** 	for(int i = 0; string[i] !=0; i++) {
 1823              		.loc 1 351 33 discriminator 3 view .LVU447
 1824              	.LBE31:
 353:main.c        **** 	}
 354:main.c        **** 	return length;
 355:main.c        **** }
 1825              		.loc 1 355 1 view .LVU448
 1826 0010 7047     		bx	lr
 1827              		.cfi_endproc
 1828              	.LFE155:
 1830              		.section	.text.M93C76WriteString,"ax",%progbits
 1831              		.align	1
 1832              		.global	M93C76WriteString
 1833              		.syntax unified
 1834              		.thumb
 1835              		.thumb_func
 1836              		.fpu fpv4-sp-d16
 1838              	M93C76WriteString:
 1839              	.LVL169:
 1840              	.LFB156:
 356:main.c        **** 
 357:main.c        **** void M93C76WriteString(unsigned int addr, char* string) {
 1841              		.loc 1 357 57 is_stmt 1 view -0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
 1845              		.loc 1 357 57 is_stmt 0 view .LVU450
 1846 0000 70B5     		push	{r4, r5, r6, lr}
 1847              	.LCFI18:
 1848              		.cfi_def_cfa_offset 16
 1849              		.cfi_offset 4, -16
 1850              		.cfi_offset 5, -12
 1851              		.cfi_offset 6, -8
 1852              		.cfi_offset 14, -4
 358:main.c        **** 
 359:main.c        **** 	if(address_invalid(addr)) { sendViaUsart(errorInvalidAddress); return; }
 1853              		.loc 1 359 2 is_stmt 1 view .LVU451
ARM GAS  /tmp/ccWiGGaB.s 			page 42


 1854              		.loc 1 359 4 is_stmt 0 view .LVU452
 1855 0002 B0F5007F 		cmp	r0, #512
 1856 0006 19D2     		bcs	.L164
 1857 0008 0646     		mov	r6, r0
 1858 000a 0D46     		mov	r5, r1
 360:main.c        **** 	if(strlen(string) > (512 - addr)*2) { sendViaUsart(errorBeyondMemory); return; }
 1859              		.loc 1 360 2 is_stmt 1 view .LVU453
 1860              		.loc 1 360 5 is_stmt 0 view .LVU454
 1861 000c 0846     		mov	r0, r1
 1862              	.LVL170:
 1863              		.loc 1 360 5 view .LVU455
 1864 000e FFF7FEFF 		bl	strlen
 1865              	.LVL171:
 1866              		.loc 1 360 27 view .LVU456
 1867 0012 C6F50073 		rsb	r3, r6, #512
 1868              		.loc 1 360 4 view .LVU457
 1869 0016 B0EB430F 		cmp	r0, r3, lsl #1
 1870 001a 14D8     		bhi	.L165
 361:main.c        **** 
 362:main.c        **** 	int i = 0;
 363:main.c        **** 	for(i = 0; (string[i] != '\0') && (string[i + 1] != '\0'); i += 2) {
 1871              		.loc 1 363 8 view .LVU458
 1872 001c 0024     		movs	r4, #0
 1873              	.L159:
 1874              	.LVL172:
 1875              		.loc 1 363 13 is_stmt 1 discriminator 1 view .LVU459
 1876              		.loc 1 363 20 is_stmt 0 discriminator 1 view .LVU460
 1877 001e 2B5D     		ldrb	r3, [r5, r4]	@ zero_extendqisi2
 1878              		.loc 1 363 2 discriminator 1 view .LVU461
 1879 0020 B3B1     		cbz	r3, .L160
 1880              		.loc 1 363 43 discriminator 3 view .LVU462
 1881 0022 2A19     		adds	r2, r5, r4
 1882 0024 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1883              		.loc 1 363 33 discriminator 3 view .LVU463
 1884 0026 99B1     		cbz	r1, .L160
 364:main.c        **** 		M93C76Write(addr + i/2, (string[i] << 8) | string[i+1]);
 1885              		.loc 1 364 3 is_stmt 1 discriminator 4 view .LVU464
 1886              		.loc 1 364 23 is_stmt 0 discriminator 4 view .LVU465
 1887 0028 04EBD470 		add	r0, r4, r4, lsr #31
 1888              		.loc 1 364 3 discriminator 4 view .LVU466
 1889 002c 41EA0321 		orr	r1, r1, r3, lsl #8
 1890 0030 06EB6000 		add	r0, r6, r0, asr #1
 1891 0034 FFF7FEFF 		bl	M93C76Write
 1892              	.LVL173:
 363:main.c        **** 		M93C76Write(addr + i/2, (string[i] << 8) | string[i+1]);
 1893              		.loc 1 363 61 is_stmt 1 discriminator 4 view .LVU467
 363:main.c        **** 		M93C76Write(addr + i/2, (string[i] << 8) | string[i+1]);
 1894              		.loc 1 363 63 is_stmt 0 discriminator 4 view .LVU468
 1895 0038 0234     		adds	r4, r4, #2
 1896              	.LVL174:
 363:main.c        **** 		M93C76Write(addr + i/2, (string[i] << 8) | string[i+1]);
 1897              		.loc 1 363 63 discriminator 4 view .LVU469
 1898 003a F0E7     		b	.L159
 1899              	.LVL175:
 1900              	.L164:
 359:main.c        **** 	if(strlen(string) > (512 - addr)*2) { sendViaUsart(errorBeyondMemory); return; }
 1901              		.loc 1 359 30 is_stmt 1 discriminator 1 view .LVU470
ARM GAS  /tmp/ccWiGGaB.s 			page 43


 1902 003c 0C4B     		ldr	r3, .L167
 1903 003e 1868     		ldr	r0, [r3]
 1904              	.LVL176:
 359:main.c        **** 	if(strlen(string) > (512 - addr)*2) { sendViaUsart(errorBeyondMemory); return; }
 1905              		.loc 1 359 30 is_stmt 0 discriminator 1 view .LVU471
 1906 0040 FFF7FEFF 		bl	sendViaUsart
 1907              	.LVL177:
 359:main.c        **** 	if(strlen(string) > (512 - addr)*2) { sendViaUsart(errorBeyondMemory); return; }
 1908              		.loc 1 359 65 is_stmt 1 discriminator 1 view .LVU472
 1909 0044 05E0     		b	.L156
 1910              	.LVL178:
 1911              	.L165:
 360:main.c        **** 
 1912              		.loc 1 360 40 discriminator 1 view .LVU473
 1913 0046 0B4B     		ldr	r3, .L167+4
 1914 0048 1868     		ldr	r0, [r3]
 1915 004a FFF7FEFF 		bl	sendViaUsart
 1916              	.LVL179:
 360:main.c        **** 
 1917              		.loc 1 360 73 discriminator 1 view .LVU474
 1918 004e 00E0     		b	.L156
 1919              	.LVL180:
 1920              	.L160:
 365:main.c        **** 	}
 366:main.c        **** 
 367:main.c        **** 	if(string[i] != '\0') M93C76Write(addr + i/2, (string[i] << 8) | (M93C76Read(addr + i/2) & 0x00FF)
 1921              		.loc 1 367 2 view .LVU475
 1922              		.loc 1 367 4 is_stmt 0 view .LVU476
 1923 0050 03B9     		cbnz	r3, .L166
 1924              	.LVL181:
 1925              	.L156:
 368:main.c        **** 	return;
 369:main.c        **** }
 1926              		.loc 1 369 1 view .LVU477
 1927 0052 70BD     		pop	{r4, r5, r6, pc}
 1928              	.LVL182:
 1929              	.L166:
 367:main.c        **** 	return;
 1930              		.loc 1 367 24 is_stmt 1 discriminator 1 view .LVU478
 367:main.c        **** 	return;
 1931              		.loc 1 367 44 is_stmt 0 discriminator 1 view .LVU479
 1932 0054 04EBD474 		add	r4, r4, r4, lsr #31
 1933              	.LVL183:
 367:main.c        **** 	return;
 1934              		.loc 1 367 24 discriminator 1 view .LVU480
 1935 0058 06EB6404 		add	r4, r6, r4, asr #1
 367:main.c        **** 	return;
 1936              		.loc 1 367 59 discriminator 1 view .LVU481
 1937 005c 1D02     		lsls	r5, r3, #8
 1938              	.LVL184:
 367:main.c        **** 	return;
 1939              		.loc 1 367 68 discriminator 1 view .LVU482
 1940 005e 2046     		mov	r0, r4
 1941 0060 FFF7FEFF 		bl	M93C76Read
 1942              	.LVL185:
 367:main.c        **** 	return;
 1943              		.loc 1 367 91 discriminator 1 view .LVU483
ARM GAS  /tmp/ccWiGGaB.s 			page 44


 1944 0064 C1B2     		uxtb	r1, r0
 367:main.c        **** 	return;
 1945              		.loc 1 367 24 discriminator 1 view .LVU484
 1946 0066 2943     		orrs	r1, r1, r5
 1947 0068 2046     		mov	r0, r4
 1948 006a FFF7FEFF 		bl	M93C76Write
 1949              	.LVL186:
 1950 006e F0E7     		b	.L156
 1951              	.L168:
 1952              		.align	2
 1953              	.L167:
 1954 0070 00000000 		.word	.LANCHOR2
 1955 0074 00000000 		.word	.LANCHOR4
 1956              		.cfi_endproc
 1957              	.LFE156:
 1959              		.section	.text.main,"ax",%progbits
 1960              		.align	1
 1961              		.global	main
 1962              		.syntax unified
 1963              		.thumb
 1964              		.thumb_func
 1965              		.fpu fpv4-sp-d16
 1967              	main:
 1968              	.LFB157:
 370:main.c        **** 
 371:main.c        **** // 1 - cs d10 ph6
 372:main.c        **** // 2 - sck d13 pd3
 373:main.c        **** // 3 - mosi d11 pb15
 374:main.c        **** // 4 - miso d12 pb14
 375:main.c        **** 
 376:main.c        **** int main(void) {
 1969              		.loc 1 376 16 is_stmt 1 view -0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973 0000 10B5     		push	{r4, lr}
 1974              	.LCFI19:
 1975              		.cfi_def_cfa_offset 8
 1976              		.cfi_offset 4, -8
 1977              		.cfi_offset 14, -4
 377:main.c        **** 
 378:main.c        ****   	set_sysclk_max();
 1978              		.loc 1 378 4 view .LVU486
 1979 0002 FFF7FEFF 		bl	set_sysclk_max
 1980              	.LVL187:
 379:main.c        ****   	UART6Config();
 1981              		.loc 1 379 4 view .LVU487
 1982 0006 FFF7FEFF 		bl	UART6Config
 1983              	.LVL188:
 380:main.c        ****   	SysTick_Config(SystemCoreClock/(800000/9));
 1984              		.loc 1 380 4 view .LVU488
 1985 000a 2C4B     		ldr	r3, .L172
 1986 000c 1B68     		ldr	r3, [r3]
 1987 000e DB08     		lsrs	r3, r3, #3
 1988 0010 2B4A     		ldr	r2, .L172+4
 1989 0012 A2FB0323 		umull	r2, r3, r2, r3
 1990 0016 9B0A     		lsrs	r3, r3, #10
ARM GAS  /tmp/ccWiGGaB.s 			page 45


 1991              	.LVL189:
 1992              	.LBB32:
 1993              	.LBI32:
 1994              		.file 2 "../CMSIS/Include/core_cm4.h"
   1:../CMSIS/Include/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/Include/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/Include/core_cm4.h ****  * @version  V5.0.8
   5:../CMSIS/Include/core_cm4.h ****  * @date     04. June 2018
   6:../CMSIS/Include/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/Include/core_cm4.h **** /*
   8:../CMSIS/Include/core_cm4.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:../CMSIS/Include/core_cm4.h ****  *
  10:../CMSIS/Include/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/Include/core_cm4.h ****  *
  12:../CMSIS/Include/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/Include/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/Include/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/Include/core_cm4.h ****  *
  16:../CMSIS/Include/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/Include/core_cm4.h ****  *
  18:../CMSIS/Include/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/Include/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/Include/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/Include/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/Include/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/Include/core_cm4.h ****  */
  24:../CMSIS/Include/core_cm4.h **** 
  25:../CMSIS/Include/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/Include/core_cm4.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/Include/core_cm4.h **** #elif defined (__clang__)
  28:../CMSIS/Include/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/Include/core_cm4.h **** #endif
  30:../CMSIS/Include/core_cm4.h **** 
  31:../CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/Include/core_cm4.h **** 
  34:../CMSIS/Include/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/Include/core_cm4.h **** 
  36:../CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/Include/core_cm4.h ****  extern "C" {
  38:../CMSIS/Include/core_cm4.h **** #endif
  39:../CMSIS/Include/core_cm4.h **** 
  40:../CMSIS/Include/core_cm4.h **** /**
  41:../CMSIS/Include/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/Include/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/Include/core_cm4.h **** 
  44:../CMSIS/Include/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/Include/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/Include/core_cm4.h **** 
  47:../CMSIS/Include/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/Include/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/Include/core_cm4.h **** 
  50:../CMSIS/Include/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/Include/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/Include/core_cm4.h ****  */
  53:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 46


  54:../CMSIS/Include/core_cm4.h **** 
  55:../CMSIS/Include/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/Include/core_cm4.h ****  *                 CMSIS definitions
  57:../CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/Include/core_cm4.h **** /**
  59:../CMSIS/Include/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/Include/core_cm4.h ****   @{
  61:../CMSIS/Include/core_cm4.h ****  */
  62:../CMSIS/Include/core_cm4.h **** 
  63:../CMSIS/Include/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/Include/core_cm4.h **** 
  65:../CMSIS/Include/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/Include/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/Include/core_cm4.h **** 
  71:../CMSIS/Include/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/Include/core_cm4.h **** 
  73:../CMSIS/Include/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/Include/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/Include/core_cm4.h **** */
  76:../CMSIS/Include/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/Include/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/Include/core_cm4.h ****     #else
  81:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/Include/core_cm4.h ****     #endif
  84:../CMSIS/Include/core_cm4.h ****   #else
  85:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/Include/core_cm4.h ****   #endif
  87:../CMSIS/Include/core_cm4.h **** 
  88:../CMSIS/Include/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/Include/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/Include/core_cm4.h ****     #else
  93:../CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/Include/core_cm4.h ****     #endif
  96:../CMSIS/Include/core_cm4.h ****   #else
  97:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/Include/core_cm4.h ****   #endif
  99:../CMSIS/Include/core_cm4.h **** 
 100:../CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/Include/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/Include/core_cm4.h ****     #else
 105:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/Include/core_cm4.h ****     #endif
 108:../CMSIS/Include/core_cm4.h ****   #else
 109:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/Include/core_cm4.h ****   #endif
ARM GAS  /tmp/ccWiGGaB.s 			page 47


 111:../CMSIS/Include/core_cm4.h **** 
 112:../CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/Include/core_cm4.h ****   #if defined __ARMVFP__
 114:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/Include/core_cm4.h ****     #else
 117:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/Include/core_cm4.h ****     #endif
 120:../CMSIS/Include/core_cm4.h ****   #else
 121:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/Include/core_cm4.h ****   #endif
 123:../CMSIS/Include/core_cm4.h **** 
 124:../CMSIS/Include/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/Include/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/Include/core_cm4.h ****     #else
 129:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/Include/core_cm4.h ****     #endif
 132:../CMSIS/Include/core_cm4.h ****   #else
 133:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/Include/core_cm4.h ****   #endif
 135:../CMSIS/Include/core_cm4.h **** 
 136:../CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/Include/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/Include/core_cm4.h ****     #else
 141:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/Include/core_cm4.h ****     #endif
 144:../CMSIS/Include/core_cm4.h ****   #else
 145:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/Include/core_cm4.h ****   #endif
 147:../CMSIS/Include/core_cm4.h **** 
 148:../CMSIS/Include/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/Include/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/Include/core_cm4.h ****     #else
 153:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/Include/core_cm4.h ****     #endif
 156:../CMSIS/Include/core_cm4.h ****   #else
 157:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/Include/core_cm4.h ****   #endif
 159:../CMSIS/Include/core_cm4.h **** 
 160:../CMSIS/Include/core_cm4.h **** #endif
 161:../CMSIS/Include/core_cm4.h **** 
 162:../CMSIS/Include/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/Include/core_cm4.h **** 
 164:../CMSIS/Include/core_cm4.h **** 
 165:../CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/Include/core_cm4.h **** }
 167:../CMSIS/Include/core_cm4.h **** #endif
ARM GAS  /tmp/ccWiGGaB.s 			page 48


 168:../CMSIS/Include/core_cm4.h **** 
 169:../CMSIS/Include/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/Include/core_cm4.h **** 
 171:../CMSIS/Include/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/Include/core_cm4.h **** 
 173:../CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/Include/core_cm4.h **** 
 176:../CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/Include/core_cm4.h ****  extern "C" {
 178:../CMSIS/Include/core_cm4.h **** #endif
 179:../CMSIS/Include/core_cm4.h **** 
 180:../CMSIS/Include/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/Include/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/Include/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/Include/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/Include/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/Include/core_cm4.h ****   #endif
 186:../CMSIS/Include/core_cm4.h **** 
 187:../CMSIS/Include/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/Include/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/Include/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/Include/core_cm4.h ****   #endif
 191:../CMSIS/Include/core_cm4.h **** 
 192:../CMSIS/Include/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/Include/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/Include/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/Include/core_cm4.h ****   #endif
 196:../CMSIS/Include/core_cm4.h **** 
 197:../CMSIS/Include/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/Include/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/Include/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/Include/core_cm4.h ****   #endif
 201:../CMSIS/Include/core_cm4.h **** 
 202:../CMSIS/Include/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/Include/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/Include/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/Include/core_cm4.h ****   #endif
 206:../CMSIS/Include/core_cm4.h **** #endif
 207:../CMSIS/Include/core_cm4.h **** 
 208:../CMSIS/Include/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/Include/core_cm4.h **** /**
 210:../CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/Include/core_cm4.h **** 
 212:../CMSIS/Include/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/Include/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/Include/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/Include/core_cm4.h **** */
 216:../CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/Include/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/Include/core_cm4.h **** #else
 219:../CMSIS/Include/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/Include/core_cm4.h **** #endif
 221:../CMSIS/Include/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/Include/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/Include/core_cm4.h **** 
 224:../CMSIS/Include/core_cm4.h **** /* following defines should be used for structure members */
ARM GAS  /tmp/ccWiGGaB.s 			page 49


 225:../CMSIS/Include/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/Include/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/Include/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 228:../CMSIS/Include/core_cm4.h **** 
 229:../CMSIS/Include/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/Include/core_cm4.h **** 
 231:../CMSIS/Include/core_cm4.h **** 
 232:../CMSIS/Include/core_cm4.h **** 
 233:../CMSIS/Include/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/Include/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/Include/core_cm4.h ****   Core Register contain:
 236:../CMSIS/Include/core_cm4.h ****   - Core Register
 237:../CMSIS/Include/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/Include/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/Include/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/Include/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/Include/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/Include/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/Include/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/Include/core_cm4.h **** /**
 245:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/Include/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/Include/core_cm4.h **** */
 248:../CMSIS/Include/core_cm4.h **** 
 249:../CMSIS/Include/core_cm4.h **** /**
 250:../CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/Include/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/Include/core_cm4.h ****   @{
 254:../CMSIS/Include/core_cm4.h ****  */
 255:../CMSIS/Include/core_cm4.h **** 
 256:../CMSIS/Include/core_cm4.h **** /**
 257:../CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/Include/core_cm4.h ****  */
 259:../CMSIS/Include/core_cm4.h **** typedef union
 260:../CMSIS/Include/core_cm4.h **** {
 261:../CMSIS/Include/core_cm4.h ****   struct
 262:../CMSIS/Include/core_cm4.h ****   {
 263:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/Include/core_cm4.h **** } APSR_Type;
 274:../CMSIS/Include/core_cm4.h **** 
 275:../CMSIS/Include/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/Include/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/Include/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/Include/core_cm4.h **** 
 279:../CMSIS/Include/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/Include/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 50


 282:../CMSIS/Include/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/Include/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/Include/core_cm4.h **** 
 285:../CMSIS/Include/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/Include/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/Include/core_cm4.h **** 
 288:../CMSIS/Include/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/Include/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/Include/core_cm4.h **** 
 291:../CMSIS/Include/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/Include/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/Include/core_cm4.h **** 
 294:../CMSIS/Include/core_cm4.h **** 
 295:../CMSIS/Include/core_cm4.h **** /**
 296:../CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/Include/core_cm4.h ****  */
 298:../CMSIS/Include/core_cm4.h **** typedef union
 299:../CMSIS/Include/core_cm4.h **** {
 300:../CMSIS/Include/core_cm4.h ****   struct
 301:../CMSIS/Include/core_cm4.h ****   {
 302:../CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/Include/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/Include/core_cm4.h **** 
 308:../CMSIS/Include/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/Include/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/Include/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/Include/core_cm4.h **** 
 312:../CMSIS/Include/core_cm4.h **** 
 313:../CMSIS/Include/core_cm4.h **** /**
 314:../CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/Include/core_cm4.h ****  */
 316:../CMSIS/Include/core_cm4.h **** typedef union
 317:../CMSIS/Include/core_cm4.h **** {
 318:../CMSIS/Include/core_cm4.h ****   struct
 319:../CMSIS/Include/core_cm4.h ****   {
 320:../CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/Include/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/Include/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/Include/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/Include/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/Include/core_cm4.h **** 
 336:../CMSIS/Include/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/Include/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/Include/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
ARM GAS  /tmp/ccWiGGaB.s 			page 51


 339:../CMSIS/Include/core_cm4.h **** 
 340:../CMSIS/Include/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/Include/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 342:../CMSIS/Include/core_cm4.h **** 
 343:../CMSIS/Include/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/Include/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/Include/core_cm4.h **** 
 346:../CMSIS/Include/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/Include/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/Include/core_cm4.h **** 
 349:../CMSIS/Include/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/Include/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/Include/core_cm4.h **** 
 352:../CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/Include/core_cm4.h **** 
 355:../CMSIS/Include/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/Include/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/Include/core_cm4.h **** 
 358:../CMSIS/Include/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/Include/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/Include/core_cm4.h **** 
 361:../CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/Include/core_cm4.h **** 
 364:../CMSIS/Include/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/Include/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/Include/core_cm4.h **** 
 367:../CMSIS/Include/core_cm4.h **** 
 368:../CMSIS/Include/core_cm4.h **** /**
 369:../CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/Include/core_cm4.h ****  */
 371:../CMSIS/Include/core_cm4.h **** typedef union
 372:../CMSIS/Include/core_cm4.h **** {
 373:../CMSIS/Include/core_cm4.h ****   struct
 374:../CMSIS/Include/core_cm4.h ****   {
 375:../CMSIS/Include/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/Include/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/Include/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/Include/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/Include/core_cm4.h **** 
 383:../CMSIS/Include/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/Include/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/Include/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/Include/core_cm4.h **** 
 387:../CMSIS/Include/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/Include/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/Include/core_cm4.h **** 
 390:../CMSIS/Include/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/Include/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/Include/core_cm4.h **** 
 393:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/Include/core_cm4.h **** 
 395:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 52


 396:../CMSIS/Include/core_cm4.h **** /**
 397:../CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 399:../CMSIS/Include/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/Include/core_cm4.h ****   @{
 401:../CMSIS/Include/core_cm4.h ****  */
 402:../CMSIS/Include/core_cm4.h **** 
 403:../CMSIS/Include/core_cm4.h **** /**
 404:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/Include/core_cm4.h ****  */
 406:../CMSIS/Include/core_cm4.h **** typedef struct
 407:../CMSIS/Include/core_cm4.h **** {
 408:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/Include/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/Include/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/Include/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/Include/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/Include/core_cm4.h **** 
 423:../CMSIS/Include/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/Include/core_cm4.h **** 
 427:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/Include/core_cm4.h **** 
 429:../CMSIS/Include/core_cm4.h **** 
 430:../CMSIS/Include/core_cm4.h **** /**
 431:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/Include/core_cm4.h ****   @{
 435:../CMSIS/Include/core_cm4.h ****  */
 436:../CMSIS/Include/core_cm4.h **** 
 437:../CMSIS/Include/core_cm4.h **** /**
 438:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/Include/core_cm4.h ****  */
 440:../CMSIS/Include/core_cm4.h **** typedef struct
 441:../CMSIS/Include/core_cm4.h **** {
 442:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/Include/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
ARM GAS  /tmp/ccWiGGaB.s 			page 53


 453:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 456:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/Include/core_cm4.h **** } SCB_Type;
 464:../CMSIS/Include/core_cm4.h **** 
 465:../CMSIS/Include/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/Include/core_cm4.h **** 
 469:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/Include/core_cm4.h **** 
 472:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/Include/core_cm4.h **** 
 475:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/Include/core_cm4.h **** 
 478:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/Include/core_cm4.h **** 
 481:../CMSIS/Include/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/Include/core_cm4.h **** 
 485:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/Include/core_cm4.h **** 
 488:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/Include/core_cm4.h **** 
 491:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/Include/core_cm4.h **** 
 494:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/Include/core_cm4.h **** 
 497:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/Include/core_cm4.h **** 
 500:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/Include/core_cm4.h **** 
 503:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/Include/core_cm4.h **** 
 506:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/Include/core_cm4.h **** 
 509:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
ARM GAS  /tmp/ccWiGGaB.s 			page 54


 510:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/Include/core_cm4.h **** 
 512:../CMSIS/Include/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 513:../CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/Include/core_cm4.h **** 
 516:../CMSIS/Include/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/Include/core_cm4.h **** 
 520:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/Include/core_cm4.h **** 
 523:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/Include/core_cm4.h **** 
 526:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/Include/core_cm4.h **** 
 529:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/Include/core_cm4.h **** 
 532:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/Include/core_cm4.h **** 
 535:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/Include/core_cm4.h **** 
 538:../CMSIS/Include/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/Include/core_cm4.h **** 
 542:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/Include/core_cm4.h **** 
 545:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/Include/core_cm4.h **** 
 548:../CMSIS/Include/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/Include/core_cm4.h **** 
 552:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/Include/core_cm4.h **** 
 555:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/Include/core_cm4.h **** 
 558:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/Include/core_cm4.h **** 
 561:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/Include/core_cm4.h **** 
 564:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 55


 567:../CMSIS/Include/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 570:../CMSIS/Include/core_cm4.h **** 
 571:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/Include/core_cm4.h **** 
 574:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/Include/core_cm4.h **** 
 577:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/Include/core_cm4.h **** 
 580:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/Include/core_cm4.h **** 
 583:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/Include/core_cm4.h **** 
 586:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/Include/core_cm4.h **** 
 589:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/Include/core_cm4.h **** 
 592:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/Include/core_cm4.h **** 
 595:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/Include/core_cm4.h **** 
 598:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/Include/core_cm4.h **** 
 601:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/Include/core_cm4.h **** 
 604:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/Include/core_cm4.h **** 
 607:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/Include/core_cm4.h **** 
 610:../CMSIS/Include/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/Include/core_cm4.h **** 
 614:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/Include/core_cm4.h **** 
 617:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/Include/core_cm4.h **** 
 620:../CMSIS/Include/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 56


 624:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/Include/core_cm4.h **** 
 627:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/Include/core_cm4.h **** 
 630:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/Include/core_cm4.h **** 
 633:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/Include/core_cm4.h **** 
 636:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/Include/core_cm4.h **** 
 639:../CMSIS/Include/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/Include/core_cm4.h **** 
 643:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/Include/core_cm4.h **** 
 646:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/Include/core_cm4.h **** 
 649:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/Include/core_cm4.h **** 
 652:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/Include/core_cm4.h **** 
 655:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/Include/core_cm4.h **** 
 658:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/Include/core_cm4.h **** 
 661:../CMSIS/Include/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/Include/core_cm4.h **** 
 665:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/Include/core_cm4.h **** 
 668:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/Include/core_cm4.h **** 
 671:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/Include/core_cm4.h **** 
 674:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/Include/core_cm4.h **** 
 677:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/Include/core_cm4.h **** 
 680:../CMSIS/Include/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
ARM GAS  /tmp/ccWiGGaB.s 			page 57


 681:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/Include/core_cm4.h **** 
 684:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/Include/core_cm4.h **** 
 687:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/Include/core_cm4.h **** 
 690:../CMSIS/Include/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/Include/core_cm4.h **** 
 694:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/Include/core_cm4.h **** 
 697:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/Include/core_cm4.h **** 
 700:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/Include/core_cm4.h **** 
 703:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/Include/core_cm4.h **** 
 706:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/Include/core_cm4.h **** 
 708:../CMSIS/Include/core_cm4.h **** 
 709:../CMSIS/Include/core_cm4.h **** /**
 710:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/Include/core_cm4.h ****   @{
 714:../CMSIS/Include/core_cm4.h ****  */
 715:../CMSIS/Include/core_cm4.h **** 
 716:../CMSIS/Include/core_cm4.h **** /**
 717:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/Include/core_cm4.h ****  */
 719:../CMSIS/Include/core_cm4.h **** typedef struct
 720:../CMSIS/Include/core_cm4.h **** {
 721:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/Include/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/Include/core_cm4.h **** 
 726:../CMSIS/Include/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/Include/core_cm4.h **** 
 730:../CMSIS/Include/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/Include/core_cm4.h **** 
 734:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/Include/core_cm4.h **** 
 737:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
ARM GAS  /tmp/ccWiGGaB.s 			page 58


 738:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/Include/core_cm4.h **** 
 740:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 741:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/Include/core_cm4.h **** 
 743:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/Include/core_cm4.h **** 
 746:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/Include/core_cm4.h **** 
 748:../CMSIS/Include/core_cm4.h **** 
 749:../CMSIS/Include/core_cm4.h **** /**
 750:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/Include/core_cm4.h ****   @{
 754:../CMSIS/Include/core_cm4.h ****  */
 755:../CMSIS/Include/core_cm4.h **** 
 756:../CMSIS/Include/core_cm4.h **** /**
 757:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/Include/core_cm4.h ****  */
 759:../CMSIS/Include/core_cm4.h **** typedef struct
 760:../CMSIS/Include/core_cm4.h **** {
 761:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/Include/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/Include/core_cm4.h **** 
 767:../CMSIS/Include/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/Include/core_cm4.h **** 
 771:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/Include/core_cm4.h **** 
 774:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/Include/core_cm4.h **** 
 777:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/Include/core_cm4.h **** 
 780:../CMSIS/Include/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/Include/core_cm4.h **** 
 784:../CMSIS/Include/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/Include/core_cm4.h **** 
 788:../CMSIS/Include/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/Include/core_cm4.h **** 
 792:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 59


 795:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/Include/core_cm4.h **** 
 798:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/Include/core_cm4.h **** 
 800:../CMSIS/Include/core_cm4.h **** 
 801:../CMSIS/Include/core_cm4.h **** /**
 802:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/Include/core_cm4.h ****   @{
 806:../CMSIS/Include/core_cm4.h ****  */
 807:../CMSIS/Include/core_cm4.h **** 
 808:../CMSIS/Include/core_cm4.h **** /**
 809:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/Include/core_cm4.h ****  */
 811:../CMSIS/Include/core_cm4.h **** typedef struct
 812:../CMSIS/Include/core_cm4.h **** {
 813:../CMSIS/Include/core_cm4.h ****   __OM  union
 814:../CMSIS/Include/core_cm4.h ****   {
 815:../CMSIS/Include/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/Include/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/Include/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/Include/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/Include/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/Include/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/Include/core_cm4.h **** } ITM_Type;
 846:../CMSIS/Include/core_cm4.h **** 
 847:../CMSIS/Include/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 850:../CMSIS/Include/core_cm4.h **** 
 851:../CMSIS/Include/core_cm4.h **** /* ITM Trace Control Register Definitions */
ARM GAS  /tmp/ccWiGGaB.s 			page 60


 852:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/Include/core_cm4.h **** 
 855:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/Include/core_cm4.h **** 
 858:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/Include/core_cm4.h **** 
 861:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/Include/core_cm4.h **** 
 864:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/Include/core_cm4.h **** 
 867:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/Include/core_cm4.h **** 
 870:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/Include/core_cm4.h **** 
 873:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/Include/core_cm4.h **** 
 876:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/Include/core_cm4.h **** 
 879:../CMSIS/Include/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/Include/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/Include/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/Include/core_cm4.h **** 
 883:../CMSIS/Include/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/Include/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/Include/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/Include/core_cm4.h **** 
 887:../CMSIS/Include/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/Include/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/Include/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/Include/core_cm4.h **** 
 891:../CMSIS/Include/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/Include/core_cm4.h **** 
 895:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/Include/core_cm4.h **** 
 898:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/Include/core_cm4.h **** 
 901:../CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/Include/core_cm4.h **** 
 903:../CMSIS/Include/core_cm4.h **** 
 904:../CMSIS/Include/core_cm4.h **** /**
 905:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/Include/core_cm4.h ****   @{
ARM GAS  /tmp/ccWiGGaB.s 			page 61


 909:../CMSIS/Include/core_cm4.h ****  */
 910:../CMSIS/Include/core_cm4.h **** 
 911:../CMSIS/Include/core_cm4.h **** /**
 912:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/Include/core_cm4.h ****  */
 914:../CMSIS/Include/core_cm4.h **** typedef struct
 915:../CMSIS/Include/core_cm4.h **** {
 916:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/Include/core_cm4.h **** } DWT_Type;
 940:../CMSIS/Include/core_cm4.h **** 
 941:../CMSIS/Include/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/Include/core_cm4.h **** 
 945:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/Include/core_cm4.h **** 
 948:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/Include/core_cm4.h **** 
 951:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/Include/core_cm4.h **** 
 954:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/Include/core_cm4.h **** 
 957:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/Include/core_cm4.h **** 
 960:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/Include/core_cm4.h **** 
 963:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 62


 966:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/Include/core_cm4.h **** 
 969:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/Include/core_cm4.h **** 
 972:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/Include/core_cm4.h **** 
 975:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/Include/core_cm4.h **** 
 978:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/Include/core_cm4.h **** 
 981:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/Include/core_cm4.h **** 
 984:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/Include/core_cm4.h **** 
 987:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/Include/core_cm4.h **** 
 990:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/Include/core_cm4.h **** 
 993:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/Include/core_cm4.h **** 
 996:../CMSIS/Include/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/Include/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/Include/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/Include/core_cm4.h **** 
1000:../CMSIS/Include/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/Include/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/Include/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/Include/core_cm4.h **** 
1004:../CMSIS/Include/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/Include/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/Include/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/Include/core_cm4.h **** 
1008:../CMSIS/Include/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/Include/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/Include/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/Include/core_cm4.h **** 
1012:../CMSIS/Include/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/Include/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/Include/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/Include/core_cm4.h **** 
1016:../CMSIS/Include/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/Include/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/Include/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/Include/core_cm4.h **** 
1020:../CMSIS/Include/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
ARM GAS  /tmp/ccWiGGaB.s 			page 63


1023:../CMSIS/Include/core_cm4.h **** 
1024:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1026:../CMSIS/Include/core_cm4.h **** 
1027:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/Include/core_cm4.h **** 
1030:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/Include/core_cm4.h **** 
1033:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/Include/core_cm4.h **** 
1036:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/Include/core_cm4.h **** 
1039:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/Include/core_cm4.h **** 
1042:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/Include/core_cm4.h **** 
1045:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/Include/core_cm4.h **** 
1048:../CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/Include/core_cm4.h **** 
1050:../CMSIS/Include/core_cm4.h **** 
1051:../CMSIS/Include/core_cm4.h **** /**
1052:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/Include/core_cm4.h ****   @{
1056:../CMSIS/Include/core_cm4.h ****  */
1057:../CMSIS/Include/core_cm4.h **** 
1058:../CMSIS/Include/core_cm4.h **** /**
1059:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/Include/core_cm4.h ****  */
1061:../CMSIS/Include/core_cm4.h **** typedef struct
1062:../CMSIS/Include/core_cm4.h **** {
1063:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1075:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
ARM GAS  /tmp/ccWiGGaB.s 			page 64


1080:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1083:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/Include/core_cm4.h **** } TPI_Type;
1088:../CMSIS/Include/core_cm4.h **** 
1089:../CMSIS/Include/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/Include/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/Include/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/Include/core_cm4.h **** 
1093:../CMSIS/Include/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/Include/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/Include/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/Include/core_cm4.h **** 
1097:../CMSIS/Include/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/Include/core_cm4.h **** 
1101:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/Include/core_cm4.h **** 
1104:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/Include/core_cm4.h **** 
1107:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/Include/core_cm4.h **** 
1110:../CMSIS/Include/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/Include/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/Include/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/Include/core_cm4.h **** 
1114:../CMSIS/Include/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/Include/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/Include/core_cm4.h **** 
1117:../CMSIS/Include/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/Include/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/Include/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/Include/core_cm4.h **** 
1121:../CMSIS/Include/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/Include/core_cm4.h **** 
1125:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/Include/core_cm4.h **** 
1128:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/Include/core_cm4.h **** 
1131:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/Include/core_cm4.h **** 
1134:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 65


1137:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/Include/core_cm4.h **** 
1140:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/Include/core_cm4.h **** 
1143:../CMSIS/Include/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1145:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1146:../CMSIS/Include/core_cm4.h **** 
1147:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1148:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1149:../CMSIS/Include/core_cm4.h **** 
1150:../CMSIS/Include/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1151:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1152:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1153:../CMSIS/Include/core_cm4.h **** 
1154:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1155:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1156:../CMSIS/Include/core_cm4.h **** 
1157:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1158:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1159:../CMSIS/Include/core_cm4.h **** 
1160:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1161:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1162:../CMSIS/Include/core_cm4.h **** 
1163:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1164:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1165:../CMSIS/Include/core_cm4.h **** 
1166:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1167:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1168:../CMSIS/Include/core_cm4.h **** 
1169:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1170:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1171:../CMSIS/Include/core_cm4.h **** 
1172:../CMSIS/Include/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1173:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1174:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1175:../CMSIS/Include/core_cm4.h **** 
1176:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1177:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1178:../CMSIS/Include/core_cm4.h **** 
1179:../CMSIS/Include/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1180:../CMSIS/Include/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1181:../CMSIS/Include/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1182:../CMSIS/Include/core_cm4.h **** 
1183:../CMSIS/Include/core_cm4.h **** /* TPI DEVID Register Definitions */
1184:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1185:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1186:../CMSIS/Include/core_cm4.h **** 
1187:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1188:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1189:../CMSIS/Include/core_cm4.h **** 
1190:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1191:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1192:../CMSIS/Include/core_cm4.h **** 
1193:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
ARM GAS  /tmp/ccWiGGaB.s 			page 66


1194:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1195:../CMSIS/Include/core_cm4.h **** 
1196:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1197:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1198:../CMSIS/Include/core_cm4.h **** 
1199:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1200:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1201:../CMSIS/Include/core_cm4.h **** 
1202:../CMSIS/Include/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1203:../CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1204:../CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1205:../CMSIS/Include/core_cm4.h **** 
1206:../CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1207:../CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1208:../CMSIS/Include/core_cm4.h **** 
1209:../CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1210:../CMSIS/Include/core_cm4.h **** 
1211:../CMSIS/Include/core_cm4.h **** 
1212:../CMSIS/Include/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1213:../CMSIS/Include/core_cm4.h **** /**
1214:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1215:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1216:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1217:../CMSIS/Include/core_cm4.h ****   @{
1218:../CMSIS/Include/core_cm4.h ****  */
1219:../CMSIS/Include/core_cm4.h **** 
1220:../CMSIS/Include/core_cm4.h **** /**
1221:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1222:../CMSIS/Include/core_cm4.h ****  */
1223:../CMSIS/Include/core_cm4.h **** typedef struct
1224:../CMSIS/Include/core_cm4.h **** {
1225:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1226:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1227:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1228:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1229:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1230:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1231:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1232:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1233:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1234:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1235:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1236:../CMSIS/Include/core_cm4.h **** } MPU_Type;
1237:../CMSIS/Include/core_cm4.h **** 
1238:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_RALIASES                  4U
1239:../CMSIS/Include/core_cm4.h **** 
1240:../CMSIS/Include/core_cm4.h **** /* MPU Type Register Definitions */
1241:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1242:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1243:../CMSIS/Include/core_cm4.h **** 
1244:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1245:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1246:../CMSIS/Include/core_cm4.h **** 
1247:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1248:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1249:../CMSIS/Include/core_cm4.h **** 
1250:../CMSIS/Include/core_cm4.h **** /* MPU Control Register Definitions */
ARM GAS  /tmp/ccWiGGaB.s 			page 67


1251:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1252:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1253:../CMSIS/Include/core_cm4.h **** 
1254:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1255:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1256:../CMSIS/Include/core_cm4.h **** 
1257:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1258:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1259:../CMSIS/Include/core_cm4.h **** 
1260:../CMSIS/Include/core_cm4.h **** /* MPU Region Number Register Definitions */
1261:../CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1262:../CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1263:../CMSIS/Include/core_cm4.h **** 
1264:../CMSIS/Include/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1265:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1266:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1267:../CMSIS/Include/core_cm4.h **** 
1268:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1269:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1270:../CMSIS/Include/core_cm4.h **** 
1271:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1272:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1273:../CMSIS/Include/core_cm4.h **** 
1274:../CMSIS/Include/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1275:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1276:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1277:../CMSIS/Include/core_cm4.h **** 
1278:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1279:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1280:../CMSIS/Include/core_cm4.h **** 
1281:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1282:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1283:../CMSIS/Include/core_cm4.h **** 
1284:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1285:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1286:../CMSIS/Include/core_cm4.h **** 
1287:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1288:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1289:../CMSIS/Include/core_cm4.h **** 
1290:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1291:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1292:../CMSIS/Include/core_cm4.h **** 
1293:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1294:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1295:../CMSIS/Include/core_cm4.h **** 
1296:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1297:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1298:../CMSIS/Include/core_cm4.h **** 
1299:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1300:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1301:../CMSIS/Include/core_cm4.h **** 
1302:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1303:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1304:../CMSIS/Include/core_cm4.h **** 
1305:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_MPU */
1306:../CMSIS/Include/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1307:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 68


1308:../CMSIS/Include/core_cm4.h **** 
1309:../CMSIS/Include/core_cm4.h **** /**
1310:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1311:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1312:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1313:../CMSIS/Include/core_cm4.h ****   @{
1314:../CMSIS/Include/core_cm4.h ****  */
1315:../CMSIS/Include/core_cm4.h **** 
1316:../CMSIS/Include/core_cm4.h **** /**
1317:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1318:../CMSIS/Include/core_cm4.h ****  */
1319:../CMSIS/Include/core_cm4.h **** typedef struct
1320:../CMSIS/Include/core_cm4.h **** {
1321:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
1322:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1323:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1324:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1325:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1326:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1327:../CMSIS/Include/core_cm4.h **** } FPU_Type;
1328:../CMSIS/Include/core_cm4.h **** 
1329:../CMSIS/Include/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1330:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1331:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1332:../CMSIS/Include/core_cm4.h **** 
1333:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1334:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1335:../CMSIS/Include/core_cm4.h **** 
1336:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1337:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1338:../CMSIS/Include/core_cm4.h **** 
1339:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1340:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1341:../CMSIS/Include/core_cm4.h **** 
1342:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1343:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1344:../CMSIS/Include/core_cm4.h **** 
1345:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1346:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1347:../CMSIS/Include/core_cm4.h **** 
1348:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1349:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1350:../CMSIS/Include/core_cm4.h **** 
1351:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1352:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1353:../CMSIS/Include/core_cm4.h **** 
1354:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1355:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1356:../CMSIS/Include/core_cm4.h **** 
1357:../CMSIS/Include/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1358:../CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1359:../CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1360:../CMSIS/Include/core_cm4.h **** 
1361:../CMSIS/Include/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1362:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1363:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1364:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 69


1365:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1366:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1367:../CMSIS/Include/core_cm4.h **** 
1368:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1369:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1370:../CMSIS/Include/core_cm4.h **** 
1371:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1372:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1373:../CMSIS/Include/core_cm4.h **** 
1374:../CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1375:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1376:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1377:../CMSIS/Include/core_cm4.h **** 
1378:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1379:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1380:../CMSIS/Include/core_cm4.h **** 
1381:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1382:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1383:../CMSIS/Include/core_cm4.h **** 
1384:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1385:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1386:../CMSIS/Include/core_cm4.h **** 
1387:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1388:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1389:../CMSIS/Include/core_cm4.h **** 
1390:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1391:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1392:../CMSIS/Include/core_cm4.h **** 
1393:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1394:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1395:../CMSIS/Include/core_cm4.h **** 
1396:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1397:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1398:../CMSIS/Include/core_cm4.h **** 
1399:../CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1400:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1401:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1402:../CMSIS/Include/core_cm4.h **** 
1403:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1404:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1405:../CMSIS/Include/core_cm4.h **** 
1406:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1407:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1408:../CMSIS/Include/core_cm4.h **** 
1409:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1410:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1411:../CMSIS/Include/core_cm4.h **** 
1412:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_FPU */
1413:../CMSIS/Include/core_cm4.h **** 
1414:../CMSIS/Include/core_cm4.h **** 
1415:../CMSIS/Include/core_cm4.h **** /**
1416:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1417:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1418:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1419:../CMSIS/Include/core_cm4.h ****   @{
1420:../CMSIS/Include/core_cm4.h ****  */
1421:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 70


1422:../CMSIS/Include/core_cm4.h **** /**
1423:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1424:../CMSIS/Include/core_cm4.h ****  */
1425:../CMSIS/Include/core_cm4.h **** typedef struct
1426:../CMSIS/Include/core_cm4.h **** {
1427:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1428:../CMSIS/Include/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1429:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1430:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1431:../CMSIS/Include/core_cm4.h **** } CoreDebug_Type;
1432:../CMSIS/Include/core_cm4.h **** 
1433:../CMSIS/Include/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1434:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1435:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1436:../CMSIS/Include/core_cm4.h **** 
1437:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1438:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1439:../CMSIS/Include/core_cm4.h **** 
1440:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1441:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1442:../CMSIS/Include/core_cm4.h **** 
1443:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1444:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1445:../CMSIS/Include/core_cm4.h **** 
1446:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1447:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1448:../CMSIS/Include/core_cm4.h **** 
1449:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1450:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1451:../CMSIS/Include/core_cm4.h **** 
1452:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1453:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1454:../CMSIS/Include/core_cm4.h **** 
1455:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1456:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1457:../CMSIS/Include/core_cm4.h **** 
1458:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1459:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1460:../CMSIS/Include/core_cm4.h **** 
1461:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1462:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1463:../CMSIS/Include/core_cm4.h **** 
1464:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1465:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1466:../CMSIS/Include/core_cm4.h **** 
1467:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1468:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1469:../CMSIS/Include/core_cm4.h **** 
1470:../CMSIS/Include/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1471:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1472:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1473:../CMSIS/Include/core_cm4.h **** 
1474:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1475:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1476:../CMSIS/Include/core_cm4.h **** 
1477:../CMSIS/Include/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1478:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
ARM GAS  /tmp/ccWiGGaB.s 			page 71


1479:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1480:../CMSIS/Include/core_cm4.h **** 
1481:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1482:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1483:../CMSIS/Include/core_cm4.h **** 
1484:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1485:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1486:../CMSIS/Include/core_cm4.h **** 
1487:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1488:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1489:../CMSIS/Include/core_cm4.h **** 
1490:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1491:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1492:../CMSIS/Include/core_cm4.h **** 
1493:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1494:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1495:../CMSIS/Include/core_cm4.h **** 
1496:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1497:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1498:../CMSIS/Include/core_cm4.h **** 
1499:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1500:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1501:../CMSIS/Include/core_cm4.h **** 
1502:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1503:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1504:../CMSIS/Include/core_cm4.h **** 
1505:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1506:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1507:../CMSIS/Include/core_cm4.h **** 
1508:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1509:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1510:../CMSIS/Include/core_cm4.h **** 
1511:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1512:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1513:../CMSIS/Include/core_cm4.h **** 
1514:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1515:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1516:../CMSIS/Include/core_cm4.h **** 
1517:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1518:../CMSIS/Include/core_cm4.h **** 
1519:../CMSIS/Include/core_cm4.h **** 
1520:../CMSIS/Include/core_cm4.h **** /**
1521:../CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
1522:../CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1523:../CMSIS/Include/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1524:../CMSIS/Include/core_cm4.h ****   @{
1525:../CMSIS/Include/core_cm4.h ****  */
1526:../CMSIS/Include/core_cm4.h **** 
1527:../CMSIS/Include/core_cm4.h **** /**
1528:../CMSIS/Include/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1529:../CMSIS/Include/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/Include/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/Include/core_cm4.h ****   \return           Masked and shifted value.
1532:../CMSIS/Include/core_cm4.h **** */
1533:../CMSIS/Include/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1534:../CMSIS/Include/core_cm4.h **** 
1535:../CMSIS/Include/core_cm4.h **** /**
ARM GAS  /tmp/ccWiGGaB.s 			page 72


1536:../CMSIS/Include/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1537:../CMSIS/Include/core_cm4.h ****   \param[in] field  Name of the register bit field.
1538:../CMSIS/Include/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1539:../CMSIS/Include/core_cm4.h ****   \return           Masked and shifted bit field value.
1540:../CMSIS/Include/core_cm4.h **** */
1541:../CMSIS/Include/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1542:../CMSIS/Include/core_cm4.h **** 
1543:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1544:../CMSIS/Include/core_cm4.h **** 
1545:../CMSIS/Include/core_cm4.h **** 
1546:../CMSIS/Include/core_cm4.h **** /**
1547:../CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
1548:../CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1549:../CMSIS/Include/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1550:../CMSIS/Include/core_cm4.h ****   @{
1551:../CMSIS/Include/core_cm4.h ****  */
1552:../CMSIS/Include/core_cm4.h **** 
1553:../CMSIS/Include/core_cm4.h **** /* Memory mapping of Core Hardware */
1554:../CMSIS/Include/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1555:../CMSIS/Include/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1556:../CMSIS/Include/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1557:../CMSIS/Include/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1558:../CMSIS/Include/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1559:../CMSIS/Include/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1560:../CMSIS/Include/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1561:../CMSIS/Include/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1562:../CMSIS/Include/core_cm4.h **** 
1563:../CMSIS/Include/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1564:../CMSIS/Include/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1565:../CMSIS/Include/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1566:../CMSIS/Include/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1567:../CMSIS/Include/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1568:../CMSIS/Include/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1569:../CMSIS/Include/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1570:../CMSIS/Include/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1571:../CMSIS/Include/core_cm4.h **** 
1572:../CMSIS/Include/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1573:../CMSIS/Include/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1574:../CMSIS/Include/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1575:../CMSIS/Include/core_cm4.h **** #endif
1576:../CMSIS/Include/core_cm4.h **** 
1577:../CMSIS/Include/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1578:../CMSIS/Include/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1579:../CMSIS/Include/core_cm4.h **** 
1580:../CMSIS/Include/core_cm4.h **** /*@} */
1581:../CMSIS/Include/core_cm4.h **** 
1582:../CMSIS/Include/core_cm4.h **** 
1583:../CMSIS/Include/core_cm4.h **** 
1584:../CMSIS/Include/core_cm4.h **** /*******************************************************************************
1585:../CMSIS/Include/core_cm4.h ****  *                Hardware Abstraction Layer
1586:../CMSIS/Include/core_cm4.h ****   Core Function Interface contains:
1587:../CMSIS/Include/core_cm4.h ****   - Core NVIC Functions
1588:../CMSIS/Include/core_cm4.h ****   - Core SysTick Functions
1589:../CMSIS/Include/core_cm4.h ****   - Core Debug Functions
1590:../CMSIS/Include/core_cm4.h ****   - Core Register Access Functions
1591:../CMSIS/Include/core_cm4.h ****  ******************************************************************************/
1592:../CMSIS/Include/core_cm4.h **** /**
ARM GAS  /tmp/ccWiGGaB.s 			page 73


1593:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1594:../CMSIS/Include/core_cm4.h **** */
1595:../CMSIS/Include/core_cm4.h **** 
1596:../CMSIS/Include/core_cm4.h **** 
1597:../CMSIS/Include/core_cm4.h **** 
1598:../CMSIS/Include/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1599:../CMSIS/Include/core_cm4.h **** /**
1600:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1601:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1602:../CMSIS/Include/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1603:../CMSIS/Include/core_cm4.h ****   @{
1604:../CMSIS/Include/core_cm4.h ****  */
1605:../CMSIS/Include/core_cm4.h **** 
1606:../CMSIS/Include/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1607:../CMSIS/Include/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1608:../CMSIS/Include/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1609:../CMSIS/Include/core_cm4.h ****   #endif
1610:../CMSIS/Include/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1611:../CMSIS/Include/core_cm4.h **** #else
1612:../CMSIS/Include/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1613:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1614:../CMSIS/Include/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1615:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1616:../CMSIS/Include/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1617:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1618:../CMSIS/Include/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1619:../CMSIS/Include/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1620:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1621:../CMSIS/Include/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1622:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1623:../CMSIS/Include/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1624:../CMSIS/Include/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1625:../CMSIS/Include/core_cm4.h **** 
1626:../CMSIS/Include/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1627:../CMSIS/Include/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1628:../CMSIS/Include/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1629:../CMSIS/Include/core_cm4.h ****   #endif
1630:../CMSIS/Include/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1631:../CMSIS/Include/core_cm4.h **** #else
1632:../CMSIS/Include/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1633:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1634:../CMSIS/Include/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1635:../CMSIS/Include/core_cm4.h **** 
1636:../CMSIS/Include/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1637:../CMSIS/Include/core_cm4.h **** 
1638:../CMSIS/Include/core_cm4.h **** 
1639:../CMSIS/Include/core_cm4.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1640:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1641:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1642:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1643:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_HANDLER_FPU     (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after ret
1644:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_MSP_FPU  (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after retu
1645:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_PSP_FPU  (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after retu
1646:../CMSIS/Include/core_cm4.h **** 
1647:../CMSIS/Include/core_cm4.h **** 
1648:../CMSIS/Include/core_cm4.h **** /**
1649:../CMSIS/Include/core_cm4.h ****   \brief   Set Priority Grouping
ARM GAS  /tmp/ccWiGGaB.s 			page 74


1650:../CMSIS/Include/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1651:../CMSIS/Include/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1652:../CMSIS/Include/core_cm4.h ****            Only values from 0..7 are used.
1653:../CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1654:../CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1655:../CMSIS/Include/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1656:../CMSIS/Include/core_cm4.h ****  */
1657:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1658:../CMSIS/Include/core_cm4.h **** {
1659:../CMSIS/Include/core_cm4.h ****   uint32_t reg_value;
1660:../CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1661:../CMSIS/Include/core_cm4.h **** 
1662:../CMSIS/Include/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1663:../CMSIS/Include/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1664:../CMSIS/Include/core_cm4.h ****   reg_value  =  (reg_value                                   |
1665:../CMSIS/Include/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1666:../CMSIS/Include/core_cm4.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key a
1667:../CMSIS/Include/core_cm4.h ****   SCB->AIRCR =  reg_value;
1668:../CMSIS/Include/core_cm4.h **** }
1669:../CMSIS/Include/core_cm4.h **** 
1670:../CMSIS/Include/core_cm4.h **** 
1671:../CMSIS/Include/core_cm4.h **** /**
1672:../CMSIS/Include/core_cm4.h ****   \brief   Get Priority Grouping
1673:../CMSIS/Include/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1674:../CMSIS/Include/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1675:../CMSIS/Include/core_cm4.h ****  */
1676:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1677:../CMSIS/Include/core_cm4.h **** {
1678:../CMSIS/Include/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1679:../CMSIS/Include/core_cm4.h **** }
1680:../CMSIS/Include/core_cm4.h **** 
1681:../CMSIS/Include/core_cm4.h **** 
1682:../CMSIS/Include/core_cm4.h **** /**
1683:../CMSIS/Include/core_cm4.h ****   \brief   Enable Interrupt
1684:../CMSIS/Include/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1685:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1686:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1687:../CMSIS/Include/core_cm4.h ****  */
1688:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1689:../CMSIS/Include/core_cm4.h **** {
1690:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1691:../CMSIS/Include/core_cm4.h ****   {
1692:../CMSIS/Include/core_cm4.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1693:../CMSIS/Include/core_cm4.h ****   }
1694:../CMSIS/Include/core_cm4.h **** }
1695:../CMSIS/Include/core_cm4.h **** 
1696:../CMSIS/Include/core_cm4.h **** 
1697:../CMSIS/Include/core_cm4.h **** /**
1698:../CMSIS/Include/core_cm4.h ****   \brief   Get Interrupt Enable status
1699:../CMSIS/Include/core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1700:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1701:../CMSIS/Include/core_cm4.h ****   \return             0  Interrupt is not enabled.
1702:../CMSIS/Include/core_cm4.h ****   \return             1  Interrupt is enabled.
1703:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1704:../CMSIS/Include/core_cm4.h ****  */
1705:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1706:../CMSIS/Include/core_cm4.h **** {
ARM GAS  /tmp/ccWiGGaB.s 			page 75


1707:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1708:../CMSIS/Include/core_cm4.h ****   {
1709:../CMSIS/Include/core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1710:../CMSIS/Include/core_cm4.h ****   }
1711:../CMSIS/Include/core_cm4.h ****   else
1712:../CMSIS/Include/core_cm4.h ****   {
1713:../CMSIS/Include/core_cm4.h ****     return(0U);
1714:../CMSIS/Include/core_cm4.h ****   }
1715:../CMSIS/Include/core_cm4.h **** }
1716:../CMSIS/Include/core_cm4.h **** 
1717:../CMSIS/Include/core_cm4.h **** 
1718:../CMSIS/Include/core_cm4.h **** /**
1719:../CMSIS/Include/core_cm4.h ****   \brief   Disable Interrupt
1720:../CMSIS/Include/core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1721:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1722:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1723:../CMSIS/Include/core_cm4.h ****  */
1724:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1725:../CMSIS/Include/core_cm4.h **** {
1726:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1727:../CMSIS/Include/core_cm4.h ****   {
1728:../CMSIS/Include/core_cm4.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1729:../CMSIS/Include/core_cm4.h ****     __DSB();
1730:../CMSIS/Include/core_cm4.h ****     __ISB();
1731:../CMSIS/Include/core_cm4.h ****   }
1732:../CMSIS/Include/core_cm4.h **** }
1733:../CMSIS/Include/core_cm4.h **** 
1734:../CMSIS/Include/core_cm4.h **** 
1735:../CMSIS/Include/core_cm4.h **** /**
1736:../CMSIS/Include/core_cm4.h ****   \brief   Get Pending Interrupt
1737:../CMSIS/Include/core_cm4.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1738:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1739:../CMSIS/Include/core_cm4.h ****   \return             0  Interrupt status is not pending.
1740:../CMSIS/Include/core_cm4.h ****   \return             1  Interrupt status is pending.
1741:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1742:../CMSIS/Include/core_cm4.h ****  */
1743:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1744:../CMSIS/Include/core_cm4.h **** {
1745:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1746:../CMSIS/Include/core_cm4.h ****   {
1747:../CMSIS/Include/core_cm4.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1748:../CMSIS/Include/core_cm4.h ****   }
1749:../CMSIS/Include/core_cm4.h ****   else
1750:../CMSIS/Include/core_cm4.h ****   {
1751:../CMSIS/Include/core_cm4.h ****     return(0U);
1752:../CMSIS/Include/core_cm4.h ****   }
1753:../CMSIS/Include/core_cm4.h **** }
1754:../CMSIS/Include/core_cm4.h **** 
1755:../CMSIS/Include/core_cm4.h **** 
1756:../CMSIS/Include/core_cm4.h **** /**
1757:../CMSIS/Include/core_cm4.h ****   \brief   Set Pending Interrupt
1758:../CMSIS/Include/core_cm4.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1759:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1760:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1761:../CMSIS/Include/core_cm4.h ****  */
1762:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1763:../CMSIS/Include/core_cm4.h **** {
ARM GAS  /tmp/ccWiGGaB.s 			page 76


1764:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1765:../CMSIS/Include/core_cm4.h ****   {
1766:../CMSIS/Include/core_cm4.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1767:../CMSIS/Include/core_cm4.h ****   }
1768:../CMSIS/Include/core_cm4.h **** }
1769:../CMSIS/Include/core_cm4.h **** 
1770:../CMSIS/Include/core_cm4.h **** 
1771:../CMSIS/Include/core_cm4.h **** /**
1772:../CMSIS/Include/core_cm4.h ****   \brief   Clear Pending Interrupt
1773:../CMSIS/Include/core_cm4.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1774:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1775:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1776:../CMSIS/Include/core_cm4.h ****  */
1777:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1778:../CMSIS/Include/core_cm4.h **** {
1779:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1780:../CMSIS/Include/core_cm4.h ****   {
1781:../CMSIS/Include/core_cm4.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1782:../CMSIS/Include/core_cm4.h ****   }
1783:../CMSIS/Include/core_cm4.h **** }
1784:../CMSIS/Include/core_cm4.h **** 
1785:../CMSIS/Include/core_cm4.h **** 
1786:../CMSIS/Include/core_cm4.h **** /**
1787:../CMSIS/Include/core_cm4.h ****   \brief   Get Active Interrupt
1788:../CMSIS/Include/core_cm4.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1789:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1790:../CMSIS/Include/core_cm4.h ****   \return             0  Interrupt status is not active.
1791:../CMSIS/Include/core_cm4.h ****   \return             1  Interrupt status is active.
1792:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1793:../CMSIS/Include/core_cm4.h ****  */
1794:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1795:../CMSIS/Include/core_cm4.h **** {
1796:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1797:../CMSIS/Include/core_cm4.h ****   {
1798:../CMSIS/Include/core_cm4.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1799:../CMSIS/Include/core_cm4.h ****   }
1800:../CMSIS/Include/core_cm4.h ****   else
1801:../CMSIS/Include/core_cm4.h ****   {
1802:../CMSIS/Include/core_cm4.h ****     return(0U);
1803:../CMSIS/Include/core_cm4.h ****   }
1804:../CMSIS/Include/core_cm4.h **** }
1805:../CMSIS/Include/core_cm4.h **** 
1806:../CMSIS/Include/core_cm4.h **** 
1807:../CMSIS/Include/core_cm4.h **** /**
1808:../CMSIS/Include/core_cm4.h ****   \brief   Set Interrupt Priority
1809:../CMSIS/Include/core_cm4.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1810:../CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1811:../CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1812:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1813:../CMSIS/Include/core_cm4.h ****   \param [in]  priority  Priority to set.
1814:../CMSIS/Include/core_cm4.h ****   \note    The priority cannot be set for every processor exception.
1815:../CMSIS/Include/core_cm4.h ****  */
1816:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1817:../CMSIS/Include/core_cm4.h **** {
1818:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1819:../CMSIS/Include/core_cm4.h ****   {
1820:../CMSIS/Include/core_cm4.h ****     NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
ARM GAS  /tmp/ccWiGGaB.s 			page 77


1821:../CMSIS/Include/core_cm4.h ****   }
1822:../CMSIS/Include/core_cm4.h ****   else
1823:../CMSIS/Include/core_cm4.h ****   {
1824:../CMSIS/Include/core_cm4.h ****     SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1825:../CMSIS/Include/core_cm4.h ****   }
1826:../CMSIS/Include/core_cm4.h **** }
1827:../CMSIS/Include/core_cm4.h **** 
1828:../CMSIS/Include/core_cm4.h **** 
1829:../CMSIS/Include/core_cm4.h **** /**
1830:../CMSIS/Include/core_cm4.h ****   \brief   Get Interrupt Priority
1831:../CMSIS/Include/core_cm4.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1832:../CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1833:../CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1834:../CMSIS/Include/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1835:../CMSIS/Include/core_cm4.h ****   \return             Interrupt Priority.
1836:../CMSIS/Include/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1837:../CMSIS/Include/core_cm4.h ****  */
1838:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1839:../CMSIS/Include/core_cm4.h **** {
1840:../CMSIS/Include/core_cm4.h **** 
1841:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1842:../CMSIS/Include/core_cm4.h ****   {
1843:../CMSIS/Include/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
1844:../CMSIS/Include/core_cm4.h ****   }
1845:../CMSIS/Include/core_cm4.h ****   else
1846:../CMSIS/Include/core_cm4.h ****   {
1847:../CMSIS/Include/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
1848:../CMSIS/Include/core_cm4.h ****   }
1849:../CMSIS/Include/core_cm4.h **** }
1850:../CMSIS/Include/core_cm4.h **** 
1851:../CMSIS/Include/core_cm4.h **** 
1852:../CMSIS/Include/core_cm4.h **** /**
1853:../CMSIS/Include/core_cm4.h ****   \brief   Encode Priority
1854:../CMSIS/Include/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1855:../CMSIS/Include/core_cm4.h ****            preemptive priority value, and subpriority value.
1856:../CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1857:../CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1858:../CMSIS/Include/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1859:../CMSIS/Include/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1860:../CMSIS/Include/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1861:../CMSIS/Include/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1862:../CMSIS/Include/core_cm4.h ****  */
1863:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1864:../CMSIS/Include/core_cm4.h **** {
1865:../CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1866:../CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1867:../CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1868:../CMSIS/Include/core_cm4.h **** 
1869:../CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1870:../CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1871:../CMSIS/Include/core_cm4.h **** 
1872:../CMSIS/Include/core_cm4.h ****   return (
1873:../CMSIS/Include/core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1874:../CMSIS/Include/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1875:../CMSIS/Include/core_cm4.h ****          );
1876:../CMSIS/Include/core_cm4.h **** }
1877:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 78


1878:../CMSIS/Include/core_cm4.h **** 
1879:../CMSIS/Include/core_cm4.h **** /**
1880:../CMSIS/Include/core_cm4.h ****   \brief   Decode Priority
1881:../CMSIS/Include/core_cm4.h ****   \details Decodes an interrupt priority value with a given priority group to
1882:../CMSIS/Include/core_cm4.h ****            preemptive priority value and subpriority value.
1883:../CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1884:../CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1885:../CMSIS/Include/core_cm4.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1886:../CMSIS/Include/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1887:../CMSIS/Include/core_cm4.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1888:../CMSIS/Include/core_cm4.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1889:../CMSIS/Include/core_cm4.h ****  */
1890:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1891:../CMSIS/Include/core_cm4.h **** {
1892:../CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1893:../CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1894:../CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1895:../CMSIS/Include/core_cm4.h **** 
1896:../CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1897:../CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1898:../CMSIS/Include/core_cm4.h **** 
1899:../CMSIS/Include/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1900:../CMSIS/Include/core_cm4.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1901:../CMSIS/Include/core_cm4.h **** }
1902:../CMSIS/Include/core_cm4.h **** 
1903:../CMSIS/Include/core_cm4.h **** 
1904:../CMSIS/Include/core_cm4.h **** /**
1905:../CMSIS/Include/core_cm4.h ****   \brief   Set Interrupt Vector
1906:../CMSIS/Include/core_cm4.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1907:../CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1908:../CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1909:../CMSIS/Include/core_cm4.h ****            VTOR must been relocated to SRAM before.
1910:../CMSIS/Include/core_cm4.h ****   \param [in]   IRQn      Interrupt number
1911:../CMSIS/Include/core_cm4.h ****   \param [in]   vector    Address of interrupt handler function
1912:../CMSIS/Include/core_cm4.h ****  */
1913:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1914:../CMSIS/Include/core_cm4.h **** {
1915:../CMSIS/Include/core_cm4.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1916:../CMSIS/Include/core_cm4.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
1917:../CMSIS/Include/core_cm4.h **** }
1918:../CMSIS/Include/core_cm4.h **** 
1919:../CMSIS/Include/core_cm4.h **** 
1920:../CMSIS/Include/core_cm4.h **** /**
1921:../CMSIS/Include/core_cm4.h ****   \brief   Get Interrupt Vector
1922:../CMSIS/Include/core_cm4.h ****   \details Reads an interrupt vector from interrupt vector table.
1923:../CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1924:../CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1925:../CMSIS/Include/core_cm4.h ****   \param [in]   IRQn      Interrupt number.
1926:../CMSIS/Include/core_cm4.h ****   \return                 Address of interrupt handler function
1927:../CMSIS/Include/core_cm4.h ****  */
1928:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1929:../CMSIS/Include/core_cm4.h **** {
1930:../CMSIS/Include/core_cm4.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1931:../CMSIS/Include/core_cm4.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
1932:../CMSIS/Include/core_cm4.h **** }
1933:../CMSIS/Include/core_cm4.h **** 
1934:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 79


1935:../CMSIS/Include/core_cm4.h **** /**
1936:../CMSIS/Include/core_cm4.h ****   \brief   System Reset
1937:../CMSIS/Include/core_cm4.h ****   \details Initiates a system reset request to reset the MCU.
1938:../CMSIS/Include/core_cm4.h ****  */
1939:../CMSIS/Include/core_cm4.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
1940:../CMSIS/Include/core_cm4.h **** {
1941:../CMSIS/Include/core_cm4.h ****   __DSB();                                                          /* Ensure all outstanding memor
1942:../CMSIS/Include/core_cm4.h ****                                                                        buffered write are completed
1943:../CMSIS/Include/core_cm4.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1944:../CMSIS/Include/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1945:../CMSIS/Include/core_cm4.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1946:../CMSIS/Include/core_cm4.h ****   __DSB();                                                          /* Ensure completion of memory 
1947:../CMSIS/Include/core_cm4.h **** 
1948:../CMSIS/Include/core_cm4.h ****   for(;;)                                                           /* wait until reset */
1949:../CMSIS/Include/core_cm4.h ****   {
1950:../CMSIS/Include/core_cm4.h ****     __NOP();
1951:../CMSIS/Include/core_cm4.h ****   }
1952:../CMSIS/Include/core_cm4.h **** }
1953:../CMSIS/Include/core_cm4.h **** 
1954:../CMSIS/Include/core_cm4.h **** /*@} end of CMSIS_Core_NVICFunctions */
1955:../CMSIS/Include/core_cm4.h **** 
1956:../CMSIS/Include/core_cm4.h **** /* ##########################  MPU functions  #################################### */
1957:../CMSIS/Include/core_cm4.h **** 
1958:../CMSIS/Include/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1959:../CMSIS/Include/core_cm4.h **** 
1960:../CMSIS/Include/core_cm4.h **** #include "mpu_armv7.h"
1961:../CMSIS/Include/core_cm4.h **** 
1962:../CMSIS/Include/core_cm4.h **** #endif
1963:../CMSIS/Include/core_cm4.h **** 
1964:../CMSIS/Include/core_cm4.h **** 
1965:../CMSIS/Include/core_cm4.h **** /* ##########################  FPU functions  #################################### */
1966:../CMSIS/Include/core_cm4.h **** /**
1967:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1968:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1969:../CMSIS/Include/core_cm4.h ****   \brief    Function that provides FPU type.
1970:../CMSIS/Include/core_cm4.h ****   @{
1971:../CMSIS/Include/core_cm4.h ****  */
1972:../CMSIS/Include/core_cm4.h **** 
1973:../CMSIS/Include/core_cm4.h **** /**
1974:../CMSIS/Include/core_cm4.h ****   \brief   get FPU type
1975:../CMSIS/Include/core_cm4.h ****   \details returns the FPU type
1976:../CMSIS/Include/core_cm4.h ****   \returns
1977:../CMSIS/Include/core_cm4.h ****    - \b  0: No FPU
1978:../CMSIS/Include/core_cm4.h ****    - \b  1: Single precision FPU
1979:../CMSIS/Include/core_cm4.h ****    - \b  2: Double + Single precision FPU
1980:../CMSIS/Include/core_cm4.h ****  */
1981:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1982:../CMSIS/Include/core_cm4.h **** {
1983:../CMSIS/Include/core_cm4.h ****   uint32_t mvfr0;
1984:../CMSIS/Include/core_cm4.h **** 
1985:../CMSIS/Include/core_cm4.h ****   mvfr0 = FPU->MVFR0;
1986:../CMSIS/Include/core_cm4.h ****   if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1987:../CMSIS/Include/core_cm4.h ****   {
1988:../CMSIS/Include/core_cm4.h ****     return 1U;           /* Single precision FPU */
1989:../CMSIS/Include/core_cm4.h ****   }
1990:../CMSIS/Include/core_cm4.h ****   else
1991:../CMSIS/Include/core_cm4.h ****   {
ARM GAS  /tmp/ccWiGGaB.s 			page 80


1992:../CMSIS/Include/core_cm4.h ****     return 0U;           /* No FPU */
1993:../CMSIS/Include/core_cm4.h ****   }
1994:../CMSIS/Include/core_cm4.h **** }
1995:../CMSIS/Include/core_cm4.h **** 
1996:../CMSIS/Include/core_cm4.h **** 
1997:../CMSIS/Include/core_cm4.h **** /*@} end of CMSIS_Core_FpuFunctions */
1998:../CMSIS/Include/core_cm4.h **** 
1999:../CMSIS/Include/core_cm4.h **** 
2000:../CMSIS/Include/core_cm4.h **** 
2001:../CMSIS/Include/core_cm4.h **** /* ##################################    SysTick function  ########################################
2002:../CMSIS/Include/core_cm4.h **** /**
2003:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
2004:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
2005:../CMSIS/Include/core_cm4.h ****   \brief    Functions that configure the System.
2006:../CMSIS/Include/core_cm4.h ****   @{
2007:../CMSIS/Include/core_cm4.h ****  */
2008:../CMSIS/Include/core_cm4.h **** 
2009:../CMSIS/Include/core_cm4.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
2010:../CMSIS/Include/core_cm4.h **** 
2011:../CMSIS/Include/core_cm4.h **** /**
2012:../CMSIS/Include/core_cm4.h ****   \brief   System Tick Configuration
2013:../CMSIS/Include/core_cm4.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
2014:../CMSIS/Include/core_cm4.h ****            Counter is in free running mode to generate periodic interrupts.
2015:../CMSIS/Include/core_cm4.h ****   \param [in]  ticks  Number of ticks between two interrupts.
2016:../CMSIS/Include/core_cm4.h ****   \return          0  Function succeeded.
2017:../CMSIS/Include/core_cm4.h ****   \return          1  Function failed.
2018:../CMSIS/Include/core_cm4.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
2019:../CMSIS/Include/core_cm4.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
2020:../CMSIS/Include/core_cm4.h ****            must contain a vendor-specific implementation of this function.
2021:../CMSIS/Include/core_cm4.h ****  */
2022:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
 1995              		.loc 2 2022 26 view .LVU489
 1996              	.LBB33:
2023:../CMSIS/Include/core_cm4.h **** {
2024:../CMSIS/Include/core_cm4.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 1997              		.loc 2 2024 3 view .LVU490
 1998              		.loc 2 2024 14 is_stmt 0 view .LVU491
 1999 0018 013B     		subs	r3, r3, #1
 2000              	.LVL190:
 2001              		.loc 2 2024 6 view .LVU492
 2002 001a B3F1807F 		cmp	r3, #16777216
 2003 001e 09D2     		bcs	.L170
2025:../CMSIS/Include/core_cm4.h ****   {
2026:../CMSIS/Include/core_cm4.h ****     return (1UL);                                                   /* Reload value impossible */
2027:../CMSIS/Include/core_cm4.h ****   }
2028:../CMSIS/Include/core_cm4.h **** 
2029:../CMSIS/Include/core_cm4.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 2004              		.loc 2 2029 3 is_stmt 1 view .LVU493
 2005              		.loc 2 2029 18 is_stmt 0 view .LVU494
 2006 0020 284A     		ldr	r2, .L172+8
 2007 0022 5360     		str	r3, [r2, #4]
2030:../CMSIS/Include/core_cm4.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 2008              		.loc 2 2030 3 is_stmt 1 view .LVU495
 2009              	.LVL191:
 2010              	.LBB34:
 2011              	.LBI34:
1816:../CMSIS/Include/core_cm4.h **** {
ARM GAS  /tmp/ccWiGGaB.s 			page 81


 2012              		.loc 2 1816 22 view .LVU496
 2013              	.LBB35:
1818:../CMSIS/Include/core_cm4.h ****   {
 2014              		.loc 2 1818 3 view .LVU497
1824:../CMSIS/Include/core_cm4.h ****   }
 2015              		.loc 2 1824 5 view .LVU498
1824:../CMSIS/Include/core_cm4.h ****   }
 2016              		.loc 2 1824 46 is_stmt 0 view .LVU499
 2017 0024 284B     		ldr	r3, .L172+12
 2018              	.LVL192:
1824:../CMSIS/Include/core_cm4.h ****   }
 2019              		.loc 2 1824 46 view .LVU500
 2020 0026 F021     		movs	r1, #240
 2021 0028 83F82310 		strb	r1, [r3, #35]
 2022              	.LVL193:
1824:../CMSIS/Include/core_cm4.h ****   }
 2023              		.loc 2 1824 46 view .LVU501
 2024              	.LBE35:
 2025              	.LBE34:
2031:../CMSIS/Include/core_cm4.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 2026              		.loc 2 2031 3 is_stmt 1 view .LVU502
 2027              		.loc 2 2031 18 is_stmt 0 view .LVU503
 2028 002c 0023     		movs	r3, #0
 2029 002e 9360     		str	r3, [r2, #8]
2032:../CMSIS/Include/core_cm4.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 2030              		.loc 2 2032 3 is_stmt 1 view .LVU504
 2031              		.loc 2 2032 18 is_stmt 0 view .LVU505
 2032 0030 0723     		movs	r3, #7
 2033 0032 1360     		str	r3, [r2]
2033:../CMSIS/Include/core_cm4.h ****                    SysTick_CTRL_TICKINT_Msk   |
2034:../CMSIS/Include/core_cm4.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
2035:../CMSIS/Include/core_cm4.h ****   return (0UL);                                                     /* Function successful */
 2034              		.loc 2 2035 3 is_stmt 1 view .LVU506
 2035              	.L170:
 2036              		.loc 2 2035 3 is_stmt 0 view .LVU507
 2037              	.LBE33:
 2038              	.LBE32:
 381:main.c        **** 
 382:main.c        ****   	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; //enable used clocks
 2039              		.loc 1 382 4 is_stmt 1 view .LVU508
 2040              		.loc 1 382 17 is_stmt 0 view .LVU509
 2041 0034 254B     		ldr	r3, .L172+16
 2042 0036 1A6B     		ldr	r2, [r3, #48]
 2043 0038 42F00202 		orr	r2, r2, #2
 2044 003c 1A63     		str	r2, [r3, #48]
 383:main.c        ****   	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 2045              		.loc 1 383 4 is_stmt 1 view .LVU510
 2046              		.loc 1 383 17 is_stmt 0 view .LVU511
 2047 003e 1A6B     		ldr	r2, [r3, #48]
 2048 0040 42F00802 		orr	r2, r2, #8
 2049 0044 1A63     		str	r2, [r3, #48]
 384:main.c        ****   	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 2050              		.loc 1 384 4 is_stmt 1 view .LVU512
 2051              		.loc 1 384 17 is_stmt 0 view .LVU513
 2052 0046 1A6B     		ldr	r2, [r3, #48]
 2053 0048 42F08002 		orr	r2, r2, #128
 2054 004c 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccWiGGaB.s 			page 82


 385:main.c        **** 
 386:main.c        ****   	GPIOB->MODER &= ~(GPIO_MODER_MODER15_Msk); // set needed pins to output mode
 2055              		.loc 1 386 4 is_stmt 1 view .LVU514
 2056              		.loc 1 386 17 is_stmt 0 view .LVU515
 2057 004e A3F55053 		sub	r3, r3, #13312
 2058 0052 1A68     		ldr	r2, [r3]
 2059 0054 22F04042 		bic	r2, r2, #-1073741824
 2060 0058 1A60     		str	r2, [r3]
 387:main.c        ****   	GPIOB->MODER |= GPIO_MODER_MODER15_0; // MOSI output mode
 2061              		.loc 1 387 4 is_stmt 1 view .LVU516
 2062              		.loc 1 387 17 is_stmt 0 view .LVU517
 2063 005a 1A68     		ldr	r2, [r3]
 2064 005c 42F08042 		orr	r2, r2, #1073741824
 2065 0060 1A60     		str	r2, [r3]
 388:main.c        **** 
 389:main.c        ****   	GPIOB->MODER &= ~(GPIO_MODER_MODER14_Msk); // MISO input mode
 2066              		.loc 1 389 4 is_stmt 1 view .LVU518
 2067              		.loc 1 389 17 is_stmt 0 view .LVU519
 2068 0062 1A68     		ldr	r2, [r3]
 2069 0064 22F04052 		bic	r2, r2, #805306368
 2070 0068 1A60     		str	r2, [r3]
 390:main.c        **** 
 391:main.c        ****   	GPIOD->MODER &= ~(GPIO_MODER_MODER3_Msk); // SCK output mode
 2071              		.loc 1 391 4 is_stmt 1 view .LVU520
 2072              		.loc 1 391 17 is_stmt 0 view .LVU521
 2073 006a 03F50063 		add	r3, r3, #2048
 2074 006e 1A68     		ldr	r2, [r3]
 2075 0070 22F0C002 		bic	r2, r2, #192
 2076 0074 1A60     		str	r2, [r3]
 392:main.c        ****   	GPIOD->MODER |= GPIO_MODER_MODER3_0; // MOSI output mode
 2077              		.loc 1 392 4 is_stmt 1 view .LVU522
 2078              		.loc 1 392 17 is_stmt 0 view .LVU523
 2079 0076 1A68     		ldr	r2, [r3]
 2080 0078 42F04002 		orr	r2, r2, #64
 2081 007c 1A60     		str	r2, [r3]
 393:main.c        **** 
 394:main.c        ****   	GPIOH->MODER &= ~(GPIO_MODER_MODER6_Msk); // CS output mode
 2082              		.loc 1 394 4 is_stmt 1 view .LVU524
 2083              		.loc 1 394 17 is_stmt 0 view .LVU525
 2084 007e 03F58053 		add	r3, r3, #4096
 2085 0082 1A68     		ldr	r2, [r3]
 2086 0084 22F44052 		bic	r2, r2, #12288
 2087 0088 1A60     		str	r2, [r3]
 395:main.c        ****   	GPIOH->MODER |= GPIO_MODER_MODER6_0;
 2088              		.loc 1 395 4 is_stmt 1 view .LVU526
 2089              		.loc 1 395 17 is_stmt 0 view .LVU527
 2090 008a 1A68     		ldr	r2, [r3]
 2091 008c 42F48052 		orr	r2, r2, #4096
 2092 0090 1A60     		str	r2, [r3]
 396:main.c        **** 
 397:main.c        ****   	sendViaUsart("\n\r");
 2093              		.loc 1 397 4 is_stmt 1 view .LVU528
 2094 0092 0F4C     		ldr	r4, .L172+20
 2095 0094 2046     		mov	r0, r4
 2096 0096 FFF7FEFF 		bl	sendViaUsart
 2097              	.LVL194:
 398:main.c        **** 
ARM GAS  /tmp/ccWiGGaB.s 			page 83


 399:main.c        ****   	mosiDown();
 2098              		.loc 1 399 4 view .LVU529
 2099 009a FFF7FEFF 		bl	mosiDown
 2100              	.LVL195:
 400:main.c        ****   	sckDown();
 2101              		.loc 1 400 4 view .LVU530
 2102 009e FFF7FEFF 		bl	sckDown
 2103              	.LVL196:
 401:main.c        ****   	csDown();
 2104              		.loc 1 401 4 view .LVU531
 2105 00a2 FFF7FEFF 		bl	csDown
 2106              	.LVL197:
 402:main.c        **** 
 403:main.c        ****   	/*M93C76Wen(); // enables writing and erasing
 404:main.c        **** 
 405:main.c        ****   	M93C76EraseAll(); //erases everything on chip
 406:main.c        **** 
 407:main.c        **** 	int j = 48;
 408:main.c        **** 	for(int i = 0; i < 512; i++) { // fills memory with the set of ASCII characters
 409:main.c        **** 		M93C76Write(i,256*j + j);
 410:main.c        **** 		j++;
 411:main.c        **** 		if(j == 127) j = 48;
 412:main.c        **** 	}
 413:main.c        **** 
 414:main.c        **** 	M93C76WriteString(0, "                                                "); // bordering my surname
 415:main.c        **** 	M93C76WriteString(9, "PRIDYBAILO");
 416:main.c        **** 
 417:main.c        ****   	M93C76Wds(); //disables writing and erasing*/
 418:main.c        **** 	//M93C76Wen();
 419:main.c        **** 	//M93C76WriteString(0,"        ");
 420:main.c        **** 	//M93C76Wds();
 421:main.c        **** 
 422:main.c        ****   	//sendViaUsart("\n\r");
 423:main.c        ****   	//M93C76Dump(ASCII); // reads and displays chip memory via USART6 (baudrate = 115200)
 424:main.c        ****   	//sendViaUsart("\n\r");
 425:main.c        ****   	//M93C76Dump(DECIMAL); // uncomment to print all 3 views
 426:main.c        **** 	sendViaUsart("\n\r");
 2107              		.loc 1 426 2 view .LVU532
 2108 00a6 2046     		mov	r0, r4
 2109 00a8 FFF7FEFF 		bl	sendViaUsart
 2110              	.LVL198:
 427:main.c        ****   	M93C76Dump(BINARY);
 2111              		.loc 1 427 4 view .LVU533
 2112 00ac 0120     		movs	r0, #1
 2113 00ae FFF7FEFF 		bl	M93C76Dump
 2114              	.LVL199:
 428:main.c        ****   	sendViaUsart("\n\r");
 2115              		.loc 1 428 4 view .LVU534
 2116 00b2 2046     		mov	r0, r4
 2117 00b4 FFF7FEFF 		bl	sendViaUsart
 2118              	.LVL200:
 429:main.c        **** 
 430:main.c        ****   	return 0;
 2119              		.loc 1 430 4 view .LVU535
 431:main.c        **** }
 2120              		.loc 1 431 1 is_stmt 0 view .LVU536
 2121 00b8 0020     		movs	r0, #0
ARM GAS  /tmp/ccWiGGaB.s 			page 84


 2122 00ba 10BD     		pop	{r4, pc}
 2123              	.L173:
 2124              		.align	2
 2125              	.L172:
 2126 00bc 00000000 		.word	SystemCoreClock
 2127 00c0 B1DB9717 		.word	395828145
 2128 00c4 10E000E0 		.word	-536813552
 2129 00c8 00ED00E0 		.word	-536810240
 2130 00cc 00380240 		.word	1073887232
 2131 00d0 00000000 		.word	.LC1
 2132              		.cfi_endproc
 2133              	.LFE157:
 2135              		.comm	itoa_output,12,4
 2136              		.global	ticks
 2137              		.global	delvalue
 2138              		.global	errorBeyondMemory
 2139              		.global	errorInvalidAddress
 2140              		.global	errorInvalidMode
 2141              		.section	.rodata
 2142              		.align	2
 2143              	.LC7:
 2144 0000 4552524F 		.ascii	"ERROR: String goes beyond memory size\012\015\000\000"
 2144      523A2053 
 2144      7472696E 
 2144      6720676F 
 2144      65732062 
 2145 0029 000000   		.space	3
 2146              	.LC8:
 2147 002c 4552524F 		.ascii	"ERROR: Address must vary between 0 and 2047\012\015"
 2147      523A2041 
 2147      64647265 
 2147      7373206D 
 2147      75737420 
 2148 0059 0000     		.ascii	"\000\000"
 2149 005b 00       		.space	1
 2150              	.LC9:
 2151 005c 4552524F 		.ascii	"ERROR: Invalid memory output mode\012\015\000\000"
 2151      523A2049 
 2151      6E76616C 
 2151      6964206D 
 2151      656D6F72 
 2152              		.section	.bss.ticks,"aw",%nobits
 2153              		.align	2
 2154              		.set	.LANCHOR0,. + 0
 2157              	ticks:
 2158 0000 00000000 		.space	4
 2159              		.section	.data.delvalue,"aw"
 2160              		.align	2
 2161              		.set	.LANCHOR1,. + 0
 2164              	delvalue:
 2165 0000 EE020000 		.word	750
 2166              		.section	.data.errorBeyondMemory,"aw"
 2167              		.align	2
 2168              		.set	.LANCHOR4,. + 0
 2171              	errorBeyondMemory:
 2172 0000 00000000 		.word	.LC7
 2173              		.section	.data.errorInvalidAddress,"aw"
ARM GAS  /tmp/ccWiGGaB.s 			page 85


 2174              		.align	2
 2175              		.set	.LANCHOR2,. + 0
 2178              	errorInvalidAddress:
 2179 0000 2C000000 		.word	.LC8
 2180              		.section	.data.errorInvalidMode,"aw"
 2181              		.align	2
 2182              		.set	.LANCHOR3,. + 0
 2185              	errorInvalidMode:
 2186 0000 5C000000 		.word	.LC9
 2187              		.text
 2188              	.Letext0:
 2189              		.file 3 "../CMSIS/Device/ST/STM32F4xx/Include/stm32f469xx.h"
 2190              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2191              		.file 5 "../CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2192              		.file 6 "./util/util.h"
ARM GAS  /tmp/ccWiGGaB.s 			page 86


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccWiGGaB.s:18     .text.delayMs:0000000000000000 $t
     /tmp/ccWiGGaB.s:26     .text.delayMs:0000000000000000 delayMs
     /tmp/ccWiGGaB.s:58     .text.delayMs:0000000000000018 $d
     /tmp/ccWiGGaB.s:63     .text.delayMcs:0000000000000000 $t
     /tmp/ccWiGGaB.s:70     .text.delayMcs:0000000000000000 delayMcs
     /tmp/ccWiGGaB.s:98     .text.delayMcs:0000000000000010 $d
     /tmp/ccWiGGaB.s:103    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccWiGGaB.s:110    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccWiGGaB.s:128    .text.SysTick_Handler:000000000000000c $d
     /tmp/ccWiGGaB.s:133    .text.sendViaUsart:0000000000000000 $t
     /tmp/ccWiGGaB.s:140    .text.sendViaUsart:0000000000000000 sendViaUsart
     /tmp/ccWiGGaB.s:194    .text.sendViaUsart:0000000000000028 $d
     /tmp/ccWiGGaB.s:199    .text.UART6Config:0000000000000000 $t
     /tmp/ccWiGGaB.s:206    .text.UART6Config:0000000000000000 UART6Config
     /tmp/ccWiGGaB.s:308    .text.UART6Config:000000000000009c $d
     /tmp/ccWiGGaB.s:313    .text.sckUp:0000000000000000 $t
     /tmp/ccWiGGaB.s:320    .text.sckUp:0000000000000000 sckUp
     /tmp/ccWiGGaB.s:338    .text.sckUp:000000000000000c $d
     /tmp/ccWiGGaB.s:343    .text.sckDown:0000000000000000 $t
     /tmp/ccWiGGaB.s:350    .text.sckDown:0000000000000000 sckDown
     /tmp/ccWiGGaB.s:368    .text.sckDown:000000000000000c $d
     /tmp/ccWiGGaB.s:373    .text.csUp:0000000000000000 $t
     /tmp/ccWiGGaB.s:380    .text.csUp:0000000000000000 csUp
     /tmp/ccWiGGaB.s:398    .text.csUp:000000000000000c $d
     /tmp/ccWiGGaB.s:403    .text.csDown:0000000000000000 $t
     /tmp/ccWiGGaB.s:410    .text.csDown:0000000000000000 csDown
     /tmp/ccWiGGaB.s:428    .text.csDown:000000000000000c $d
     /tmp/ccWiGGaB.s:433    .text.mosiUp:0000000000000000 $t
     /tmp/ccWiGGaB.s:440    .text.mosiUp:0000000000000000 mosiUp
     /tmp/ccWiGGaB.s:458    .text.mosiUp:000000000000000c $d
     /tmp/ccWiGGaB.s:463    .text.mosiDown:0000000000000000 $t
     /tmp/ccWiGGaB.s:470    .text.mosiDown:0000000000000000 mosiDown
     /tmp/ccWiGGaB.s:488    .text.mosiDown:000000000000000c $d
     /tmp/ccWiGGaB.s:493    .rodata.itoa.str1.4:0000000000000000 $d
     /tmp/ccWiGGaB.s:497    .text.itoa:0000000000000000 $t
     /tmp/ccWiGGaB.s:504    .text.itoa:0000000000000000 itoa
     /tmp/ccWiGGaB.s:643    .text.itoa:000000000000006c $d
                            *COM*:000000000000000c itoa_output
     /tmp/ccWiGGaB.s:650    .text.sckRise:0000000000000000 $t
     /tmp/ccWiGGaB.s:657    .text.sckRise:0000000000000000 sckRise
     /tmp/ccWiGGaB.s:680    .text.M93C76SetOperationCode:0000000000000000 $t
     /tmp/ccWiGGaB.s:687    .text.M93C76SetOperationCode:0000000000000000 M93C76SetOperationCode
     /tmp/ccWiGGaB.s:745    .text.M93C76SetAddress:0000000000000000 $t
     /tmp/ccWiGGaB.s:752    .text.M93C76SetAddress:0000000000000000 M93C76SetAddress
     /tmp/ccWiGGaB.s:814    .text.M93C76setValue:0000000000000000 $t
     /tmp/ccWiGGaB.s:821    .text.M93C76setValue:0000000000000000 M93C76setValue
     /tmp/ccWiGGaB.s:882    .text.M93C76WaitReady:0000000000000000 $t
     /tmp/ccWiGGaB.s:889    .text.M93C76WaitReady:0000000000000000 M93C76WaitReady
     /tmp/ccWiGGaB.s:938    .text.M93C76WaitReady:0000000000000034 $d
     /tmp/ccWiGGaB.s:944    .text.M93C76Read:0000000000000000 $t
     /tmp/ccWiGGaB.s:951    .text.M93C76Read:0000000000000000 M93C76Read
     /tmp/ccWiGGaB.s:1074   .text.M93C76Read:0000000000000064 $d
     /tmp/ccWiGGaB.s:1081   .rodata.M93C76Dump.str1.4:0000000000000000 $d
     /tmp/ccWiGGaB.s:1100   .text.M93C76Dump:0000000000000000 $t
     /tmp/ccWiGGaB.s:1107   .text.M93C76Dump:0000000000000000 M93C76Dump
ARM GAS  /tmp/ccWiGGaB.s 			page 87


     /tmp/ccWiGGaB.s:1469   .text.M93C76Dump:000000000000013c $d
     /tmp/ccWiGGaB.s:1483   .text.M93C76Erase:0000000000000000 $t
     /tmp/ccWiGGaB.s:1490   .text.M93C76Erase:0000000000000000 M93C76Erase
     /tmp/ccWiGGaB.s:1539   .text.M93C76Erase:000000000000002c $d
     /tmp/ccWiGGaB.s:1544   .text.M93C76Write:0000000000000000 $t
     /tmp/ccWiGGaB.s:1551   .text.M93C76Write:0000000000000000 M93C76Write
     /tmp/ccWiGGaB.s:1607   .text.M93C76Write:0000000000000034 $d
     /tmp/ccWiGGaB.s:1612   .text.M93C76WriteAll:0000000000000000 $t
     /tmp/ccWiGGaB.s:1619   .text.M93C76WriteAll:0000000000000000 M93C76WriteAll
     /tmp/ccWiGGaB.s:1657   .text.M93C76EraseAll:0000000000000000 $t
     /tmp/ccWiGGaB.s:1664   .text.M93C76EraseAll:0000000000000000 M93C76EraseAll
     /tmp/ccWiGGaB.s:1695   .text.M93C76Wen:0000000000000000 $t
     /tmp/ccWiGGaB.s:1702   .text.M93C76Wen:0000000000000000 M93C76Wen
     /tmp/ccWiGGaB.s:1736   .text.M93C76Wds:0000000000000000 $t
     /tmp/ccWiGGaB.s:1743   .text.M93C76Wds:0000000000000000 M93C76Wds
     /tmp/ccWiGGaB.s:1777   .text.strlen:0000000000000000 $t
     /tmp/ccWiGGaB.s:1784   .text.strlen:0000000000000000 strlen
     /tmp/ccWiGGaB.s:1831   .text.M93C76WriteString:0000000000000000 $t
     /tmp/ccWiGGaB.s:1838   .text.M93C76WriteString:0000000000000000 M93C76WriteString
     /tmp/ccWiGGaB.s:1954   .text.M93C76WriteString:0000000000000070 $d
     /tmp/ccWiGGaB.s:1960   .text.main:0000000000000000 $t
     /tmp/ccWiGGaB.s:1967   .text.main:0000000000000000 main
     /tmp/ccWiGGaB.s:2126   .text.main:00000000000000bc $d
     /tmp/ccWiGGaB.s:2157   .bss.ticks:0000000000000000 ticks
     /tmp/ccWiGGaB.s:2164   .data.delvalue:0000000000000000 delvalue
     /tmp/ccWiGGaB.s:2171   .data.errorBeyondMemory:0000000000000000 errorBeyondMemory
     /tmp/ccWiGGaB.s:2178   .data.errorInvalidAddress:0000000000000000 errorInvalidAddress
     /tmp/ccWiGGaB.s:2185   .data.errorInvalidMode:0000000000000000 errorInvalidMode
     /tmp/ccWiGGaB.s:2142   .rodata:0000000000000000 $d
     /tmp/ccWiGGaB.s:2153   .bss.ticks:0000000000000000 $d
     /tmp/ccWiGGaB.s:2160   .data.delvalue:0000000000000000 $d
     /tmp/ccWiGGaB.s:2167   .data.errorBeyondMemory:0000000000000000 $d
     /tmp/ccWiGGaB.s:2174   .data.errorInvalidAddress:0000000000000000 $d
     /tmp/ccWiGGaB.s:2181   .data.errorInvalidMode:0000000000000000 $d

UNDEFINED SYMBOLS
set_sysclk_max
SystemCoreClock
