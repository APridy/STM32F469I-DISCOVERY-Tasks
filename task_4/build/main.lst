ARM GAS  /tmp/ccV3uvSK.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.delayMs,"ax",%progbits
  18              		.align	1
  19              		.global	delayMs
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	delayMs:
  27              	.LVL0:
  28              	.LFB130:
  29              		.file 1 "main.c"
   1:main.c        **** #include "stm32f4xx.h"
   2:main.c        **** #include "util.h"
   3:main.c        **** #include "stdbool.h"
   4:main.c        **** 
   5:main.c        **** #define MAX_ITOA_OUTPUT_LENGTH 12
   6:main.c        **** 
   7:main.c        **** #define DUMMY_BYTE 0xFF
   8:main.c        **** #define ERASE_BYTE 0xAA
   9:main.c        **** #define ZERO_ADDRESS 0
  10:main.c        **** 
  11:main.c        **** #define device_select_with_address_bits(opcode,addr) (opcode | (((addr >> 8) & 0b111) << 1)) // ini
  12:main.c        **** #define address_invalid(addr) ((addr > 2047) || (addr < 0))
  13:main.c        **** 
  14:main.c        **** const char* errorInvalidMode = "ERROR: Invalid memory output mode\n\r\0";
  15:main.c        **** const char* errorInvalidAddress = "ERROR: Address must vary between 0 and 2047\n\r\0";
  16:main.c        **** const char* errorBeyondMemoryWrite = "ERROR: String goes beyond memory size\n\r\0";
  17:main.c        **** const char* errorBeyondMemoryRead = "ERROR: Read length goes beyond memory size\n\r\0";
  18:main.c        **** const char* errorBeyondMemoryErase = "ERROR: Erase length goes beyond memory size\n\r\0";
  19:main.c        **** 
  20:main.c        **** enum memoryDisplayMode {
  21:main.c        ****     BINARY = 1,
  22:main.c        ****     DECIMAL = 2,
  23:main.c        ****     ASCII = 3
  24:main.c        **** };
  25:main.c        **** 
  26:main.c        **** enum opCode {
  27:main.c        ****     DEVICE_SELECT = 0b10100000,
  28:main.c        ****     OPCODE_READ = DEVICE_SELECT | 1,
  29:main.c        ****     OPCODE_WRITE = DEVICE_SELECT
ARM GAS  /tmp/ccV3uvSK.s 			page 2


  30:main.c        **** };
  31:main.c        **** 
  32:main.c        **** enum ackCode {
  33:main.c        ****     ACK = false,
  34:main.c        ****     NO_ACK = true
  35:main.c        **** };
  36:main.c        **** 
  37:main.c        **** volatile int ticks = 0;
  38:main.c        **** 
  39:main.c        **** int delvalue = 25;
  40:main.c        **** 
  41:main.c        **** void delayMs(int ms) { // delay in miliseconds
  30              		.loc 1 41 22 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  42:main.c        ****     ticks = 0;
  35              		.loc 1 42 5 view .LVU1
  36              		.loc 1 42 11 is_stmt 0 view .LVU2
  37 0000 054B     		ldr	r3, .L3
  38 0002 0022     		movs	r2, #0
  39 0004 1A60     		str	r2, [r3]
  43:main.c        ****     while(ticks<ms*1000);
  40              		.loc 1 43 5 is_stmt 1 view .LVU3
  41              	.L2:
  42              		.loc 1 43 25 discriminator 1 view .LVU4
  43              		.loc 1 43 10 discriminator 1 view .LVU5
  44              		.loc 1 43 19 is_stmt 0 discriminator 1 view .LVU6
  45 0006 4FF47A73 		mov	r3, #1000
  46 000a 03FB00F3 		mul	r3, r3, r0
  47              		.loc 1 43 16 discriminator 1 view .LVU7
  48 000e 024A     		ldr	r2, .L3
  49 0010 1268     		ldr	r2, [r2]
  50              		.loc 1 43 10 discriminator 1 view .LVU8
  51 0012 9342     		cmp	r3, r2
  52 0014 F7DC     		bgt	.L2
  44:main.c        **** }
  53              		.loc 1 44 1 view .LVU9
  54 0016 7047     		bx	lr
  55              	.L4:
  56              		.align	2
  57              	.L3:
  58 0018 00000000 		.word	.LANCHOR0
  59              		.cfi_endproc
  60              	.LFE130:
  62              		.section	.text.delayMcs,"ax",%progbits
  63              		.align	1
  64              		.global	delayMcs
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  68              		.fpu fpv4-sp-d16
  70              	delayMcs:
  71              	.LVL1:
  72              	.LFB131:
  45:main.c        **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 3


  46:main.c        **** void delayMcs(int mcs) { // delay in microseconds
  73              		.loc 1 46 24 is_stmt 1 view -0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  47:main.c        ****     ticks = 0;
  78              		.loc 1 47 5 view .LVU11
  79              		.loc 1 47 11 is_stmt 0 view .LVU12
  80 0000 034B     		ldr	r3, .L7
  81 0002 0022     		movs	r2, #0
  82 0004 1A60     		str	r2, [r3]
  48:main.c        ****     while(ticks<mcs);
  83              		.loc 1 48 5 is_stmt 1 view .LVU13
  84              	.L6:
  85              		.loc 1 48 21 discriminator 1 view .LVU14
  86              		.loc 1 48 10 discriminator 1 view .LVU15
  87              		.loc 1 48 16 is_stmt 0 discriminator 1 view .LVU16
  88 0006 024B     		ldr	r3, .L7
  89 0008 1B68     		ldr	r3, [r3]
  90              		.loc 1 48 10 discriminator 1 view .LVU17
  91 000a 8342     		cmp	r3, r0
  92 000c FBDB     		blt	.L6
  49:main.c        **** }
  93              		.loc 1 49 1 view .LVU18
  94 000e 7047     		bx	lr
  95              	.L8:
  96              		.align	2
  97              	.L7:
  98 0010 00000000 		.word	.LANCHOR0
  99              		.cfi_endproc
 100              	.LFE131:
 102              		.section	.text.SysTick_Handler,"ax",%progbits
 103              		.align	1
 104              		.global	SysTick_Handler
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	SysTick_Handler:
 111              	.LFB132:
  50:main.c        **** 
  51:main.c        **** void SysTick_Handler(void) { // redefinition of SysTick_Handler
 112              		.loc 1 51 28 is_stmt 1 view -0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
  52:main.c        ****     ticks++;
 117              		.loc 1 52 5 view .LVU20
 118              		.loc 1 52 10 is_stmt 0 view .LVU21
 119 0000 024A     		ldr	r2, .L10
 120 0002 1368     		ldr	r3, [r2]
 121 0004 0133     		adds	r3, r3, #1
 122 0006 1360     		str	r3, [r2]
  53:main.c        **** }
 123              		.loc 1 53 1 view .LVU22
ARM GAS  /tmp/ccV3uvSK.s 			page 4


 124 0008 7047     		bx	lr
 125              	.L11:
 126 000a 00BF     		.align	2
 127              	.L10:
 128 000c 00000000 		.word	.LANCHOR0
 129              		.cfi_endproc
 130              	.LFE132:
 132              		.section	.text.sendViaUsart,"ax",%progbits
 133              		.align	1
 134              		.global	sendViaUsart
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 138              		.fpu fpv4-sp-d16
 140              	sendViaUsart:
 141              	.LVL2:
 142              	.LFB133:
  54:main.c        **** 
  55:main.c        **** void sendViaUsart(const char* msg) {
 143              		.loc 1 55 36 is_stmt 1 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
  56:main.c        ****     for(int i = 0; msg[i] != '\0'; i++) {
 148              		.loc 1 56 5 view .LVU24
 149              	.LBB8:
 150              		.loc 1 56 9 view .LVU25
 151              		.loc 1 56 13 is_stmt 0 view .LVU26
 152 0000 0022     		movs	r2, #0
 153              		.loc 1 56 5 view .LVU27
 154 0002 0CE0     		b	.L13
 155              	.LVL3:
 156              	.L15:
  57:main.c        ****         USART6->DR = msg[i]; // put one character in data register
 157              		.loc 1 57 9 is_stmt 1 view .LVU28
 158              		.loc 1 57 20 is_stmt 0 view .LVU29
 159 0004 0849     		ldr	r1, .L16
 160 0006 4B60     		str	r3, [r1, #4]
  58:main.c        ****         while(!(USART6->SR & (USART_SR_TC))); // wait until transmit is over
 161              		.loc 1 58 9 is_stmt 1 view .LVU30
 162              	.L14:
 163              		.loc 1 58 45 discriminator 1 view .LVU31
 164              		.loc 1 58 14 discriminator 1 view .LVU32
 165              		.loc 1 58 23 is_stmt 0 discriminator 1 view .LVU33
 166 0008 074B     		ldr	r3, .L16
 167 000a 1B68     		ldr	r3, [r3]
 168              		.loc 1 58 14 discriminator 1 view .LVU34
 169 000c 13F0400F 		tst	r3, #64
 170 0010 FAD0     		beq	.L14
  59:main.c        ****         USART6->SR &= ~(USART_SR_TC); // clear transmit value
 171              		.loc 1 59 9 is_stmt 1 discriminator 2 view .LVU35
 172              		.loc 1 59 20 is_stmt 0 discriminator 2 view .LVU36
 173 0012 0549     		ldr	r1, .L16
 174 0014 0B68     		ldr	r3, [r1]
 175 0016 23F04003 		bic	r3, r3, #64
 176 001a 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccV3uvSK.s 			page 5


  56:main.c        ****         USART6->DR = msg[i]; // put one character in data register
 177              		.loc 1 56 36 is_stmt 1 discriminator 2 view .LVU37
  56:main.c        ****         USART6->DR = msg[i]; // put one character in data register
 178              		.loc 1 56 37 is_stmt 0 discriminator 2 view .LVU38
 179 001c 0132     		adds	r2, r2, #1
 180              	.LVL4:
 181              	.L13:
  56:main.c        ****         USART6->DR = msg[i]; // put one character in data register
 182              		.loc 1 56 20 is_stmt 1 discriminator 1 view .LVU39
  56:main.c        ****         USART6->DR = msg[i]; // put one character in data register
 183              		.loc 1 56 23 is_stmt 0 discriminator 1 view .LVU40
 184 001e 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
  56:main.c        ****         USART6->DR = msg[i]; // put one character in data register
 185              		.loc 1 56 5 discriminator 1 view .LVU41
 186 0020 002B     		cmp	r3, #0
 187 0022 EFD1     		bne	.L15
 188              	.LBE8:
  60:main.c        ****     }
  61:main.c        **** }
 189              		.loc 1 61 1 view .LVU42
 190 0024 7047     		bx	lr
 191              	.L17:
 192 0026 00BF     		.align	2
 193              	.L16:
 194 0028 00140140 		.word	1073812480
 195              		.cfi_endproc
 196              	.LFE133:
 198              		.section	.text.UART6Config,"ax",%progbits
 199              		.align	1
 200              		.global	UART6Config
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv4-sp-d16
 206              	UART6Config:
 207              	.LFB134:
  62:main.c        **** 
  63:main.c        **** void UART6Config() {
 208              		.loc 1 63 20 is_stmt 1 view -0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
  64:main.c        **** 
  65:main.c        ****     RCC->APB2ENR |= RCC_APB2ENR_USART6EN;  // enable USART6 clock, bit 5 on APB2ENR
 213              		.loc 1 65 5 view .LVU44
 214              		.loc 1 65 18 is_stmt 0 view .LVU45
 215 0000 264B     		ldr	r3, .L19
 216 0002 5A6C     		ldr	r2, [r3, #68]
 217 0004 42F02002 		orr	r2, r2, #32
 218 0008 5A64     		str	r2, [r3, #68]
  66:main.c        ****     RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;  // enable GPIOG clock, bit 6 on AHB1ENR
 219              		.loc 1 66 5 is_stmt 1 view .LVU46
 220              		.loc 1 66 18 is_stmt 0 view .LVU47
 221 000a 1A6B     		ldr	r2, [r3, #48]
 222 000c 42F04002 		orr	r2, r2, #64
 223 0010 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccV3uvSK.s 			page 6


  67:main.c        **** 
  68:main.c        ****     GPIOG->MODER &= ~(GPIO_MODER_MODER14_Msk);
 224              		.loc 1 68 5 is_stmt 1 view .LVU48
 225              		.loc 1 68 18 is_stmt 0 view .LVU49
 226 0012 A3F50053 		sub	r3, r3, #8192
 227 0016 1A68     		ldr	r2, [r3]
 228 0018 22F04052 		bic	r2, r2, #805306368
 229 001c 1A60     		str	r2, [r3]
  69:main.c        ****     GPIOG->MODER |=  GPIO_MODER_MODER14_1; //set PG14 to alternate mode (USART6_TX pin)
 230              		.loc 1 69 5 is_stmt 1 view .LVU50
 231              		.loc 1 69 18 is_stmt 0 view .LVU51
 232 001e 1A68     		ldr	r2, [r3]
 233 0020 42F00052 		orr	r2, r2, #536870912
 234 0024 1A60     		str	r2, [r3]
  70:main.c        ****     GPIOG->MODER &= ~(GPIO_MODER_MODER9_Msk);
 235              		.loc 1 70 5 is_stmt 1 view .LVU52
 236              		.loc 1 70 18 is_stmt 0 view .LVU53
 237 0026 1A68     		ldr	r2, [r3]
 238 0028 22F44022 		bic	r2, r2, #786432
 239 002c 1A60     		str	r2, [r3]
  71:main.c        ****     GPIOG->MODER |=  GPIO_MODER_MODER14_1; //set PG9 to alternate mode (USART6_RX pin)
 240              		.loc 1 71 5 is_stmt 1 view .LVU54
 241              		.loc 1 71 18 is_stmt 0 view .LVU55
 242 002e 1A68     		ldr	r2, [r3]
 243 0030 42F00052 		orr	r2, r2, #536870912
 244 0034 1A60     		str	r2, [r3]
  72:main.c        **** 
  73:main.c        ****     GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED14_Msk|GPIO_OSPEEDR_OSPEED9_Msk);
 245              		.loc 1 73 5 is_stmt 1 view .LVU56
 246              		.loc 1 73 20 is_stmt 0 view .LVU57
 247 0036 9A68     		ldr	r2, [r3, #8]
 248 0038 22F04052 		bic	r2, r2, #805306368
 249 003c 22F44022 		bic	r2, r2, #786432
 250 0040 9A60     		str	r2, [r3, #8]
  74:main.c        ****     GPIOG->OSPEEDR |= (GPIO_OSPEEDR_OSPEED14_1|GPIO_OSPEEDR_OSPEED9_1); // Set USART6_TX and USART6
 251              		.loc 1 74 5 is_stmt 1 view .LVU58
 252              		.loc 1 74 20 is_stmt 0 view .LVU59
 253 0042 9A68     		ldr	r2, [r3, #8]
 254 0044 42F00052 		orr	r2, r2, #536870912
 255 0048 42F40022 		orr	r2, r2, #524288
 256 004c 9A60     		str	r2, [r3, #8]
  75:main.c        **** 
  76:main.c        ****     GPIOG->AFR[1] &= ~(GPIO_AFRH_AFSEL9_Msk|GPIO_AFRH_AFSEL14_Msk);
 257              		.loc 1 76 5 is_stmt 1 view .LVU60
 258              		.loc 1 76 19 is_stmt 0 view .LVU61
 259 004e 5A6A     		ldr	r2, [r3, #36]
 260 0050 22F07062 		bic	r2, r2, #251658240
 261 0054 22F0F002 		bic	r2, r2, #240
 262 0058 5A62     		str	r2, [r3, #36]
  77:main.c        ****     GPIOG->AFR[1] |= GPIO_AFRH_AFSEL9_3; // assign alternate function number 8 (USART_RX) to PG9 (U
 263              		.loc 1 77 5 is_stmt 1 view .LVU62
 264              		.loc 1 77 19 is_stmt 0 view .LVU63
 265 005a 5A6A     		ldr	r2, [r3, #36]
 266 005c 42F08002 		orr	r2, r2, #128
 267 0060 5A62     		str	r2, [r3, #36]
  78:main.c        ****     GPIOG->AFR[1] |= GPIO_AFRH_AFSEL14_3; // assign alternate function number 8 (USART_TX) to PG14 
 268              		.loc 1 78 5 is_stmt 1 view .LVU64
ARM GAS  /tmp/ccV3uvSK.s 			page 7


 269              		.loc 1 78 19 is_stmt 0 view .LVU65
 270 0062 5A6A     		ldr	r2, [r3, #36]
 271 0064 42F00062 		orr	r2, r2, #134217728
 272 0068 5A62     		str	r2, [r3, #36]
  79:main.c        **** 
  80:main.c        ****     USART6->BRR = 0;
 273              		.loc 1 80 5 is_stmt 1 view .LVU66
 274              		.loc 1 80 17 is_stmt 0 view .LVU67
 275 006a A3F58233 		sub	r3, r3, #66560
 276 006e 0022     		movs	r2, #0
 277 0070 9A60     		str	r2, [r3, #8]
  81:main.c        ****     USART6->BRR |= (48 << 4); // set BRR (frequency = 90 MHZ), BRR = frk/(baudrate * 16) = 90 * 10^
 278              		.loc 1 81 5 is_stmt 1 view .LVU68
 279              		.loc 1 81 17 is_stmt 0 view .LVU69
 280 0072 9A68     		ldr	r2, [r3, #8]
 281 0074 42F44072 		orr	r2, r2, #768
 282 0078 9A60     		str	r2, [r3, #8]
  82:main.c        ****     USART6->BRR |= 13;
 283              		.loc 1 82 5 is_stmt 1 view .LVU70
 284              		.loc 1 82 17 is_stmt 0 view .LVU71
 285 007a 9A68     		ldr	r2, [r3, #8]
 286 007c 42F00D02 		orr	r2, r2, #13
 287 0080 9A60     		str	r2, [r3, #8]
  83:main.c        **** 
  84:main.c        ****     USART6->CR1 |= USART_CR1_TE; // enable tx pin
 288              		.loc 1 84 5 is_stmt 1 view .LVU72
 289              		.loc 1 84 17 is_stmt 0 view .LVU73
 290 0082 DA68     		ldr	r2, [r3, #12]
 291 0084 42F00802 		orr	r2, r2, #8
 292 0088 DA60     		str	r2, [r3, #12]
  85:main.c        ****     USART6->CR1 |= USART_CR1_RE; // enable rx pin
 293              		.loc 1 85 5 is_stmt 1 view .LVU74
 294              		.loc 1 85 17 is_stmt 0 view .LVU75
 295 008a DA68     		ldr	r2, [r3, #12]
 296 008c 42F00402 		orr	r2, r2, #4
 297 0090 DA60     		str	r2, [r3, #12]
  86:main.c        **** 
  87:main.c        ****     USART6->CR1 |= USART_CR1_UE; //enable usart6
 298              		.loc 1 87 5 is_stmt 1 view .LVU76
 299              		.loc 1 87 17 is_stmt 0 view .LVU77
 300 0092 DA68     		ldr	r2, [r3, #12]
 301 0094 42F40052 		orr	r2, r2, #8192
 302 0098 DA60     		str	r2, [r3, #12]
  88:main.c        **** 
  89:main.c        **** }
 303              		.loc 1 89 1 view .LVU78
 304 009a 7047     		bx	lr
 305              	.L20:
 306              		.align	2
 307              	.L19:
 308 009c 00380240 		.word	1073887232
 309              		.cfi_endproc
 310              	.LFE134:
 312              		.section	.text.setClkOutput,"ax",%progbits
 313              		.align	1
 314              		.global	setClkOutput
 315              		.syntax unified
ARM GAS  /tmp/ccV3uvSK.s 			page 8


 316              		.thumb
 317              		.thumb_func
 318              		.fpu fpv4-sp-d16
 320              	setClkOutput:
 321              	.LFB135:
  90:main.c        **** 
  91:main.c        **** // clk - d15 - pb8
  92:main.c        **** // sda - d14 - pb9
  93:main.c        **** 
  94:main.c        **** void setClkOutput() {
 322              		.loc 1 94 21 is_stmt 1 view -0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		@ link register save eliminated.
  95:main.c        ****     GPIOB->MODER &= ~(GPIO_MODER_MODER8_Msk);
 327              		.loc 1 95 5 view .LVU80
 328              		.loc 1 95 18 is_stmt 0 view .LVU81
 329 0000 044B     		ldr	r3, .L22
 330 0002 1A68     		ldr	r2, [r3]
 331 0004 22F44032 		bic	r2, r2, #196608
 332 0008 1A60     		str	r2, [r3]
  96:main.c        ****     GPIOB->MODER |= GPIO_MODER_MODER8_0;
 333              		.loc 1 96 5 is_stmt 1 view .LVU82
 334              		.loc 1 96 18 is_stmt 0 view .LVU83
 335 000a 1A68     		ldr	r2, [r3]
 336 000c 42F48032 		orr	r2, r2, #65536
 337 0010 1A60     		str	r2, [r3]
  97:main.c        **** }
 338              		.loc 1 97 1 view .LVU84
 339 0012 7047     		bx	lr
 340              	.L23:
 341              		.align	2
 342              	.L22:
 343 0014 00040240 		.word	1073873920
 344              		.cfi_endproc
 345              	.LFE135:
 347              		.section	.text.setSdaOutput,"ax",%progbits
 348              		.align	1
 349              		.global	setSdaOutput
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 353              		.fpu fpv4-sp-d16
 355              	setSdaOutput:
 356              	.LFB136:
  98:main.c        **** 
  99:main.c        **** void setSdaOutput() {
 357              		.loc 1 99 21 is_stmt 1 view -0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 100:main.c        ****     GPIOB->MODER &= ~(GPIO_MODER_MODER9_Msk);
 362              		.loc 1 100 5 view .LVU86
 363              		.loc 1 100 18 is_stmt 0 view .LVU87
 364 0000 044B     		ldr	r3, .L25
ARM GAS  /tmp/ccV3uvSK.s 			page 9


 365 0002 1A68     		ldr	r2, [r3]
 366 0004 22F44022 		bic	r2, r2, #786432
 367 0008 1A60     		str	r2, [r3]
 101:main.c        ****     GPIOB->MODER |= GPIO_MODER_MODER9_0;
 368              		.loc 1 101 5 is_stmt 1 view .LVU88
 369              		.loc 1 101 18 is_stmt 0 view .LVU89
 370 000a 1A68     		ldr	r2, [r3]
 371 000c 42F48022 		orr	r2, r2, #262144
 372 0010 1A60     		str	r2, [r3]
 102:main.c        **** }
 373              		.loc 1 102 1 view .LVU90
 374 0012 7047     		bx	lr
 375              	.L26:
 376              		.align	2
 377              	.L25:
 378 0014 00040240 		.word	1073873920
 379              		.cfi_endproc
 380              	.LFE136:
 382              		.section	.text.setSdaInput,"ax",%progbits
 383              		.align	1
 384              		.global	setSdaInput
 385              		.syntax unified
 386              		.thumb
 387              		.thumb_func
 388              		.fpu fpv4-sp-d16
 390              	setSdaInput:
 391              	.LFB137:
 103:main.c        **** 
 104:main.c        **** void setSdaInput() {
 392              		.loc 1 104 20 is_stmt 1 view -0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 105:main.c        ****     GPIOB->MODER &= ~(GPIO_MODER_MODER9_Msk);
 397              		.loc 1 105 5 view .LVU92
 398              		.loc 1 105 18 is_stmt 0 view .LVU93
 399 0000 024A     		ldr	r2, .L28
 400 0002 1368     		ldr	r3, [r2]
 401 0004 23F44023 		bic	r3, r3, #786432
 402 0008 1360     		str	r3, [r2]
 106:main.c        **** }
 403              		.loc 1 106 1 view .LVU94
 404 000a 7047     		bx	lr
 405              	.L29:
 406              		.align	2
 407              	.L28:
 408 000c 00040240 		.word	1073873920
 409              		.cfi_endproc
 410              	.LFE137:
 412              		.section	.text.clkUp,"ax",%progbits
 413              		.align	1
 414              		.global	clkUp
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 418              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccV3uvSK.s 			page 10


 420              	clkUp:
 421              	.LFB138:
 107:main.c        **** 
 108:main.c        **** void clkUp() {
 422              		.loc 1 108 14 is_stmt 1 view -0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              		@ link register save eliminated.
 109:main.c        ****     GPIOB->BSRR |= GPIO_BSRR_BS8;
 427              		.loc 1 109 5 view .LVU96
 428              		.loc 1 109 17 is_stmt 0 view .LVU97
 429 0000 024A     		ldr	r2, .L31
 430 0002 9369     		ldr	r3, [r2, #24]
 431 0004 43F48073 		orr	r3, r3, #256
 432 0008 9361     		str	r3, [r2, #24]
 110:main.c        **** }
 433              		.loc 1 110 1 view .LVU98
 434 000a 7047     		bx	lr
 435              	.L32:
 436              		.align	2
 437              	.L31:
 438 000c 00040240 		.word	1073873920
 439              		.cfi_endproc
 440              	.LFE138:
 442              		.section	.text.clkDown,"ax",%progbits
 443              		.align	1
 444              		.global	clkDown
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 448              		.fpu fpv4-sp-d16
 450              	clkDown:
 451              	.LFB139:
 111:main.c        **** 
 112:main.c        **** void clkDown() {
 452              		.loc 1 112 16 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 113:main.c        ****     GPIOB->BSRR |= GPIO_BSRR_BR8;
 457              		.loc 1 113 5 view .LVU100
 458              		.loc 1 113 17 is_stmt 0 view .LVU101
 459 0000 024A     		ldr	r2, .L34
 460 0002 9369     		ldr	r3, [r2, #24]
 461 0004 43F08073 		orr	r3, r3, #16777216
 462 0008 9361     		str	r3, [r2, #24]
 114:main.c        **** }
 463              		.loc 1 114 1 view .LVU102
 464 000a 7047     		bx	lr
 465              	.L35:
 466              		.align	2
 467              	.L34:
 468 000c 00040240 		.word	1073873920
 469              		.cfi_endproc
 470              	.LFE139:
ARM GAS  /tmp/ccV3uvSK.s 			page 11


 472              		.section	.text.sdaUp,"ax",%progbits
 473              		.align	1
 474              		.global	sdaUp
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 478              		.fpu fpv4-sp-d16
 480              	sdaUp:
 481              	.LFB140:
 115:main.c        **** 
 116:main.c        **** void sdaUp() {
 482              		.loc 1 116 14 is_stmt 1 view -0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 117:main.c        ****     GPIOB->BSRR |= GPIO_BSRR_BS9;
 487              		.loc 1 117 5 view .LVU104
 488              		.loc 1 117 17 is_stmt 0 view .LVU105
 489 0000 024A     		ldr	r2, .L37
 490 0002 9369     		ldr	r3, [r2, #24]
 491 0004 43F40073 		orr	r3, r3, #512
 492 0008 9361     		str	r3, [r2, #24]
 118:main.c        **** }
 493              		.loc 1 118 1 view .LVU106
 494 000a 7047     		bx	lr
 495              	.L38:
 496              		.align	2
 497              	.L37:
 498 000c 00040240 		.word	1073873920
 499              		.cfi_endproc
 500              	.LFE140:
 502              		.section	.text.sdaDown,"ax",%progbits
 503              		.align	1
 504              		.global	sdaDown
 505              		.syntax unified
 506              		.thumb
 507              		.thumb_func
 508              		.fpu fpv4-sp-d16
 510              	sdaDown:
 511              	.LFB141:
 119:main.c        **** 
 120:main.c        **** void sdaDown() {
 512              		.loc 1 120 16 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 121:main.c        ****     GPIOB->BSRR |= GPIO_BSRR_BR9;
 517              		.loc 1 121 5 view .LVU108
 518              		.loc 1 121 17 is_stmt 0 view .LVU109
 519 0000 024A     		ldr	r2, .L40
 520 0002 9369     		ldr	r3, [r2, #24]
 521 0004 43F00073 		orr	r3, r3, #33554432
 522 0008 9361     		str	r3, [r2, #24]
 122:main.c        **** }
 523              		.loc 1 122 1 view .LVU110
ARM GAS  /tmp/ccV3uvSK.s 			page 12


 524 000a 7047     		bx	lr
 525              	.L41:
 526              		.align	2
 527              	.L40:
 528 000c 00040240 		.word	1073873920
 529              		.cfi_endproc
 530              	.LFE141:
 532              		.section	.text.strlen,"ax",%progbits
 533              		.align	1
 534              		.global	strlen
 535              		.syntax unified
 536              		.thumb
 537              		.thumb_func
 538              		.fpu fpv4-sp-d16
 540              	strlen:
 541              	.LVL5:
 542              	.LFB142:
 123:main.c        **** 
 124:main.c        **** int strlen(const char* string) {
 543              		.loc 1 124 32 is_stmt 1 view -0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548              		.loc 1 124 32 is_stmt 0 view .LVU112
 549 0000 0146     		mov	r1, r0
 125:main.c        **** 
 126:main.c        ****     int length = 0;
 550              		.loc 1 126 5 is_stmt 1 view .LVU113
 551              	.LVL6:
 127:main.c        ****     for(int i = 0; string[i] !=0; i++) {
 552              		.loc 1 127 5 view .LVU114
 553              	.LBB9:
 554              		.loc 1 127 9 view .LVU115
 555              		.loc 1 127 13 is_stmt 0 view .LVU116
 556 0002 0023     		movs	r3, #0
 557              	.LBE9:
 126:main.c        ****     for(int i = 0; string[i] !=0; i++) {
 558              		.loc 1 126 9 view .LVU117
 559 0004 1846     		mov	r0, r3
 560              	.LVL7:
 561              	.L43:
 562              	.LBB10:
 563              		.loc 1 127 20 is_stmt 1 discriminator 1 view .LVU118
 564              		.loc 1 127 26 is_stmt 0 discriminator 1 view .LVU119
 565 0006 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 566              		.loc 1 127 5 discriminator 1 view .LVU120
 567 0008 12B1     		cbz	r2, .L45
 128:main.c        ****         length++;
 568              		.loc 1 128 9 is_stmt 1 discriminator 3 view .LVU121
 569              		.loc 1 128 15 is_stmt 0 discriminator 3 view .LVU122
 570 000a 0130     		adds	r0, r0, #1
 571              	.LVL8:
 127:main.c        ****     for(int i = 0; string[i] !=0; i++) {
 572              		.loc 1 127 35 is_stmt 1 discriminator 3 view .LVU123
 127:main.c        ****     for(int i = 0; string[i] !=0; i++) {
 573              		.loc 1 127 36 is_stmt 0 discriminator 3 view .LVU124
ARM GAS  /tmp/ccV3uvSK.s 			page 13


 574 000c 0133     		adds	r3, r3, #1
 575              	.LVL9:
 127:main.c        ****     for(int i = 0; string[i] !=0; i++) {
 576              		.loc 1 127 36 discriminator 3 view .LVU125
 577 000e FAE7     		b	.L43
 578              	.L45:
 127:main.c        ****     for(int i = 0; string[i] !=0; i++) {
 579              		.loc 1 127 36 discriminator 3 view .LVU126
 580              	.LBE10:
 129:main.c        ****     }
 130:main.c        ****     return length;
 131:main.c        **** 
 132:main.c        **** }
 581              		.loc 1 132 1 view .LVU127
 582 0010 7047     		bx	lr
 583              		.cfi_endproc
 584              	.LFE142:
 586              		.section	.rodata.itoa.str1.4,"aMS",%progbits,1
 587              		.align	2
 588              	.LC0:
 589 0000 3000     		.ascii	"0\000"
 590              		.section	.text.itoa,"ax",%progbits
 591              		.align	1
 592              		.global	itoa
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu fpv4-sp-d16
 598              	itoa:
 599              	.LVL10:
 600              	.LFB143:
 133:main.c        **** 
 134:main.c        **** char itoa_output[MAX_ITOA_OUTPUT_LENGTH];
 135:main.c        **** 
 136:main.c        **** char* itoa(int value) {
 601              		.loc 1 136 23 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 137:main.c        **** 
 138:main.c        ****     if(value == 0) return "0";
 606              		.loc 1 138 5 view .LVU129
 607              		.loc 1 138 7 is_stmt 0 view .LVU130
 608 0000 D8B1     		cbz	r0, .L53
 609 0002 0246     		mov	r2, r0
 139:main.c        **** 
 140:main.c        ****     int n = 0;
 610              		.loc 1 140 5 is_stmt 1 view .LVU131
 611              	.LVL11:
 141:main.c        ****     if(value < 0) {
 612              		.loc 1 141 5 view .LVU132
 613              		.loc 1 141 7 is_stmt 0 view .LVU133
 614 0004 0028     		cmp	r0, #0
 615 0006 12DB     		blt	.L61
 140:main.c        ****     if(value < 0) {
 616              		.loc 1 140 9 view .LVU134
ARM GAS  /tmp/ccV3uvSK.s 			page 14


 617 0008 0021     		movs	r1, #0
 618              	.LVL12:
 619              	.L49:
 142:main.c        ****         value *= -1;
 143:main.c        ****         itoa_output[n] = '-';
 144:main.c        ****         n++;
 145:main.c        ****     }
 146:main.c        **** 
 147:main.c        ****     while(value != 0) {
 620              		.loc 1 147 10 is_stmt 1 view .LVU135
 621 000a C2B1     		cbz	r2, .L62
 148:main.c        ****         itoa_output[n] = value % 10 + 48;
 622              		.loc 1 148 9 view .LVU136
 623              		.loc 1 148 32 is_stmt 0 view .LVU137
 624 000c 1748     		ldr	r0, .L64
 625 000e 80FB0230 		smull	r3, r0, r0, r2
 626 0012 D317     		asrs	r3, r2, #31
 627 0014 C3EBA003 		rsb	r3, r3, r0, asr #2
 628 0018 1846     		mov	r0, r3
 629 001a 03EB8303 		add	r3, r3, r3, lsl #2
 630 001e A2EB4303 		sub	r3, r2, r3, lsl #1
 631              		.loc 1 148 37 view .LVU138
 632 0022 3033     		adds	r3, r3, #48
 633              		.loc 1 148 24 view .LVU139
 634 0024 124A     		ldr	r2, .L64+4
 635              	.LVL13:
 636              		.loc 1 148 24 view .LVU140
 637 0026 5354     		strb	r3, [r2, r1]
 149:main.c        ****         value /= 10;
 638              		.loc 1 149 9 is_stmt 1 view .LVU141
 639              		.loc 1 149 15 is_stmt 0 view .LVU142
 640 0028 0246     		mov	r2, r0
 641              	.LVL14:
 150:main.c        ****         n++;
 642              		.loc 1 150 9 is_stmt 1 view .LVU143
 643              		.loc 1 150 10 is_stmt 0 view .LVU144
 644 002a 0131     		adds	r1, r1, #1
 645              	.LVL15:
 646              		.loc 1 150 10 view .LVU145
 647 002c EDE7     		b	.L49
 648              	.LVL16:
 649              	.L61:
 142:main.c        ****         itoa_output[n] = '-';
 650              		.loc 1 142 9 is_stmt 1 view .LVU146
 142:main.c        ****         itoa_output[n] = '-';
 651              		.loc 1 142 15 is_stmt 0 view .LVU147
 652 002e 4242     		rsbs	r2, r0, #0
 653              	.LVL17:
 143:main.c        ****         n++;
 654              		.loc 1 143 9 is_stmt 1 view .LVU148
 143:main.c        ****         n++;
 655              		.loc 1 143 24 is_stmt 0 view .LVU149
 656 0030 0F4B     		ldr	r3, .L64+4
 657 0032 2D21     		movs	r1, #45
 658 0034 1970     		strb	r1, [r3]
 144:main.c        ****     }
 659              		.loc 1 144 9 is_stmt 1 view .LVU150
ARM GAS  /tmp/ccV3uvSK.s 			page 15


 660              	.LVL18:
 144:main.c        ****     }
 661              		.loc 1 144 10 is_stmt 0 view .LVU151
 662 0036 0121     		movs	r1, #1
 663 0038 E7E7     		b	.L49
 664              	.LVL19:
 665              	.L53:
 138:main.c        **** 
 666              		.loc 1 138 27 view .LVU152
 667 003a 0E48     		ldr	r0, .L64+8
 668              	.LVL20:
 138:main.c        **** 
 669              		.loc 1 138 27 view .LVU153
 670 003c 7047     		bx	lr
 671              	.LVL21:
 672              	.L62:
 151:main.c        ****     }
 152:main.c        **** 
 153:main.c        ****     itoa_output[n] ='\0';
 673              		.loc 1 153 5 is_stmt 1 view .LVU154
 674              		.loc 1 153 20 is_stmt 0 view .LVU155
 675 003e 0C4B     		ldr	r3, .L64+4
 676 0040 0020     		movs	r0, #0
 677 0042 5854     		strb	r0, [r3, r1]
 154:main.c        **** 
 155:main.c        ****     int i = 0, j = n - 1; // reverse
 678              		.loc 1 155 5 is_stmt 1 view .LVU156
 679              	.LVL22:
 680              		.loc 1 155 16 is_stmt 0 view .LVU157
 681 0044 4B1E     		subs	r3, r1, #1
 682              	.LVL23:
 156:main.c        ****     char buffer;
 683              		.loc 1 156 5 is_stmt 1 view .LVU158
 157:main.c        **** 
 158:main.c        ****     while (i < j) {
 684              		.loc 1 158 5 view .LVU159
 685              		.loc 1 158 11 view .LVU160
 686 0046 9A42     		cmp	r2, r3
 687 0048 0DDA     		bge	.L63
 136:main.c        **** 
 688              		.loc 1 136 23 is_stmt 0 view .LVU161
 689 004a 10B4     		push	{r4}
 690              	.LCFI0:
 691              		.cfi_def_cfa_offset 4
 692              		.cfi_offset 4, -4
 693              	.LVL24:
 694              	.L52:
 159:main.c        ****         buffer = itoa_output[i];
 695              		.loc 1 159 9 is_stmt 1 view .LVU162
 696              		.loc 1 159 16 is_stmt 0 view .LVU163
 697 004c 0849     		ldr	r1, .L64+4
 698 004e 885C     		ldrb	r0, [r1, r2]	@ zero_extendqisi2
 699              	.LVL25:
 160:main.c        ****         itoa_output[i] = itoa_output[j];
 700              		.loc 1 160 9 is_stmt 1 view .LVU164
 701              		.loc 1 160 37 is_stmt 0 view .LVU165
 702 0050 CC5C     		ldrb	r4, [r1, r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccV3uvSK.s 			page 16


 703              		.loc 1 160 24 view .LVU166
 704 0052 8C54     		strb	r4, [r1, r2]
 161:main.c        ****         itoa_output[j] = buffer;
 705              		.loc 1 161 9 is_stmt 1 view .LVU167
 706              		.loc 1 161 24 is_stmt 0 view .LVU168
 707 0054 C854     		strb	r0, [r1, r3]
 162:main.c        ****         i++;
 708              		.loc 1 162 9 is_stmt 1 view .LVU169
 709              		.loc 1 162 10 is_stmt 0 view .LVU170
 710 0056 0132     		adds	r2, r2, #1
 711              	.LVL26:
 163:main.c        ****         j--;
 712              		.loc 1 163 9 is_stmt 1 view .LVU171
 713              		.loc 1 163 10 is_stmt 0 view .LVU172
 714 0058 013B     		subs	r3, r3, #1
 715              	.LVL27:
 158:main.c        ****         buffer = itoa_output[i];
 716              		.loc 1 158 11 is_stmt 1 view .LVU173
 717 005a 9A42     		cmp	r2, r3
 718 005c F6DB     		blt	.L52
 164:main.c        ****     }
 165:main.c        **** 
 166:main.c        ****     return itoa_output;
 719              		.loc 1 166 12 is_stmt 0 view .LVU174
 720 005e 0448     		ldr	r0, .L64+4
 721              	.LVL28:
 167:main.c        **** 
 168:main.c        **** }
 722              		.loc 1 168 1 view .LVU175
 723 0060 5DF8044B 		ldr	r4, [sp], #4
 724              	.LCFI1:
 725              		.cfi_restore 4
 726              		.cfi_def_cfa_offset 0
 727 0064 7047     		bx	lr
 728              	.LVL29:
 729              	.L63:
 166:main.c        **** 
 730              		.loc 1 166 12 view .LVU176
 731 0066 0248     		ldr	r0, .L64+4
 732              		.loc 1 168 1 view .LVU177
 733 0068 7047     		bx	lr
 734              	.L65:
 735 006a 00BF     		.align	2
 736              	.L64:
 737 006c 67666666 		.word	1717986919
 738 0070 00000000 		.word	itoa_output
 739 0074 00000000 		.word	.LC0
 740              		.cfi_endproc
 741              	.LFE143:
 743              		.section	.text.sendStartCondition,"ax",%progbits
 744              		.align	1
 745              		.global	sendStartCondition
 746              		.syntax unified
 747              		.thumb
 748              		.thumb_func
 749              		.fpu fpv4-sp-d16
 751              	sendStartCondition:
ARM GAS  /tmp/ccV3uvSK.s 			page 17


 752              	.LFB144:
 169:main.c        **** 
 170:main.c        **** void sendStartCondition() {
 753              		.loc 1 170 27 is_stmt 1 view -0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757 0000 10B5     		push	{r4, lr}
 758              	.LCFI2:
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 4, -8
 761              		.cfi_offset 14, -4
 171:main.c        **** 
 172:main.c        ****     sdaUp();
 762              		.loc 1 172 5 view .LVU179
 763 0002 FFF7FEFF 		bl	sdaUp
 764              	.LVL30:
 173:main.c        ****     clkUp();
 765              		.loc 1 173 5 view .LVU180
 766 0006 FFF7FEFF 		bl	clkUp
 767              	.LVL31:
 174:main.c        ****     delayMcs(delvalue);
 768              		.loc 1 174 5 view .LVU181
 769 000a 074C     		ldr	r4, .L68
 770 000c 2068     		ldr	r0, [r4]
 771 000e FFF7FEFF 		bl	delayMcs
 772              	.LVL32:
 175:main.c        **** 
 176:main.c        ****     sdaDown();
 773              		.loc 1 176 5 view .LVU182
 774 0012 FFF7FEFF 		bl	sdaDown
 775              	.LVL33:
 177:main.c        ****     delayMcs(delvalue);
 776              		.loc 1 177 5 view .LVU183
 777 0016 2068     		ldr	r0, [r4]
 778 0018 FFF7FEFF 		bl	delayMcs
 779              	.LVL34:
 178:main.c        ****     clkDown();
 780              		.loc 1 178 5 view .LVU184
 781 001c FFF7FEFF 		bl	clkDown
 782              	.LVL35:
 179:main.c        ****     delayMcs(delvalue);
 783              		.loc 1 179 5 view .LVU185
 784 0020 2068     		ldr	r0, [r4]
 785 0022 FFF7FEFF 		bl	delayMcs
 786              	.LVL36:
 180:main.c        **** 
 181:main.c        **** }
 787              		.loc 1 181 1 is_stmt 0 view .LVU186
 788 0026 10BD     		pop	{r4, pc}
 789              	.L69:
 790              		.align	2
 791              	.L68:
 792 0028 00000000 		.word	.LANCHOR1
 793              		.cfi_endproc
 794              	.LFE144:
 796              		.section	.text.sendStopCondition,"ax",%progbits
ARM GAS  /tmp/ccV3uvSK.s 			page 18


 797              		.align	1
 798              		.global	sendStopCondition
 799              		.syntax unified
 800              		.thumb
 801              		.thumb_func
 802              		.fpu fpv4-sp-d16
 804              	sendStopCondition:
 805              	.LFB145:
 182:main.c        **** 
 183:main.c        **** void sendStopCondition() {
 806              		.loc 1 183 26 is_stmt 1 view -0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 0, uses_anonymous_args = 0
 810 0000 10B5     		push	{r4, lr}
 811              	.LCFI3:
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 4, -8
 814              		.cfi_offset 14, -4
 184:main.c        **** 
 185:main.c        ****     clkUp();
 815              		.loc 1 185 5 view .LVU188
 816 0002 FFF7FEFF 		bl	clkUp
 817              	.LVL37:
 186:main.c        ****     delayMcs(delvalue);
 818              		.loc 1 186 5 view .LVU189
 819 0006 054C     		ldr	r4, .L72
 820 0008 2068     		ldr	r0, [r4]
 821 000a FFF7FEFF 		bl	delayMcs
 822              	.LVL38:
 187:main.c        ****     sdaUp();
 823              		.loc 1 187 5 view .LVU190
 824 000e FFF7FEFF 		bl	sdaUp
 825              	.LVL39:
 188:main.c        ****     delayMcs(delvalue);
 826              		.loc 1 188 5 view .LVU191
 827 0012 2068     		ldr	r0, [r4]
 828 0014 FFF7FEFF 		bl	delayMcs
 829              	.LVL40:
 189:main.c        **** 
 190:main.c        **** }
 830              		.loc 1 190 1 is_stmt 0 view .LVU192
 831 0018 10BD     		pop	{r4, pc}
 832              	.L73:
 833 001a 00BF     		.align	2
 834              	.L72:
 835 001c 00000000 		.word	.LANCHOR1
 836              		.cfi_endproc
 837              	.LFE145:
 839              		.section	.text.sendBit,"ax",%progbits
 840              		.align	1
 841              		.global	sendBit
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 845              		.fpu fpv4-sp-d16
 847              	sendBit:
ARM GAS  /tmp/ccV3uvSK.s 			page 19


 848              	.LVL41:
 849              	.LFB146:
 191:main.c        **** 
 192:main.c        **** void sendBit(bool bit) {
 850              		.loc 1 192 24 is_stmt 1 view -0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854              		.loc 1 192 24 is_stmt 0 view .LVU194
 855 0000 10B5     		push	{r4, lr}
 856              	.LCFI4:
 857              		.cfi_def_cfa_offset 8
 858              		.cfi_offset 4, -8
 859              		.cfi_offset 14, -4
 193:main.c        **** 
 194:main.c        ****     if(bit) { sdaUp(); }
 860              		.loc 1 194 5 is_stmt 1 view .LVU195
 861              		.loc 1 194 7 is_stmt 0 view .LVU196
 862 0002 80B1     		cbz	r0, .L75
 863              		.loc 1 194 15 is_stmt 1 discriminator 1 view .LVU197
 864 0004 FFF7FEFF 		bl	sdaUp
 865              	.LVL42:
 866              	.L76:
 195:main.c        ****     else { sdaDown(); }
 196:main.c        ****     delayMcs(delvalue);
 867              		.loc 1 196 5 view .LVU198
 868 0008 084C     		ldr	r4, .L78
 869 000a 2068     		ldr	r0, [r4]
 870 000c FFF7FEFF 		bl	delayMcs
 871              	.LVL43:
 197:main.c        ****     clkUp();
 872              		.loc 1 197 5 view .LVU199
 873 0010 FFF7FEFF 		bl	clkUp
 874              	.LVL44:
 198:main.c        ****     delayMcs(delvalue);
 875              		.loc 1 198 5 view .LVU200
 876 0014 2068     		ldr	r0, [r4]
 877 0016 FFF7FEFF 		bl	delayMcs
 878              	.LVL45:
 199:main.c        ****     clkDown();
 879              		.loc 1 199 5 view .LVU201
 880 001a FFF7FEFF 		bl	clkDown
 881              	.LVL46:
 200:main.c        ****     delayMcs(delvalue);
 882              		.loc 1 200 5 view .LVU202
 883 001e 2068     		ldr	r0, [r4]
 884 0020 FFF7FEFF 		bl	delayMcs
 885              	.LVL47:
 201:main.c        **** 
 202:main.c        **** }
 886              		.loc 1 202 1 is_stmt 0 view .LVU203
 887 0024 10BD     		pop	{r4, pc}
 888              	.LVL48:
 889              	.L75:
 195:main.c        ****     delayMcs(delvalue);
 890              		.loc 1 195 12 is_stmt 1 view .LVU204
 891 0026 FFF7FEFF 		bl	sdaDown
ARM GAS  /tmp/ccV3uvSK.s 			page 20


 892              	.LVL49:
 195:main.c        ****     delayMcs(delvalue);
 893              		.loc 1 195 12 is_stmt 0 view .LVU205
 894 002a EDE7     		b	.L76
 895              	.L79:
 896              		.align	2
 897              	.L78:
 898 002c 00000000 		.word	.LANCHOR1
 899              		.cfi_endproc
 900              	.LFE146:
 902              		.section	.text.sendByte,"ax",%progbits
 903              		.align	1
 904              		.global	sendByte
 905              		.syntax unified
 906              		.thumb
 907              		.thumb_func
 908              		.fpu fpv4-sp-d16
 910              	sendByte:
 911              	.LVL50:
 912              	.LFB147:
 203:main.c        **** 
 204:main.c        **** void sendByte(uint8_t byte) {
 913              		.loc 1 204 29 is_stmt 1 view -0
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 0
 916              		@ frame_needed = 0, uses_anonymous_args = 0
 917              		.loc 1 204 29 is_stmt 0 view .LVU207
 918 0000 38B5     		push	{r3, r4, r5, lr}
 919              	.LCFI5:
 920              		.cfi_def_cfa_offset 16
 921              		.cfi_offset 3, -16
 922              		.cfi_offset 4, -12
 923              		.cfi_offset 5, -8
 924              		.cfi_offset 14, -4
 925 0002 0546     		mov	r5, r0
 205:main.c        **** 
 206:main.c        ****     for(int i = 7; i >= 0; i--) {
 926              		.loc 1 206 5 is_stmt 1 view .LVU208
 927              	.LBB11:
 928              		.loc 1 206 9 view .LVU209
 929              	.LVL51:
 930              		.loc 1 206 13 is_stmt 0 view .LVU210
 931 0004 0724     		movs	r4, #7
 932              		.loc 1 206 5 view .LVU211
 933 0006 06E0     		b	.L81
 934              	.LVL52:
 935              	.L82:
 207:main.c        ****         sendBit((byte >> i) & 1);
 936              		.loc 1 207 9 is_stmt 1 discriminator 3 view .LVU212
 937              		.loc 1 207 23 is_stmt 0 discriminator 3 view .LVU213
 938 0008 45FA04F0 		asr	r0, r5, r4
 939              		.loc 1 207 9 discriminator 3 view .LVU214
 940 000c 00F00100 		and	r0, r0, #1
 941 0010 FFF7FEFF 		bl	sendBit
 942              	.LVL53:
 206:main.c        ****         sendBit((byte >> i) & 1);
 943              		.loc 1 206 28 is_stmt 1 discriminator 3 view .LVU215
ARM GAS  /tmp/ccV3uvSK.s 			page 21


 206:main.c        ****         sendBit((byte >> i) & 1);
 944              		.loc 1 206 29 is_stmt 0 discriminator 3 view .LVU216
 945 0014 013C     		subs	r4, r4, #1
 946              	.LVL54:
 947              	.L81:
 206:main.c        ****         sendBit((byte >> i) & 1);
 948              		.loc 1 206 20 is_stmt 1 discriminator 1 view .LVU217
 206:main.c        ****         sendBit((byte >> i) & 1);
 949              		.loc 1 206 5 is_stmt 0 discriminator 1 view .LVU218
 950 0016 002C     		cmp	r4, #0
 951 0018 F6DA     		bge	.L82
 952              	.LBE11:
 208:main.c        ****     }
 209:main.c        ****     delayMcs(delvalue);
 953              		.loc 1 209 5 is_stmt 1 view .LVU219
 954 001a 024B     		ldr	r3, .L84
 955 001c 1868     		ldr	r0, [r3]
 956 001e FFF7FEFF 		bl	delayMcs
 957              	.LVL55:
 210:main.c        **** 
 211:main.c        **** }
 958              		.loc 1 211 1 is_stmt 0 view .LVU220
 959 0022 38BD     		pop	{r3, r4, r5, pc}
 960              	.LVL56:
 961              	.L85:
 962              		.loc 1 211 1 view .LVU221
 963              		.align	2
 964              	.L84:
 965 0024 00000000 		.word	.LANCHOR1
 966              		.cfi_endproc
 967              	.LFE147:
 969              		.section	.text.readBit,"ax",%progbits
 970              		.align	1
 971              		.global	readBit
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 975              		.fpu fpv4-sp-d16
 977              	readBit:
 978              	.LFB148:
 212:main.c        **** 
 213:main.c        **** bool readBit() {
 979              		.loc 1 213 16 is_stmt 1 view -0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983 0000 38B5     		push	{r3, r4, r5, lr}
 984              	.LCFI6:
 985              		.cfi_def_cfa_offset 16
 986              		.cfi_offset 3, -16
 987              		.cfi_offset 4, -12
 988              		.cfi_offset 5, -8
 989              		.cfi_offset 14, -4
 214:main.c        **** 
 215:main.c        ****     bool bit;
 990              		.loc 1 215 5 view .LVU223
 216:main.c        **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 22


 217:main.c        ****     clkUp();
 991              		.loc 1 217 5 view .LVU224
 992 0002 FFF7FEFF 		bl	clkUp
 993              	.LVL57:
 218:main.c        ****     delayMcs(delvalue);
 994              		.loc 1 218 5 view .LVU225
 995 0006 084D     		ldr	r5, .L88
 996 0008 2868     		ldr	r0, [r5]
 997 000a FFF7FEFF 		bl	delayMcs
 998              	.LVL58:
 219:main.c        ****     bit = ((GPIOB->IDR & GPIO_IDR_ID9) >> 9);
 999              		.loc 1 219 5 view .LVU226
 1000              		.loc 1 219 18 is_stmt 0 view .LVU227
 1001 000e 074B     		ldr	r3, .L88+4
 1002 0010 1869     		ldr	r0, [r3, #16]
 1003              		.loc 1 219 40 view .LVU228
 1004 0012 C0F34020 		ubfx	r0, r0, #9, #1
 1005              		.loc 1 219 9 view .LVU229
 1006 0016 C4B2     		uxtb	r4, r0
 1007              	.LVL59:
 220:main.c        ****     clkDown();
 1008              		.loc 1 220 5 is_stmt 1 view .LVU230
 1009 0018 FFF7FEFF 		bl	clkDown
 1010              	.LVL60:
 221:main.c        ****     delayMcs(delvalue);
 1011              		.loc 1 221 5 view .LVU231
 1012 001c 2868     		ldr	r0, [r5]
 1013 001e FFF7FEFF 		bl	delayMcs
 1014              	.LVL61:
 222:main.c        **** 
 223:main.c        ****     return bit;
 1015              		.loc 1 223 5 view .LVU232
 224:main.c        **** 
 225:main.c        **** }
 1016              		.loc 1 225 1 is_stmt 0 view .LVU233
 1017 0022 2046     		mov	r0, r4
 1018 0024 38BD     		pop	{r3, r4, r5, pc}
 1019              	.LVL62:
 1020              	.L89:
 1021              		.loc 1 225 1 view .LVU234
 1022 0026 00BF     		.align	2
 1023              	.L88:
 1024 0028 00000000 		.word	.LANCHOR1
 1025 002c 00040240 		.word	1073873920
 1026              		.cfi_endproc
 1027              	.LFE148:
 1029              		.section	.text.readByte,"ax",%progbits
 1030              		.align	1
 1031              		.global	readByte
 1032              		.syntax unified
 1033              		.thumb
 1034              		.thumb_func
 1035              		.fpu fpv4-sp-d16
 1037              	readByte:
 1038              	.LFB149:
 226:main.c        **** 
 227:main.c        **** uint8_t readByte() {
ARM GAS  /tmp/ccV3uvSK.s 			page 23


 1039              		.loc 1 227 20 is_stmt 1 view -0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 0
 1042              		@ frame_needed = 0, uses_anonymous_args = 0
 1043 0000 38B5     		push	{r3, r4, r5, lr}
 1044              	.LCFI7:
 1045              		.cfi_def_cfa_offset 16
 1046              		.cfi_offset 3, -16
 1047              		.cfi_offset 4, -12
 1048              		.cfi_offset 5, -8
 1049              		.cfi_offset 14, -4
 228:main.c        **** 
 229:main.c        ****     uint8_t byte = 0;
 1050              		.loc 1 229 5 view .LVU236
 1051              	.LVL63:
 230:main.c        **** 
 231:main.c        ****     for(int i = 7; i >= 0; i--) {
 1052              		.loc 1 231 5 view .LVU237
 1053              	.LBB12:
 1054              		.loc 1 231 9 view .LVU238
 1055              		.loc 1 231 13 is_stmt 0 view .LVU239
 1056 0002 0725     		movs	r5, #7
 1057              	.LBE12:
 229:main.c        **** 
 1058              		.loc 1 229 13 view .LVU240
 1059 0004 0024     		movs	r4, #0
 1060              	.LBB13:
 1061              		.loc 1 231 5 view .LVU241
 1062 0006 00E0     		b	.L91
 1063              	.LVL64:
 1064              	.L92:
 1065              		.loc 1 231 28 is_stmt 1 discriminator 2 view .LVU242
 1066              		.loc 1 231 29 is_stmt 0 discriminator 2 view .LVU243
 1067 0008 013D     		subs	r5, r5, #1
 1068              	.LVL65:
 1069              	.L91:
 1070              		.loc 1 231 20 is_stmt 1 discriminator 1 view .LVU244
 1071              		.loc 1 231 5 is_stmt 0 discriminator 1 view .LVU245
 1072 000a 002D     		cmp	r5, #0
 1073 000c 08DB     		blt	.L95
 232:main.c        ****         byte *= 2;
 1074              		.loc 1 232 9 is_stmt 1 view .LVU246
 1075              		.loc 1 232 14 is_stmt 0 view .LVU247
 1076 000e 6400     		lsls	r4, r4, #1
 1077              	.LVL66:
 1078              		.loc 1 232 14 view .LVU248
 1079 0010 E4B2     		uxtb	r4, r4
 1080              	.LVL67:
 233:main.c        ****         if(readBit()) { byte += 1; }
 1081              		.loc 1 233 9 is_stmt 1 view .LVU249
 1082              		.loc 1 233 12 is_stmt 0 view .LVU250
 1083 0012 FFF7FEFF 		bl	readBit
 1084              	.LVL68:
 1085              		.loc 1 233 11 view .LVU251
 1086 0016 0028     		cmp	r0, #0
 1087 0018 F6D0     		beq	.L92
 1088              		.loc 1 233 25 is_stmt 1 discriminator 1 view .LVU252
ARM GAS  /tmp/ccV3uvSK.s 			page 24


 1089              		.loc 1 233 30 is_stmt 0 discriminator 1 view .LVU253
 1090 001a 0134     		adds	r4, r4, #1
 1091              	.LVL69:
 1092              		.loc 1 233 30 discriminator 1 view .LVU254
 1093 001c E4B2     		uxtb	r4, r4
 1094              	.LVL70:
 1095              		.loc 1 233 30 discriminator 1 view .LVU255
 1096 001e F3E7     		b	.L92
 1097              	.L95:
 1098              		.loc 1 233 30 discriminator 1 view .LVU256
 1099              	.LBE13:
 234:main.c        ****         else { byte += 0; }
 235:main.c        ****     }
 236:main.c        ****     delayMcs(delvalue);
 1100              		.loc 1 236 5 is_stmt 1 view .LVU257
 1101 0020 024B     		ldr	r3, .L96
 1102 0022 1868     		ldr	r0, [r3]
 1103 0024 FFF7FEFF 		bl	delayMcs
 1104              	.LVL71:
 237:main.c        **** 
 238:main.c        ****     return byte;
 1105              		.loc 1 238 5 view .LVU258
 239:main.c        **** 
 240:main.c        **** }
 1106              		.loc 1 240 1 is_stmt 0 view .LVU259
 1107 0028 2046     		mov	r0, r4
 1108 002a 38BD     		pop	{r3, r4, r5, pc}
 1109              	.LVL72:
 1110              	.L97:
 1111              		.loc 1 240 1 view .LVU260
 1112              		.align	2
 1113              	.L96:
 1114 002c 00000000 		.word	.LANCHOR1
 1115              		.cfi_endproc
 1116              	.LFE149:
 1118              		.section	.text.M24C16RandomAdddressRead,"ax",%progbits
 1119              		.align	1
 1120              		.global	M24C16RandomAdddressRead
 1121              		.syntax unified
 1122              		.thumb
 1123              		.thumb_func
 1124              		.fpu fpv4-sp-d16
 1126              	M24C16RandomAdddressRead:
 1127              	.LVL73:
 1128              	.LFB150:
 241:main.c        **** 
 242:main.c        **** uint8_t M24C16RandomAdddressRead(uint16_t address) {
 1129              		.loc 1 242 52 is_stmt 1 view -0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              		.loc 1 242 52 is_stmt 0 view .LVU262
 1134 0000 10B5     		push	{r4, lr}
 1135              	.LCFI8:
 1136              		.cfi_def_cfa_offset 8
 1137              		.cfi_offset 4, -8
 1138              		.cfi_offset 14, -4
ARM GAS  /tmp/ccV3uvSK.s 			page 25


 243:main.c        **** 
 244:main.c        ****     if(address_invalid(address)) { sendViaUsart(errorInvalidAddress); return 0; }
 1139              		.loc 1 244 5 is_stmt 1 view .LVU263
 1140              		.loc 1 244 7 is_stmt 0 view .LVU264
 1141 0002 B0F5006F 		cmp	r0, #2048
 1142 0006 2FD2     		bcs	.L102
 1143 0008 0446     		mov	r4, r0
 245:main.c        **** 
 246:main.c        ****     uint8_t byte = 0;
 1144              		.loc 1 246 5 is_stmt 1 view .LVU265
 1145              	.LVL74:
 247:main.c        **** 
 248:main.c        ****     sendStartCondition();
 1146              		.loc 1 248 5 view .LVU266
 1147 000a FFF7FEFF 		bl	sendStartCondition
 1148              	.LVL75:
 249:main.c        **** 
 250:main.c        ****     sendByte(device_select_with_address_bits(OPCODE_WRITE,address));
 1149              		.loc 1 250 5 view .LVU267
 1150              		.loc 1 250 14 is_stmt 0 view .LVU268
 1151 000e 200A     		lsrs	r0, r4, #8
 1152 0010 4000     		lsls	r0, r0, #1
 1153 0012 00F00E00 		and	r0, r0, #14
 1154              		.loc 1 250 5 view .LVU269
 1155 0016 40F0A000 		orr	r0, r0, #160
 1156 001a FFF7FEFF 		bl	sendByte
 1157              	.LVL76:
 251:main.c        ****     sendBit(ACK);
 1158              		.loc 1 251 5 is_stmt 1 view .LVU270
 1159 001e 0020     		movs	r0, #0
 1160 0020 FFF7FEFF 		bl	sendBit
 1161              	.LVL77:
 252:main.c        ****     sendByte(address);
 1162              		.loc 1 252 5 view .LVU271
 1163 0024 E0B2     		uxtb	r0, r4
 1164 0026 FFF7FEFF 		bl	sendByte
 1165              	.LVL78:
 253:main.c        ****     sendBit(ACK);
 1166              		.loc 1 253 5 view .LVU272
 1167 002a 0020     		movs	r0, #0
 1168 002c FFF7FEFF 		bl	sendBit
 1169              	.LVL79:
 254:main.c        ****     sendByte(DUMMY_BYTE);
 1170              		.loc 1 254 5 view .LVU273
 1171 0030 FF20     		movs	r0, #255
 1172 0032 FFF7FEFF 		bl	sendByte
 1173              	.LVL80:
 255:main.c        ****     sendBit(ACK);
 1174              		.loc 1 255 5 view .LVU274
 1175 0036 0020     		movs	r0, #0
 1176 0038 FFF7FEFF 		bl	sendBit
 1177              	.LVL81:
 256:main.c        **** 
 257:main.c        ****     sendStartCondition();
 1178              		.loc 1 257 5 view .LVU275
 1179 003c FFF7FEFF 		bl	sendStartCondition
 1180              	.LVL82:
ARM GAS  /tmp/ccV3uvSK.s 			page 26


 258:main.c        **** 
 259:main.c        ****     sendByte(OPCODE_READ);
 1181              		.loc 1 259 5 view .LVU276
 1182 0040 A120     		movs	r0, #161
 1183 0042 FFF7FEFF 		bl	sendByte
 1184              	.LVL83:
 260:main.c        ****     sendBit(ACK);
 1185              		.loc 1 260 5 view .LVU277
 1186 0046 0020     		movs	r0, #0
 1187 0048 FFF7FEFF 		bl	sendBit
 1188              	.LVL84:
 261:main.c        **** 
 262:main.c        ****     setSdaInput();
 1189              		.loc 1 262 5 view .LVU278
 1190 004c FFF7FEFF 		bl	setSdaInput
 1191              	.LVL85:
 263:main.c        ****     byte = readByte();
 1192              		.loc 1 263 5 view .LVU279
 1193              		.loc 1 263 12 is_stmt 0 view .LVU280
 1194 0050 FFF7FEFF 		bl	readByte
 1195              	.LVL86:
 1196 0054 0446     		mov	r4, r0
 1197              	.LVL87:
 264:main.c        ****     setSdaOutput();
 1198              		.loc 1 264 5 is_stmt 1 view .LVU281
 1199 0056 FFF7FEFF 		bl	setSdaOutput
 1200              	.LVL88:
 265:main.c        ****     sendBit(NO_ACK);
 1201              		.loc 1 265 5 view .LVU282
 1202 005a 0120     		movs	r0, #1
 1203 005c FFF7FEFF 		bl	sendBit
 1204              	.LVL89:
 266:main.c        **** 
 267:main.c        ****     sendStopCondition();
 1205              		.loc 1 267 5 view .LVU283
 1206 0060 FFF7FEFF 		bl	sendStopCondition
 1207              	.LVL90:
 268:main.c        **** 
 269:main.c        ****     return byte;
 1208              		.loc 1 269 5 view .LVU284
 1209              	.L100:
 270:main.c        **** 
 271:main.c        **** }
 1210              		.loc 1 271 1 is_stmt 0 view .LVU285
 1211 0064 2046     		mov	r0, r4
 1212 0066 10BD     		pop	{r4, pc}
 1213              	.LVL91:
 1214              	.L102:
 244:main.c        **** 
 1215              		.loc 1 244 36 is_stmt 1 discriminator 1 view .LVU286
 1216 0068 024B     		ldr	r3, .L103
 1217 006a 1868     		ldr	r0, [r3]
 1218              	.LVL92:
 244:main.c        **** 
 1219              		.loc 1 244 36 is_stmt 0 discriminator 1 view .LVU287
 1220 006c FFF7FEFF 		bl	sendViaUsart
 1221              	.LVL93:
ARM GAS  /tmp/ccV3uvSK.s 			page 27


 244:main.c        **** 
 1222              		.loc 1 244 71 is_stmt 1 discriminator 1 view .LVU288
 244:main.c        **** 
 1223              		.loc 1 244 78 is_stmt 0 discriminator 1 view .LVU289
 1224 0070 0024     		movs	r4, #0
 1225 0072 F7E7     		b	.L100
 1226              	.L104:
 1227              		.align	2
 1228              	.L103:
 1229 0074 00000000 		.word	.LANCHOR2
 1230              		.cfi_endproc
 1231              	.LFE150:
 1233              		.section	.text.M24C16ByteWrite,"ax",%progbits
 1234              		.align	1
 1235              		.global	M24C16ByteWrite
 1236              		.syntax unified
 1237              		.thumb
 1238              		.thumb_func
 1239              		.fpu fpv4-sp-d16
 1241              	M24C16ByteWrite:
 1242              	.LVL94:
 1243              	.LFB151:
 272:main.c        **** 
 273:main.c        **** 
 274:main.c        **** void M24C16ByteWrite(uint16_t address, uint8_t value) {
 1244              		.loc 1 274 55 is_stmt 1 view -0
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 0
 1247              		@ frame_needed = 0, uses_anonymous_args = 0
 1248              		.loc 1 274 55 is_stmt 0 view .LVU291
 1249 0000 38B5     		push	{r3, r4, r5, lr}
 1250              	.LCFI9:
 1251              		.cfi_def_cfa_offset 16
 1252              		.cfi_offset 3, -16
 1253              		.cfi_offset 4, -12
 1254              		.cfi_offset 5, -8
 1255              		.cfi_offset 14, -4
 275:main.c        **** 
 276:main.c        ****     if(address_invalid(address)) { sendViaUsart(errorInvalidAddress); return; }
 1256              		.loc 1 276 5 is_stmt 1 view .LVU292
 1257              		.loc 1 276 7 is_stmt 0 view .LVU293
 1258 0002 B0F5006F 		cmp	r0, #2048
 1259 0006 1DD2     		bcs	.L109
 1260 0008 0446     		mov	r4, r0
 1261 000a 0D46     		mov	r5, r1
 277:main.c        **** 
 278:main.c        ****     sendStartCondition();
 1262              		.loc 1 278 5 is_stmt 1 view .LVU294
 1263 000c FFF7FEFF 		bl	sendStartCondition
 1264              	.LVL95:
 279:main.c        **** 
 280:main.c        ****     sendByte(device_select_with_address_bits(OPCODE_WRITE,address));
 1265              		.loc 1 280 5 view .LVU295
 1266              		.loc 1 280 14 is_stmt 0 view .LVU296
 1267 0010 200A     		lsrs	r0, r4, #8
 1268 0012 4000     		lsls	r0, r0, #1
 1269 0014 00F00E00 		and	r0, r0, #14
ARM GAS  /tmp/ccV3uvSK.s 			page 28


 1270              		.loc 1 280 5 view .LVU297
 1271 0018 40F0A000 		orr	r0, r0, #160
 1272 001c FFF7FEFF 		bl	sendByte
 1273              	.LVL96:
 281:main.c        ****     sendBit(ACK);
 1274              		.loc 1 281 5 is_stmt 1 view .LVU298
 1275 0020 0020     		movs	r0, #0
 1276 0022 FFF7FEFF 		bl	sendBit
 1277              	.LVL97:
 282:main.c        ****     sendByte(address);
 1278              		.loc 1 282 5 view .LVU299
 1279 0026 E0B2     		uxtb	r0, r4
 1280 0028 FFF7FEFF 		bl	sendByte
 1281              	.LVL98:
 283:main.c        ****     sendBit(ACK);
 1282              		.loc 1 283 5 view .LVU300
 1283 002c 0020     		movs	r0, #0
 1284 002e FFF7FEFF 		bl	sendBit
 1285              	.LVL99:
 284:main.c        ****     sendByte(value);
 1286              		.loc 1 284 5 view .LVU301
 1287 0032 2846     		mov	r0, r5
 1288 0034 FFF7FEFF 		bl	sendByte
 1289              	.LVL100:
 285:main.c        ****     sendBit(ACK);
 1290              		.loc 1 285 5 view .LVU302
 1291 0038 0020     		movs	r0, #0
 1292 003a FFF7FEFF 		bl	sendBit
 1293              	.LVL101:
 286:main.c        **** 
 287:main.c        ****     sendStopCondition();
 1294              		.loc 1 287 5 view .LVU303
 1295 003e FFF7FEFF 		bl	sendStopCondition
 1296              	.LVL102:
 1297              	.L105:
 288:main.c        **** 
 289:main.c        **** }
 1298              		.loc 1 289 1 is_stmt 0 view .LVU304
 1299 0042 38BD     		pop	{r3, r4, r5, pc}
 1300              	.LVL103:
 1301              	.L109:
 276:main.c        **** 
 1302              		.loc 1 276 36 is_stmt 1 discriminator 1 view .LVU305
 1303 0044 024B     		ldr	r3, .L110
 1304 0046 1868     		ldr	r0, [r3]
 1305              	.LVL104:
 276:main.c        **** 
 1306              		.loc 1 276 36 is_stmt 0 discriminator 1 view .LVU306
 1307 0048 FFF7FEFF 		bl	sendViaUsart
 1308              	.LVL105:
 276:main.c        **** 
 1309              		.loc 1 276 71 is_stmt 1 discriminator 1 view .LVU307
 1310 004c F9E7     		b	.L105
 1311              	.L111:
 1312 004e 00BF     		.align	2
 1313              	.L110:
 1314 0050 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccV3uvSK.s 			page 29


 1315              		.cfi_endproc
 1316              	.LFE151:
 1318              		.section	.text.M24C16Erase,"ax",%progbits
 1319              		.align	1
 1320              		.global	M24C16Erase
 1321              		.syntax unified
 1322              		.thumb
 1323              		.thumb_func
 1324              		.fpu fpv4-sp-d16
 1326              	M24C16Erase:
 1327              	.LVL106:
 1328              	.LFB152:
 290:main.c        **** 
 291:main.c        **** void M24C16Erase(uint16_t address, int range) {
 1329              		.loc 1 291 47 view -0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 1333              		.loc 1 291 47 is_stmt 0 view .LVU309
 1334 0000 70B5     		push	{r4, r5, r6, lr}
 1335              	.LCFI10:
 1336              		.cfi_def_cfa_offset 16
 1337              		.cfi_offset 4, -16
 1338              		.cfi_offset 5, -12
 1339              		.cfi_offset 6, -8
 1340              		.cfi_offset 14, -4
 292:main.c        **** 
 293:main.c        ****     if(address_invalid(address)) { sendViaUsart(errorInvalidAddress); return; }
 1341              		.loc 1 293 5 is_stmt 1 view .LVU310
 1342              		.loc 1 293 7 is_stmt 0 view .LVU311
 1343 0002 B0F5006F 		cmp	r0, #2048
 1344 0006 0BD2     		bcs	.L119
 1345 0008 0446     		mov	r4, r0
 1346 000a 0D46     		mov	r5, r1
 294:main.c        ****     if(range > 2048 - address) { sendViaUsart(errorBeyondMemoryErase); return; }
 1347              		.loc 1 294 5 is_stmt 1 view .LVU312
 1348              		.loc 1 294 21 is_stmt 0 view .LVU313
 1349 000c 0646     		mov	r6, r0
 1350 000e C0F50063 		rsb	r3, r0, #2048
 1351              		.loc 1 294 7 view .LVU314
 1352 0012 8B42     		cmp	r3, r1
 1353 0014 11DA     		bge	.L115
 1354              		.loc 1 294 34 is_stmt 1 discriminator 1 view .LVU315
 1355 0016 0B4B     		ldr	r3, .L120
 1356 0018 1868     		ldr	r0, [r3]
 1357              	.LVL107:
 1358              		.loc 1 294 34 is_stmt 0 discriminator 1 view .LVU316
 1359 001a FFF7FEFF 		bl	sendViaUsart
 1360              	.LVL108:
 1361              		.loc 1 294 72 is_stmt 1 discriminator 1 view .LVU317
 1362 001e 0FE0     		b	.L112
 1363              	.LVL109:
 1364              	.L119:
 293:main.c        ****     if(range > 2048 - address) { sendViaUsart(errorBeyondMemoryErase); return; }
 1365              		.loc 1 293 36 discriminator 1 view .LVU318
 1366 0020 094B     		ldr	r3, .L120+4
 1367 0022 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccV3uvSK.s 			page 30


 1368              	.LVL110:
 293:main.c        ****     if(range > 2048 - address) { sendViaUsart(errorBeyondMemoryErase); return; }
 1369              		.loc 1 293 36 is_stmt 0 discriminator 1 view .LVU319
 1370 0024 FFF7FEFF 		bl	sendViaUsart
 1371              	.LVL111:
 293:main.c        ****     if(range > 2048 - address) { sendViaUsart(errorBeyondMemoryErase); return; }
 1372              		.loc 1 293 71 is_stmt 1 discriminator 1 view .LVU320
 1373 0028 0AE0     		b	.L112
 1374              	.LVL112:
 1375              	.L116:
 1376              	.LBB14:
 295:main.c        **** 
 296:main.c        ****     for(int i = address; i < address + range; i++) {
 297:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1377              		.loc 1 297 9 discriminator 3 view .LVU321
 1378 002a 0020     		movs	r0, #0
 1379 002c FFF7FEFF 		bl	M24C16RandomAdddressRead
 1380              	.LVL113:
 298:main.c        ****         M24C16ByteWrite(i, ERASE_BYTE);
 1381              		.loc 1 298 9 discriminator 3 view .LVU322
 1382 0030 AA21     		movs	r1, #170
 1383 0032 A0B2     		uxth	r0, r4
 1384 0034 FFF7FEFF 		bl	M24C16ByteWrite
 1385              	.LVL114:
 296:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1386              		.loc 1 296 47 discriminator 3 view .LVU323
 296:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1387              		.loc 1 296 48 is_stmt 0 discriminator 3 view .LVU324
 1388 0038 0134     		adds	r4, r4, #1
 1389              	.LVL115:
 1390              	.L115:
 296:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1391              		.loc 1 296 26 is_stmt 1 discriminator 1 view .LVU325
 296:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1392              		.loc 1 296 38 is_stmt 0 discriminator 1 view .LVU326
 1393 003a 7319     		adds	r3, r6, r5
 296:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1394              		.loc 1 296 5 discriminator 1 view .LVU327
 1395 003c A342     		cmp	r3, r4
 1396 003e F4DC     		bgt	.L116
 1397              	.LVL116:
 1398              	.L112:
 296:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1399              		.loc 1 296 5 discriminator 1 view .LVU328
 1400              	.LBE14:
 299:main.c        ****     }
 300:main.c        **** 
 301:main.c        **** }
 1401              		.loc 1 301 1 view .LVU329
 1402 0040 70BD     		pop	{r4, r5, r6, pc}
 1403              	.L121:
 1404 0042 00BF     		.align	2
 1405              	.L120:
 1406 0044 00000000 		.word	.LANCHOR3
 1407 0048 00000000 		.word	.LANCHOR2
 1408              		.cfi_endproc
 1409              	.LFE152:
ARM GAS  /tmp/ccV3uvSK.s 			page 31


 1411              		.section	.text.M24C16WriteString,"ax",%progbits
 1412              		.align	1
 1413              		.global	M24C16WriteString
 1414              		.syntax unified
 1415              		.thumb
 1416              		.thumb_func
 1417              		.fpu fpv4-sp-d16
 1419              	M24C16WriteString:
 1420              	.LVL117:
 1421              	.LFB153:
 302:main.c        **** void M24C16WriteString(uint16_t address, const char* string) {
 1422              		.loc 1 302 62 is_stmt 1 view -0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 0
 1425              		@ frame_needed = 0, uses_anonymous_args = 0
 1426              		.loc 1 302 62 is_stmt 0 view .LVU331
 1427 0000 70B5     		push	{r4, r5, r6, lr}
 1428              	.LCFI11:
 1429              		.cfi_def_cfa_offset 16
 1430              		.cfi_offset 4, -16
 1431              		.cfi_offset 5, -12
 1432              		.cfi_offset 6, -8
 1433              		.cfi_offset 14, -4
 303:main.c        **** 
 304:main.c        ****     if(address_invalid(address)) { sendViaUsart(errorInvalidAddress); return; }
 1434              		.loc 1 304 5 is_stmt 1 view .LVU332
 1435              		.loc 1 304 7 is_stmt 0 view .LVU333
 1436 0002 B0F5006F 		cmp	r0, #2048
 1437 0006 0AD2     		bcs	.L129
 1438 0008 0646     		mov	r6, r0
 1439 000a 0D46     		mov	r5, r1
 305:main.c        ****     if(strlen(string) > 2048 - address) { sendViaUsart(errorBeyondMemoryWrite); return; }
 1440              		.loc 1 305 5 is_stmt 1 view .LVU334
 1441              		.loc 1 305 8 is_stmt 0 view .LVU335
 1442 000c 0846     		mov	r0, r1
 1443              	.LVL118:
 1444              		.loc 1 305 8 view .LVU336
 1445 000e FFF7FEFF 		bl	strlen
 1446              	.LVL119:
 1447              		.loc 1 305 30 view .LVU337
 1448 0012 C6F50063 		rsb	r3, r6, #2048
 1449              		.loc 1 305 7 view .LVU338
 1450 0016 9842     		cmp	r0, r3
 1451 0018 06DC     		bgt	.L130
 1452              	.LBB15:
 306:main.c        **** 
 307:main.c        ****     for(int i = 0; i < strlen(string); i++) {
 1453              		.loc 1 307 13 view .LVU339
 1454 001a 0024     		movs	r4, #0
 1455 001c 12E0     		b	.L125
 1456              	.LVL120:
 1457              	.L129:
 1458              		.loc 1 307 13 view .LVU340
 1459              	.LBE15:
 304:main.c        ****     if(strlen(string) > 2048 - address) { sendViaUsart(errorBeyondMemoryWrite); return; }
 1460              		.loc 1 304 36 is_stmt 1 discriminator 1 view .LVU341
 1461 001e 0C4B     		ldr	r3, .L131
ARM GAS  /tmp/ccV3uvSK.s 			page 32


 1462 0020 1868     		ldr	r0, [r3]
 1463              	.LVL121:
 304:main.c        ****     if(strlen(string) > 2048 - address) { sendViaUsart(errorBeyondMemoryWrite); return; }
 1464              		.loc 1 304 36 is_stmt 0 discriminator 1 view .LVU342
 1465 0022 FFF7FEFF 		bl	sendViaUsart
 1466              	.LVL122:
 304:main.c        ****     if(strlen(string) > 2048 - address) { sendViaUsart(errorBeyondMemoryWrite); return; }
 1467              		.loc 1 304 71 is_stmt 1 discriminator 1 view .LVU343
 1468 0026 12E0     		b	.L122
 1469              	.LVL123:
 1470              	.L130:
 305:main.c        ****     if(strlen(string) > 2048 - address) { sendViaUsart(errorBeyondMemoryWrite); return; }
 1471              		.loc 1 305 43 discriminator 1 view .LVU344
 1472 0028 0A4B     		ldr	r3, .L131+4
 1473 002a 1868     		ldr	r0, [r3]
 1474 002c FFF7FEFF 		bl	sendViaUsart
 1475              	.LVL124:
 305:main.c        ****     if(strlen(string) > 2048 - address) { sendViaUsart(errorBeyondMemoryWrite); return; }
 1476              		.loc 1 305 81 discriminator 1 view .LVU345
 1477 0030 0DE0     		b	.L122
 1478              	.LVL125:
 1479              	.L126:
 1480              	.LBB16:
 308:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1481              		.loc 1 308 9 discriminator 3 view .LVU346
 1482 0032 0020     		movs	r0, #0
 1483 0034 FFF7FEFF 		bl	M24C16RandomAdddressRead
 1484              	.LVL126:
 309:main.c        ****         M24C16ByteWrite(address + i, string[i]);
 1485              		.loc 1 309 9 discriminator 3 view .LVU347
 1486 0038 3019     		adds	r0, r6, r4
 1487 003a 295D     		ldrb	r1, [r5, r4]	@ zero_extendqisi2
 1488 003c 80B2     		uxth	r0, r0
 1489 003e FFF7FEFF 		bl	M24C16ByteWrite
 1490              	.LVL127:
 307:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1491              		.loc 1 307 40 discriminator 3 view .LVU348
 307:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1492              		.loc 1 307 41 is_stmt 0 discriminator 3 view .LVU349
 1493 0042 0134     		adds	r4, r4, #1
 1494              	.LVL128:
 1495              	.L125:
 307:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1496              		.loc 1 307 20 is_stmt 1 discriminator 1 view .LVU350
 307:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1497              		.loc 1 307 24 is_stmt 0 discriminator 1 view .LVU351
 1498 0044 2846     		mov	r0, r5
 1499 0046 FFF7FEFF 		bl	strlen
 1500              	.LVL129:
 307:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1501              		.loc 1 307 5 discriminator 1 view .LVU352
 1502 004a A042     		cmp	r0, r4
 1503 004c F1DC     		bgt	.L126
 1504              	.LVL130:
 1505              	.L122:
 307:main.c        ****         M24C16RandomAdddressRead(0); // RandomRead necessary according to manual
 1506              		.loc 1 307 5 discriminator 1 view .LVU353
ARM GAS  /tmp/ccV3uvSK.s 			page 33


 1507              	.LBE16:
 310:main.c        ****     }
 311:main.c        **** 
 312:main.c        **** }
 1508              		.loc 1 312 1 view .LVU354
 1509 004e 70BD     		pop	{r4, r5, r6, pc}
 1510              	.L132:
 1511              		.align	2
 1512              	.L131:
 1513 0050 00000000 		.word	.LANCHOR2
 1514 0054 00000000 		.word	.LANCHOR4
 1515              		.cfi_endproc
 1516              	.LFE153:
 1518              		.section	.text.M24C16SequentialRandomRead,"ax",%progbits
 1519              		.align	1
 1520              		.global	M24C16SequentialRandomRead
 1521              		.syntax unified
 1522              		.thumb
 1523              		.thumb_func
 1524              		.fpu fpv4-sp-d16
 1526              	M24C16SequentialRandomRead:
 1527              	.LVL131:
 1528              	.LFB154:
 313:main.c        **** 
 314:main.c        **** uint8_t memory_dump[2048];
 315:main.c        **** 
 316:main.c        **** uint8_t* M24C16SequentialRandomRead(uint16_t address,int length) {
 1529              		.loc 1 316 66 is_stmt 1 view -0
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 0
 1532              		@ frame_needed = 0, uses_anonymous_args = 0
 1533              		.loc 1 316 66 is_stmt 0 view .LVU356
 1534 0000 38B5     		push	{r3, r4, r5, lr}
 1535              	.LCFI12:
 1536              		.cfi_def_cfa_offset 16
 1537              		.cfi_offset 3, -16
 1538              		.cfi_offset 4, -12
 1539              		.cfi_offset 5, -8
 1540              		.cfi_offset 14, -4
 317:main.c        **** 
 318:main.c        ****     if(address_invalid(address)) { sendViaUsart(errorInvalidAddress); return 0; }
 1541              		.loc 1 318 5 is_stmt 1 view .LVU357
 1542              		.loc 1 318 7 is_stmt 0 view .LVU358
 1543 0002 B0F5006F 		cmp	r0, #2048
 1544 0006 2DD2     		bcs	.L142
 1545 0008 0446     		mov	r4, r0
 1546 000a 0D46     		mov	r5, r1
 319:main.c        ****     if(length > 2048 - address) { sendViaUsart(errorBeyondMemoryRead); return 0; }
 1547              		.loc 1 319 5 is_stmt 1 view .LVU359
 1548              		.loc 1 319 22 is_stmt 0 view .LVU360
 1549 000c C0F50063 		rsb	r3, r0, #2048
 1550              		.loc 1 319 7 view .LVU361
 1551 0010 8B42     		cmp	r3, r1
 1552 0012 2DDB     		blt	.L143
 320:main.c        **** 
 321:main.c        ****     M24C16RandomAdddressRead(0); // according to M24C16 manual sequential read operation should be 
 1553              		.loc 1 321 5 is_stmt 1 view .LVU362
ARM GAS  /tmp/ccV3uvSK.s 			page 34


 1554 0014 0020     		movs	r0, #0
 1555              	.LVL132:
 1556              		.loc 1 321 5 is_stmt 0 view .LVU363
 1557 0016 FFF7FEFF 		bl	M24C16RandomAdddressRead
 1558              	.LVL133:
 322:main.c        **** 
 323:main.c        ****     setSdaOutput();
 1559              		.loc 1 323 5 is_stmt 1 view .LVU364
 1560 001a FFF7FEFF 		bl	setSdaOutput
 1561              	.LVL134:
 324:main.c        **** 
 325:main.c        ****     sendStartCondition();
 1562              		.loc 1 325 5 view .LVU365
 1563 001e FFF7FEFF 		bl	sendStartCondition
 1564              	.LVL135:
 326:main.c        **** 
 327:main.c        ****     sendByte(device_select_with_address_bits(OPCODE_WRITE,address));
 1565              		.loc 1 327 5 view .LVU366
 1566              		.loc 1 327 14 is_stmt 0 view .LVU367
 1567 0022 200A     		lsrs	r0, r4, #8
 1568 0024 4000     		lsls	r0, r0, #1
 1569 0026 00F00E00 		and	r0, r0, #14
 1570              		.loc 1 327 5 view .LVU368
 1571 002a 40F0A000 		orr	r0, r0, #160
 1572 002e FFF7FEFF 		bl	sendByte
 1573              	.LVL136:
 328:main.c        ****     sendBit(ACK);
 1574              		.loc 1 328 5 is_stmt 1 view .LVU369
 1575 0032 0020     		movs	r0, #0
 1576 0034 FFF7FEFF 		bl	sendBit
 1577              	.LVL137:
 329:main.c        ****     sendByte(0);
 1578              		.loc 1 329 5 view .LVU370
 1579 0038 0020     		movs	r0, #0
 1580 003a FFF7FEFF 		bl	sendByte
 1581              	.LVL138:
 330:main.c        ****     sendBit(ACK);
 1582              		.loc 1 330 5 view .LVU371
 1583 003e 0020     		movs	r0, #0
 1584 0040 FFF7FEFF 		bl	sendBit
 1585              	.LVL139:
 331:main.c        ****     sendByte(DUMMY_BYTE);
 1586              		.loc 1 331 5 view .LVU372
 1587 0044 FF20     		movs	r0, #255
 1588 0046 FFF7FEFF 		bl	sendByte
 1589              	.LVL140:
 332:main.c        ****     sendBit(ACK);
 1590              		.loc 1 332 5 view .LVU373
 1591 004a 0020     		movs	r0, #0
 1592 004c FFF7FEFF 		bl	sendBit
 1593              	.LVL141:
 333:main.c        **** 
 334:main.c        ****     sendStartCondition();
 1594              		.loc 1 334 5 view .LVU374
 1595 0050 FFF7FEFF 		bl	sendStartCondition
 1596              	.LVL142:
 335:main.c        ****     sendByte(OPCODE_READ);
ARM GAS  /tmp/ccV3uvSK.s 			page 35


 1597              		.loc 1 335 5 view .LVU375
 1598 0054 A120     		movs	r0, #161
 1599 0056 FFF7FEFF 		bl	sendByte
 1600              	.LVL143:
 336:main.c        ****     sendBit(ACK);
 1601              		.loc 1 336 5 view .LVU376
 1602 005a 0020     		movs	r0, #0
 1603 005c FFF7FEFF 		bl	sendBit
 1604              	.LVL144:
 337:main.c        **** 
 338:main.c        ****     for(int i = 0; i < length; i++) {
 1605              		.loc 1 338 5 view .LVU377
 1606              	.LBB17:
 1607              		.loc 1 338 9 view .LVU378
 1608              		.loc 1 338 13 is_stmt 0 view .LVU379
 1609 0060 0024     		movs	r4, #0
 1610              		.loc 1 338 5 view .LVU380
 1611 0062 0FE0     		b	.L137
 1612              	.LVL145:
 1613              	.L142:
 1614              		.loc 1 338 5 view .LVU381
 1615              	.LBE17:
 318:main.c        ****     if(length > 2048 - address) { sendViaUsart(errorBeyondMemoryRead); return 0; }
 1616              		.loc 1 318 36 is_stmt 1 discriminator 1 view .LVU382
 1617 0064 124B     		ldr	r3, .L146
 1618 0066 1868     		ldr	r0, [r3]
 1619              	.LVL146:
 318:main.c        ****     if(length > 2048 - address) { sendViaUsart(errorBeyondMemoryRead); return 0; }
 1620              		.loc 1 318 36 is_stmt 0 discriminator 1 view .LVU383
 1621 0068 FFF7FEFF 		bl	sendViaUsart
 1622              	.LVL147:
 318:main.c        ****     if(length > 2048 - address) { sendViaUsart(errorBeyondMemoryRead); return 0; }
 1623              		.loc 1 318 71 is_stmt 1 discriminator 1 view .LVU384
 318:main.c        ****     if(length > 2048 - address) { sendViaUsart(errorBeyondMemoryRead); return 0; }
 1624              		.loc 1 318 78 is_stmt 0 discriminator 1 view .LVU385
 1625 006c 0020     		movs	r0, #0
 1626 006e 1DE0     		b	.L133
 1627              	.LVL148:
 1628              	.L143:
 319:main.c        **** 
 1629              		.loc 1 319 35 is_stmt 1 discriminator 1 view .LVU386
 1630 0070 104B     		ldr	r3, .L146+4
 1631 0072 1868     		ldr	r0, [r3]
 1632              	.LVL149:
 319:main.c        **** 
 1633              		.loc 1 319 35 is_stmt 0 discriminator 1 view .LVU387
 1634 0074 FFF7FEFF 		bl	sendViaUsart
 1635              	.LVL150:
 319:main.c        **** 
 1636              		.loc 1 319 72 is_stmt 1 discriminator 1 view .LVU388
 319:main.c        **** 
 1637              		.loc 1 319 79 is_stmt 0 discriminator 1 view .LVU389
 1638 0078 0020     		movs	r0, #0
 1639 007a 17E0     		b	.L133
 1640              	.LVL151:
 1641              	.L145:
 1642              	.LBB18:
ARM GAS  /tmp/ccV3uvSK.s 			page 36


 339:main.c        ****         setSdaInput();
 340:main.c        ****         memory_dump[i] = readByte();
 341:main.c        ****         setSdaOutput();
 342:main.c        ****         if(i == length - 1) sendBit(NO_ACK);
 1643              		.loc 1 342 29 is_stmt 1 discriminator 1 view .LVU390
 1644 007c 0120     		movs	r0, #1
 1645 007e FFF7FEFF 		bl	sendBit
 1646              	.LVL152:
 1647              	.L139:
 338:main.c        ****         setSdaInput();
 1648              		.loc 1 338 32 discriminator 2 view .LVU391
 338:main.c        ****         setSdaInput();
 1649              		.loc 1 338 33 is_stmt 0 discriminator 2 view .LVU392
 1650 0082 0134     		adds	r4, r4, #1
 1651              	.LVL153:
 1652              	.L137:
 338:main.c        ****         setSdaInput();
 1653              		.loc 1 338 20 is_stmt 1 discriminator 1 view .LVU393
 338:main.c        ****         setSdaInput();
 1654              		.loc 1 338 5 is_stmt 0 discriminator 1 view .LVU394
 1655 0084 AC42     		cmp	r4, r5
 1656 0086 0EDA     		bge	.L144
 339:main.c        ****         setSdaInput();
 1657              		.loc 1 339 9 is_stmt 1 view .LVU395
 1658 0088 FFF7FEFF 		bl	setSdaInput
 1659              	.LVL154:
 340:main.c        ****         setSdaOutput();
 1660              		.loc 1 340 9 view .LVU396
 340:main.c        ****         setSdaOutput();
 1661              		.loc 1 340 26 is_stmt 0 view .LVU397
 1662 008c FFF7FEFF 		bl	readByte
 1663              	.LVL155:
 340:main.c        ****         setSdaOutput();
 1664              		.loc 1 340 24 view .LVU398
 1665 0090 094B     		ldr	r3, .L146+8
 1666 0092 1855     		strb	r0, [r3, r4]
 341:main.c        ****         if(i == length - 1) sendBit(NO_ACK);
 1667              		.loc 1 341 9 is_stmt 1 view .LVU399
 1668 0094 FFF7FEFF 		bl	setSdaOutput
 1669              	.LVL156:
 1670              		.loc 1 342 9 view .LVU400
 1671              		.loc 1 342 24 is_stmt 0 view .LVU401
 1672 0098 6B1E     		subs	r3, r5, #1
 1673              		.loc 1 342 11 view .LVU402
 1674 009a A342     		cmp	r3, r4
 1675 009c EED0     		beq	.L145
 343:main.c        ****         else sendBit(ACK);
 1676              		.loc 1 343 14 is_stmt 1 view .LVU403
 1677 009e 0020     		movs	r0, #0
 1678 00a0 FFF7FEFF 		bl	sendBit
 1679              	.LVL157:
 1680 00a4 EDE7     		b	.L139
 1681              	.L144:
 1682              	.LBE18:
 344:main.c        ****     }
 345:main.c        **** 
 346:main.c        ****     sendStopCondition();
ARM GAS  /tmp/ccV3uvSK.s 			page 37


 1683              		.loc 1 346 5 view .LVU404
 1684 00a6 FFF7FEFF 		bl	sendStopCondition
 1685              	.LVL158:
 347:main.c        **** 
 348:main.c        ****     return memory_dump;
 1686              		.loc 1 348 5 view .LVU405
 1687              		.loc 1 348 12 is_stmt 0 view .LVU406
 1688 00aa 0348     		ldr	r0, .L146+8
 1689              	.LVL159:
 1690              	.L133:
 349:main.c        **** 
 350:main.c        **** }
 1691              		.loc 1 350 1 view .LVU407
 1692 00ac 38BD     		pop	{r3, r4, r5, pc}
 1693              	.L147:
 1694 00ae 00BF     		.align	2
 1695              	.L146:
 1696 00b0 00000000 		.word	.LANCHOR2
 1697 00b4 00000000 		.word	.LANCHOR5
 1698 00b8 00000000 		.word	memory_dump
 1699              		.cfi_endproc
 1700              	.LFE154:
 1702              		.section	.rodata.M24C16Dump.str1.4,"aMS",%progbits,1
 1703              		.align	2
 1704              	.LC1:
 1705 0000 306200   		.ascii	"0b\000"
 1706 0003 00       		.align	2
 1707              	.LC2:
 1708 0004 2000     		.ascii	" \000"
 1709 0006 0000     		.align	2
 1710              	.LC3:
 1711 0008 0A0D00   		.ascii	"\012\015\000"
 1712              		.section	.text.M24C16Dump,"ax",%progbits
 1713              		.align	1
 1714              		.global	M24C16Dump
 1715              		.syntax unified
 1716              		.thumb
 1717              		.thumb_func
 1718              		.fpu fpv4-sp-d16
 1720              	M24C16Dump:
 1721              	.LVL160:
 1722              	.LFB155:
 351:main.c        **** 
 352:main.c        **** void M24C16Dump(int mode) { // mode: 1 - binary, 2 - decimal, 3 - ASCII
 1723              		.loc 1 352 27 is_stmt 1 view -0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 8
 1726              		@ frame_needed = 0, uses_anonymous_args = 0
 1727              		.loc 1 352 27 is_stmt 0 view .LVU409
 1728 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1729              	.LCFI13:
 1730              		.cfi_def_cfa_offset 20
 1731              		.cfi_offset 4, -20
 1732              		.cfi_offset 5, -16
 1733              		.cfi_offset 6, -12
 1734              		.cfi_offset 7, -8
 1735              		.cfi_offset 14, -4
ARM GAS  /tmp/ccV3uvSK.s 			page 38


 1736 0002 83B0     		sub	sp, sp, #12
 1737              	.LCFI14:
 1738              		.cfi_def_cfa_offset 32
 1739 0004 0446     		mov	r4, r0
 353:main.c        **** 
 354:main.c        ****     M24C16SequentialRandomRead(0,2048);
 1740              		.loc 1 354 5 is_stmt 1 view .LVU410
 1741 0006 4FF40061 		mov	r1, #2048
 1742 000a 0020     		movs	r0, #0
 1743              	.LVL161:
 1744              		.loc 1 354 5 is_stmt 0 view .LVU411
 1745 000c FFF7FEFF 		bl	M24C16SequentialRandomRead
 1746              	.LVL162:
 355:main.c        **** 
 356:main.c        ****     switch(mode) {
 1747              		.loc 1 356 5 is_stmt 1 view .LVU412
 1748 0010 022C     		cmp	r4, #2
 1749 0012 53D0     		beq	.L162
 1750 0014 032C     		cmp	r4, #3
 1751 0016 71D0     		beq	.L163
 1752 0018 012C     		cmp	r4, #1
 1753 001a 32D0     		beq	.L170
 357:main.c        **** 
 358:main.c        ****         case 1: { //outputs memory in binary
 359:main.c        **** 
 360:main.c        ****             for(int i = 0; i < 128; i++) {
 361:main.c        **** 
 362:main.c        ****                 for(int j = 0; j < 16; j++) {
 363:main.c        **** 
 364:main.c        ****                     sendViaUsart("0b");
 365:main.c        ****                     uint8_t byte = memory_dump[i*16 + j];
 366:main.c        ****                     for(int l = 7; l >=0; l--) {
 367:main.c        **** 
 368:main.c        ****                         char symbol[2];
 369:main.c        ****                         symbol[0] = ((byte >> l) & 1) + 48;
 370:main.c        ****                         symbol[1] = '\0';
 371:main.c        ****                         sendViaUsart(symbol);
 372:main.c        **** 
 373:main.c        ****                     }
 374:main.c        ****                     sendViaUsart(" ");
 375:main.c        **** 
 376:main.c        ****                 }
 377:main.c        ****                 sendViaUsart("\n\r");
 378:main.c        **** 
 379:main.c        ****             }
 380:main.c        **** 
 381:main.c        ****             sendViaUsart("\n\r");
 382:main.c        **** 
 383:main.c        ****         } break;
 384:main.c        **** 
 385:main.c        ****         case 2: { //outputs memory in decimal
 386:main.c        **** 
 387:main.c        ****             for(int i = 0; i < 128; i++) {
 388:main.c        **** 
 389:main.c        ****                 for(int j = 0; j < 16; j++) {
 390:main.c        **** 
 391:main.c        ****                     sendViaUsart(itoa(memory_dump[i*16 + j]));
ARM GAS  /tmp/ccV3uvSK.s 			page 39


 392:main.c        ****                     sendViaUsart(" ");
 393:main.c        **** 
 394:main.c        ****                 }
 395:main.c        ****                 sendViaUsart("\n\r");
 396:main.c        **** 
 397:main.c        ****             }
 398:main.c        **** 
 399:main.c        ****             sendViaUsart("\n\r");
 400:main.c        **** 
 401:main.c        ****         } break;
 402:main.c        **** 
 403:main.c        ****         case 3: { //outputs memory in ASCII
 404:main.c        **** 
 405:main.c        ****             for(int i = 0; i < 128; i++) {
 406:main.c        **** 
 407:main.c        ****                 for(int j = 0; j < 16; j++) {
 408:main.c        **** 
 409:main.c        ****                     char symbol[2];
 410:main.c        ****                     symbol[0] = memory_dump[i*16 + j];
 411:main.c        ****                     symbol[1] = '\0';
 412:main.c        ****                     sendViaUsart(symbol);
 413:main.c        ****                     sendViaUsart(" ");
 414:main.c        **** 
 415:main.c        ****                 }
 416:main.c        ****                 sendViaUsart("\n\r");
 417:main.c        **** 
 418:main.c        ****             }
 419:main.c        **** 
 420:main.c        ****             sendViaUsart("\n\r");
 421:main.c        **** 
 422:main.c        ****         } break;
 423:main.c        **** 
 424:main.c        ****         default: {
 425:main.c        **** 
 426:main.c        ****              sendViaUsart("\n\r");
 1754              		.loc 1 426 14 view .LVU413
 1755 001c 3A4C     		ldr	r4, .L177
 1756              	.LVL163:
 1757              		.loc 1 426 14 is_stmt 0 view .LVU414
 1758 001e 2046     		mov	r0, r4
 1759 0020 FFF7FEFF 		bl	sendViaUsart
 1760              	.LVL164:
 427:main.c        ****              sendViaUsart(errorInvalidMode);
 1761              		.loc 1 427 14 is_stmt 1 view .LVU415
 1762 0024 394B     		ldr	r3, .L177+4
 1763 0026 1868     		ldr	r0, [r3]
 1764 0028 FFF7FEFF 		bl	sendViaUsart
 1765              	.LVL165:
 428:main.c        ****              sendViaUsart("\n\r");
 1766              		.loc 1 428 14 view .LVU416
 1767 002c 2046     		mov	r0, r4
 1768 002e FFF7FEFF 		bl	sendViaUsart
 1769              	.LVL166:
 429:main.c        **** 
 430:main.c        ****          } break;
 1770              		.loc 1 430 12 view .LVU417
 431:main.c        **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 40


 432:main.c        ****     }
 433:main.c        **** 
 434:main.c        **** }
 1771              		.loc 1 434 1 is_stmt 0 view .LVU418
 1772 0032 2BE0     		b	.L148
 1773              	.LVL167:
 1774              	.L154:
 1775              	.LBB19:
 1776              	.LBB20:
 1777              	.LBB21:
 1778              	.LBB22:
 1779              	.LBB23:
 368:main.c        ****                         symbol[0] = ((byte >> l) & 1) + 48;
 1780              		.loc 1 368 25 is_stmt 1 discriminator 3 view .LVU419
 369:main.c        ****                         symbol[1] = '\0';
 1781              		.loc 1 369 25 discriminator 3 view .LVU420
 369:main.c        ****                         symbol[1] = '\0';
 1782              		.loc 1 369 44 is_stmt 0 discriminator 3 view .LVU421
 1783 0034 45FA04F3 		asr	r3, r5, r4
 369:main.c        ****                         symbol[1] = '\0';
 1784              		.loc 1 369 50 discriminator 3 view .LVU422
 1785 0038 03F00103 		and	r3, r3, #1
 369:main.c        ****                         symbol[1] = '\0';
 1786              		.loc 1 369 55 discriminator 3 view .LVU423
 1787 003c 3033     		adds	r3, r3, #48
 369:main.c        ****                         symbol[1] = '\0';
 1788              		.loc 1 369 35 discriminator 3 view .LVU424
 1789 003e 8DF80430 		strb	r3, [sp, #4]
 370:main.c        ****                         sendViaUsart(symbol);
 1790              		.loc 1 370 25 is_stmt 1 discriminator 3 view .LVU425
 370:main.c        ****                         sendViaUsart(symbol);
 1791              		.loc 1 370 35 is_stmt 0 discriminator 3 view .LVU426
 1792 0042 0023     		movs	r3, #0
 1793 0044 8DF80530 		strb	r3, [sp, #5]
 371:main.c        **** 
 1794              		.loc 1 371 25 is_stmt 1 discriminator 3 view .LVU427
 1795 0048 01A8     		add	r0, sp, #4
 1796 004a FFF7FEFF 		bl	sendViaUsart
 1797              	.LVL168:
 1798              	.LBE23:
 366:main.c        **** 
 1799              		.loc 1 366 43 discriminator 3 view .LVU428
 366:main.c        **** 
 1800              		.loc 1 366 44 is_stmt 0 discriminator 3 view .LVU429
 1801 004e 013C     		subs	r4, r4, #1
 1802              	.LVL169:
 1803              	.L153:
 366:main.c        **** 
 1804              		.loc 1 366 36 is_stmt 1 discriminator 1 view .LVU430
 366:main.c        **** 
 1805              		.loc 1 366 21 is_stmt 0 discriminator 1 view .LVU431
 1806 0050 002C     		cmp	r4, #0
 1807 0052 EFDA     		bge	.L154
 1808              	.LBE22:
 374:main.c        **** 
 1809              		.loc 1 374 21 is_stmt 1 discriminator 2 view .LVU432
 1810 0054 2E48     		ldr	r0, .L177+8
ARM GAS  /tmp/ccV3uvSK.s 			page 41


 1811 0056 FFF7FEFF 		bl	sendViaUsart
 1812              	.LVL170:
 1813              	.LBE21:
 362:main.c        **** 
 1814              		.loc 1 362 40 discriminator 2 view .LVU433
 362:main.c        **** 
 1815              		.loc 1 362 41 is_stmt 0 discriminator 2 view .LVU434
 1816 005a 0136     		adds	r6, r6, #1
 1817              	.LVL171:
 1818              	.L156:
 362:main.c        **** 
 1819              		.loc 1 362 32 is_stmt 1 discriminator 1 view .LVU435
 362:main.c        **** 
 1820              		.loc 1 362 17 is_stmt 0 discriminator 1 view .LVU436
 1821 005c 0F2E     		cmp	r6, #15
 1822 005e 08DC     		bgt	.L171
 1823              	.LBB25:
 364:main.c        ****                     uint8_t byte = memory_dump[i*16 + j];
 1824              		.loc 1 364 21 is_stmt 1 view .LVU437
 1825 0060 2C48     		ldr	r0, .L177+12
 1826 0062 FFF7FEFF 		bl	sendViaUsart
 1827              	.LVL172:
 365:main.c        ****                     for(int l = 7; l >=0; l--) {
 1828              		.loc 1 365 21 view .LVU438
 365:main.c        ****                     for(int l = 7; l >=0; l--) {
 1829              		.loc 1 365 53 is_stmt 0 view .LVU439
 1830 0066 06EB0713 		add	r3, r6, r7, lsl #4
 365:main.c        ****                     for(int l = 7; l >=0; l--) {
 1831              		.loc 1 365 29 view .LVU440
 1832 006a 2B4A     		ldr	r2, .L177+16
 1833 006c D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
 1834              	.LVL173:
 366:main.c        **** 
 1835              		.loc 1 366 21 is_stmt 1 view .LVU441
 1836              	.LBB24:
 366:main.c        **** 
 1837              		.loc 1 366 25 view .LVU442
 366:main.c        **** 
 1838              		.loc 1 366 29 is_stmt 0 view .LVU443
 1839 006e 0724     		movs	r4, #7
 366:main.c        **** 
 1840              		.loc 1 366 21 view .LVU444
 1841 0070 EEE7     		b	.L153
 1842              	.LVL174:
 1843              	.L171:
 366:main.c        **** 
 1844              		.loc 1 366 21 view .LVU445
 1845              	.LBE24:
 1846              	.LBE25:
 1847              	.LBE20:
 377:main.c        **** 
 1848              		.loc 1 377 17 is_stmt 1 discriminator 2 view .LVU446
 1849 0072 2548     		ldr	r0, .L177
 1850 0074 FFF7FEFF 		bl	sendViaUsart
 1851              	.LVL175:
 360:main.c        **** 
 1852              		.loc 1 360 37 discriminator 2 view .LVU447
ARM GAS  /tmp/ccV3uvSK.s 			page 42


 360:main.c        **** 
 1853              		.loc 1 360 38 is_stmt 0 discriminator 2 view .LVU448
 1854 0078 0137     		adds	r7, r7, #1
 1855              	.LVL176:
 1856              	.L151:
 360:main.c        **** 
 1857              		.loc 1 360 28 is_stmt 1 discriminator 1 view .LVU449
 360:main.c        **** 
 1858              		.loc 1 360 13 is_stmt 0 discriminator 1 view .LVU450
 1859 007a 7F2F     		cmp	r7, #127
 1860 007c 03DC     		bgt	.L172
 1861              	.LBB26:
 362:main.c        **** 
 1862              		.loc 1 362 25 view .LVU451
 1863 007e 0026     		movs	r6, #0
 1864 0080 ECE7     		b	.L156
 1865              	.LVL177:
 1866              	.L170:
 362:main.c        **** 
 1867              		.loc 1 362 25 view .LVU452
 1868              	.LBE26:
 1869              	.LBE19:
 356:main.c        **** 
 1870              		.loc 1 356 5 view .LVU453
 1871 0082 0027     		movs	r7, #0
 1872 0084 F9E7     		b	.L151
 1873              	.LVL178:
 1874              	.L172:
 381:main.c        **** 
 1875              		.loc 1 381 13 is_stmt 1 view .LVU454
 1876 0086 2048     		ldr	r0, .L177
 1877 0088 FFF7FEFF 		bl	sendViaUsart
 1878              	.LVL179:
 383:main.c        **** 
 1879              		.loc 1 383 11 view .LVU455
 1880              	.L148:
 1881              		.loc 1 434 1 is_stmt 0 view .LVU456
 1882 008c 03B0     		add	sp, sp, #12
 1883              	.LCFI15:
 1884              		.cfi_remember_state
 1885              		.cfi_def_cfa_offset 20
 1886              		@ sp needed
 1887 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 1888              	.LVL180:
 1889              	.L174:
 1890              	.LCFI16:
 1891              		.cfi_restore_state
 1892              	.LBB27:
 395:main.c        **** 
 1893              		.loc 1 395 17 is_stmt 1 discriminator 2 view .LVU457
 1894 0090 1D48     		ldr	r0, .L177
 1895 0092 FFF7FEFF 		bl	sendViaUsart
 1896              	.LVL181:
 387:main.c        **** 
 1897              		.loc 1 387 37 discriminator 2 view .LVU458
 387:main.c        **** 
 1898              		.loc 1 387 38 is_stmt 0 discriminator 2 view .LVU459
ARM GAS  /tmp/ccV3uvSK.s 			page 43


 1899 0096 0135     		adds	r5, r5, #1
 1900              	.LVL182:
 1901              	.L149:
 387:main.c        **** 
 1902              		.loc 1 387 28 is_stmt 1 discriminator 1 view .LVU460
 387:main.c        **** 
 1903              		.loc 1 387 13 is_stmt 0 discriminator 1 view .LVU461
 1904 0098 7F2D     		cmp	r5, #127
 1905 009a 11DC     		bgt	.L173
 1906              	.LBB28:
 389:main.c        **** 
 1907              		.loc 1 389 25 view .LVU462
 1908 009c 0024     		movs	r4, #0
 1909              	.L159:
 1910              	.LVL183:
 389:main.c        **** 
 1911              		.loc 1 389 32 is_stmt 1 discriminator 1 view .LVU463
 389:main.c        **** 
 1912              		.loc 1 389 17 is_stmt 0 discriminator 1 view .LVU464
 1913 009e 0F2C     		cmp	r4, #15
 1914 00a0 F6DC     		bgt	.L174
 391:main.c        ****                     sendViaUsart(" ");
 1915              		.loc 1 391 21 is_stmt 1 discriminator 3 view .LVU465
 391:main.c        ****                     sendViaUsart(" ");
 1916              		.loc 1 391 56 is_stmt 0 discriminator 3 view .LVU466
 1917 00a2 04EB0513 		add	r3, r4, r5, lsl #4
 391:main.c        ****                     sendViaUsart(" ");
 1918              		.loc 1 391 34 discriminator 3 view .LVU467
 1919 00a6 1C4A     		ldr	r2, .L177+16
 1920 00a8 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 1921 00aa FFF7FEFF 		bl	itoa
 1922              	.LVL184:
 391:main.c        ****                     sendViaUsart(" ");
 1923              		.loc 1 391 21 discriminator 3 view .LVU468
 1924 00ae FFF7FEFF 		bl	sendViaUsart
 1925              	.LVL185:
 392:main.c        **** 
 1926              		.loc 1 392 21 is_stmt 1 discriminator 3 view .LVU469
 1927 00b2 1748     		ldr	r0, .L177+8
 1928 00b4 FFF7FEFF 		bl	sendViaUsart
 1929              	.LVL186:
 389:main.c        **** 
 1930              		.loc 1 389 40 discriminator 3 view .LVU470
 389:main.c        **** 
 1931              		.loc 1 389 41 is_stmt 0 discriminator 3 view .LVU471
 1932 00b8 0134     		adds	r4, r4, #1
 1933              	.LVL187:
 389:main.c        **** 
 1934              		.loc 1 389 41 discriminator 3 view .LVU472
 1935 00ba F0E7     		b	.L159
 1936              	.LVL188:
 1937              	.L162:
 389:main.c        **** 
 1938              		.loc 1 389 41 discriminator 3 view .LVU473
 1939              	.LBE28:
 1940              	.LBE27:
 356:main.c        **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 44


 1941              		.loc 1 356 5 view .LVU474
 1942 00bc 0025     		movs	r5, #0
 1943 00be EBE7     		b	.L149
 1944              	.LVL189:
 1945              	.L173:
 399:main.c        **** 
 1946              		.loc 1 399 13 is_stmt 1 view .LVU475
 1947 00c0 1148     		ldr	r0, .L177
 1948 00c2 FFF7FEFF 		bl	sendViaUsart
 1949              	.LVL190:
 401:main.c        **** 
 1950              		.loc 1 401 11 view .LVU476
 401:main.c        **** 
 1951              		.loc 1 401 9 is_stmt 0 view .LVU477
 1952 00c6 E1E7     		b	.L148
 1953              	.LVL191:
 1954              	.L176:
 1955              	.LBB29:
 416:main.c        **** 
 1956              		.loc 1 416 17 is_stmt 1 discriminator 2 view .LVU478
 1957 00c8 0F48     		ldr	r0, .L177
 1958 00ca FFF7FEFF 		bl	sendViaUsart
 1959              	.LVL192:
 405:main.c        **** 
 1960              		.loc 1 405 37 discriminator 2 view .LVU479
 405:main.c        **** 
 1961              		.loc 1 405 38 is_stmt 0 discriminator 2 view .LVU480
 1962 00ce 0135     		adds	r5, r5, #1
 1963              	.LVL193:
 1964              	.L150:
 405:main.c        **** 
 1965              		.loc 1 405 28 is_stmt 1 discriminator 1 view .LVU481
 405:main.c        **** 
 1966              		.loc 1 405 13 is_stmt 0 discriminator 1 view .LVU482
 1967 00d0 7F2D     		cmp	r5, #127
 1968 00d2 15DC     		bgt	.L175
 1969              	.LBB30:
 407:main.c        **** 
 1970              		.loc 1 407 25 view .LVU483
 1971 00d4 0024     		movs	r4, #0
 1972              	.L161:
 1973              	.LVL194:
 407:main.c        **** 
 1974              		.loc 1 407 32 is_stmt 1 discriminator 1 view .LVU484
 407:main.c        **** 
 1975              		.loc 1 407 17 is_stmt 0 discriminator 1 view .LVU485
 1976 00d6 0F2C     		cmp	r4, #15
 1977 00d8 F6DC     		bgt	.L176
 1978              	.LBB31:
 409:main.c        ****                     symbol[0] = memory_dump[i*16 + j];
 1979              		.loc 1 409 21 is_stmt 1 discriminator 3 view .LVU486
 410:main.c        ****                     symbol[1] = '\0';
 1980              		.loc 1 410 21 discriminator 3 view .LVU487
 410:main.c        ****                     symbol[1] = '\0';
 1981              		.loc 1 410 50 is_stmt 0 discriminator 3 view .LVU488
 1982 00da 04EB0513 		add	r3, r4, r5, lsl #4
 410:main.c        ****                     symbol[1] = '\0';
ARM GAS  /tmp/ccV3uvSK.s 			page 45


 1983              		.loc 1 410 44 discriminator 3 view .LVU489
 1984 00de 0E4A     		ldr	r2, .L177+16
 1985 00e0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 410:main.c        ****                     symbol[1] = '\0';
 1986              		.loc 1 410 31 discriminator 3 view .LVU490
 1987 00e2 8DF80430 		strb	r3, [sp, #4]
 411:main.c        ****                     sendViaUsart(symbol);
 1988              		.loc 1 411 21 is_stmt 1 discriminator 3 view .LVU491
 411:main.c        ****                     sendViaUsart(symbol);
 1989              		.loc 1 411 31 is_stmt 0 discriminator 3 view .LVU492
 1990 00e6 0023     		movs	r3, #0
 1991 00e8 8DF80530 		strb	r3, [sp, #5]
 412:main.c        ****                     sendViaUsart(" ");
 1992              		.loc 1 412 21 is_stmt 1 discriminator 3 view .LVU493
 1993 00ec 01A8     		add	r0, sp, #4
 1994 00ee FFF7FEFF 		bl	sendViaUsart
 1995              	.LVL195:
 413:main.c        **** 
 1996              		.loc 1 413 21 discriminator 3 view .LVU494
 1997 00f2 0748     		ldr	r0, .L177+8
 1998 00f4 FFF7FEFF 		bl	sendViaUsart
 1999              	.LVL196:
 2000              	.LBE31:
 407:main.c        **** 
 2001              		.loc 1 407 40 discriminator 3 view .LVU495
 407:main.c        **** 
 2002              		.loc 1 407 41 is_stmt 0 discriminator 3 view .LVU496
 2003 00f8 0134     		adds	r4, r4, #1
 2004              	.LVL197:
 407:main.c        **** 
 2005              		.loc 1 407 41 discriminator 3 view .LVU497
 2006 00fa ECE7     		b	.L161
 2007              	.LVL198:
 2008              	.L163:
 407:main.c        **** 
 2009              		.loc 1 407 41 discriminator 3 view .LVU498
 2010              	.LBE30:
 2011              	.LBE29:
 356:main.c        **** 
 2012              		.loc 1 356 5 view .LVU499
 2013 00fc 0025     		movs	r5, #0
 2014 00fe E7E7     		b	.L150
 2015              	.LVL199:
 2016              	.L175:
 420:main.c        **** 
 2017              		.loc 1 420 13 is_stmt 1 view .LVU500
 2018 0100 0148     		ldr	r0, .L177
 2019 0102 FFF7FEFF 		bl	sendViaUsart
 2020              	.LVL200:
 422:main.c        **** 
 2021              		.loc 1 422 11 view .LVU501
 422:main.c        **** 
 2022              		.loc 1 422 9 is_stmt 0 view .LVU502
 2023 0106 C1E7     		b	.L148
 2024              	.L178:
 2025              		.align	2
 2026              	.L177:
ARM GAS  /tmp/ccV3uvSK.s 			page 46


 2027 0108 08000000 		.word	.LC3
 2028 010c 00000000 		.word	.LANCHOR6
 2029 0110 04000000 		.word	.LC2
 2030 0114 00000000 		.word	.LC1
 2031 0118 00000000 		.word	memory_dump
 2032              		.cfi_endproc
 2033              	.LFE155:
 2035              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2036              		.align	2
 2037              	.LC4:
 2038 0000 0A0D0A0D 		.ascii	"\012\015\012\015\000"
 2038      00
 2039 0005 000000   		.align	2
 2040              	.LC5:
 2041 0008 50524944 		.ascii	"PRIDYBAILO\000"
 2041      59424149 
 2041      4C4F00
 2042              		.section	.text.main,"ax",%progbits
 2043              		.align	1
 2044              		.global	main
 2045              		.syntax unified
 2046              		.thumb
 2047              		.thumb_func
 2048              		.fpu fpv4-sp-d16
 2050              	main:
 2051              	.LFB156:
 435:main.c        **** 
 436:main.c        **** int main(void) {
 2052              		.loc 1 436 16 is_stmt 1 view -0
 2053              		.cfi_startproc
 2054              		@ args = 0, pretend = 0, frame = 0
 2055              		@ frame_needed = 0, uses_anonymous_args = 0
 2056 0000 08B5     		push	{r3, lr}
 2057              	.LCFI17:
 2058              		.cfi_def_cfa_offset 8
 2059              		.cfi_offset 3, -8
 2060              		.cfi_offset 14, -4
 437:main.c        **** 
 438:main.c        ****     set_sysclk_max();
 2061              		.loc 1 438 5 view .LVU504
 2062 0002 FFF7FEFF 		bl	set_sysclk_max
 2063              	.LVL201:
 439:main.c        ****     UART6Config();
 2064              		.loc 1 439 5 view .LVU505
 2065 0006 FFF7FEFF 		bl	UART6Config
 2066              	.LVL202:
 440:main.c        ****     SysTick_Config(SystemCoreClock/(800000/9)); //configuring systick for delay function
 2067              		.loc 1 440 5 view .LVU506
 2068 000a 1E4B     		ldr	r3, .L182
 2069 000c 1B68     		ldr	r3, [r3]
 2070 000e DB08     		lsrs	r3, r3, #3
 2071 0010 1D4A     		ldr	r2, .L182+4
 2072 0012 A2FB0323 		umull	r2, r3, r2, r3
 2073 0016 9B0A     		lsrs	r3, r3, #10
 2074              	.LVL203:
 2075              	.LBB32:
 2076              	.LBI32:
ARM GAS  /tmp/ccV3uvSK.s 			page 47


 2077              		.file 2 "../CMSIS/Include/core_cm4.h"
   1:../CMSIS/Include/core_cm4.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cm4.h ****  * @file     core_cm4.h
   3:../CMSIS/Include/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../CMSIS/Include/core_cm4.h ****  * @version  V5.0.8
   5:../CMSIS/Include/core_cm4.h ****  * @date     04. June 2018
   6:../CMSIS/Include/core_cm4.h ****  ******************************************************************************/
   7:../CMSIS/Include/core_cm4.h **** /*
   8:../CMSIS/Include/core_cm4.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:../CMSIS/Include/core_cm4.h ****  *
  10:../CMSIS/Include/core_cm4.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../CMSIS/Include/core_cm4.h ****  *
  12:../CMSIS/Include/core_cm4.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../CMSIS/Include/core_cm4.h ****  * not use this file except in compliance with the License.
  14:../CMSIS/Include/core_cm4.h ****  * You may obtain a copy of the License at
  15:../CMSIS/Include/core_cm4.h ****  *
  16:../CMSIS/Include/core_cm4.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../CMSIS/Include/core_cm4.h ****  *
  18:../CMSIS/Include/core_cm4.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../CMSIS/Include/core_cm4.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../CMSIS/Include/core_cm4.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CMSIS/Include/core_cm4.h ****  * See the License for the specific language governing permissions and
  22:../CMSIS/Include/core_cm4.h ****  * limitations under the License.
  23:../CMSIS/Include/core_cm4.h ****  */
  24:../CMSIS/Include/core_cm4.h **** 
  25:../CMSIS/Include/core_cm4.h **** #if   defined ( __ICCARM__ )
  26:../CMSIS/Include/core_cm4.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:../CMSIS/Include/core_cm4.h **** #elif defined (__clang__)
  28:../CMSIS/Include/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  29:../CMSIS/Include/core_cm4.h **** #endif
  30:../CMSIS/Include/core_cm4.h **** 
  31:../CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:../CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:../CMSIS/Include/core_cm4.h **** 
  34:../CMSIS/Include/core_cm4.h **** #include <stdint.h>
  35:../CMSIS/Include/core_cm4.h **** 
  36:../CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
  37:../CMSIS/Include/core_cm4.h ****  extern "C" {
  38:../CMSIS/Include/core_cm4.h **** #endif
  39:../CMSIS/Include/core_cm4.h **** 
  40:../CMSIS/Include/core_cm4.h **** /**
  41:../CMSIS/Include/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:../CMSIS/Include/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:../CMSIS/Include/core_cm4.h **** 
  44:../CMSIS/Include/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:../CMSIS/Include/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  46:../CMSIS/Include/core_cm4.h **** 
  47:../CMSIS/Include/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:../CMSIS/Include/core_cm4.h ****      Unions are used for effective representation of core registers.
  49:../CMSIS/Include/core_cm4.h **** 
  50:../CMSIS/Include/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:../CMSIS/Include/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  52:../CMSIS/Include/core_cm4.h ****  */
  53:../CMSIS/Include/core_cm4.h **** 
  54:../CMSIS/Include/core_cm4.h **** 
  55:../CMSIS/Include/core_cm4.h **** /*******************************************************************************
  56:../CMSIS/Include/core_cm4.h ****  *                 CMSIS definitions
ARM GAS  /tmp/ccV3uvSK.s 			page 48


  57:../CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  58:../CMSIS/Include/core_cm4.h **** /**
  59:../CMSIS/Include/core_cm4.h ****   \ingroup Cortex_M4
  60:../CMSIS/Include/core_cm4.h ****   @{
  61:../CMSIS/Include/core_cm4.h ****  */
  62:../CMSIS/Include/core_cm4.h **** 
  63:../CMSIS/Include/core_cm4.h **** #include "cmsis_version.h"
  64:../CMSIS/Include/core_cm4.h **** 
  65:../CMSIS/Include/core_cm4.h **** /* CMSIS CM4 definitions */
  66:../CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:../CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:../CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  69:../CMSIS/Include/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:../CMSIS/Include/core_cm4.h **** 
  71:../CMSIS/Include/core_cm4.h **** #define __CORTEX_M                (4U)                                   /*!< Cortex-M Core */
  72:../CMSIS/Include/core_cm4.h **** 
  73:../CMSIS/Include/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:../CMSIS/Include/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:../CMSIS/Include/core_cm4.h **** */
  76:../CMSIS/Include/core_cm4.h **** #if defined ( __CC_ARM )
  77:../CMSIS/Include/core_cm4.h ****   #if defined __TARGET_FPU_VFP
  78:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
  80:../CMSIS/Include/core_cm4.h ****     #else
  81:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
  83:../CMSIS/Include/core_cm4.h ****     #endif
  84:../CMSIS/Include/core_cm4.h ****   #else
  85:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
  86:../CMSIS/Include/core_cm4.h ****   #endif
  87:../CMSIS/Include/core_cm4.h **** 
  88:../CMSIS/Include/core_cm4.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:../CMSIS/Include/core_cm4.h ****   #if defined __ARM_PCS_VFP
  90:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
  92:../CMSIS/Include/core_cm4.h ****     #else
  93:../CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
  95:../CMSIS/Include/core_cm4.h ****     #endif
  96:../CMSIS/Include/core_cm4.h ****   #else
  97:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
  98:../CMSIS/Include/core_cm4.h ****   #endif
  99:../CMSIS/Include/core_cm4.h **** 
 100:../CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
 101:../CMSIS/Include/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 104:../CMSIS/Include/core_cm4.h ****     #else
 105:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 107:../CMSIS/Include/core_cm4.h ****     #endif
 108:../CMSIS/Include/core_cm4.h ****   #else
 109:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 110:../CMSIS/Include/core_cm4.h ****   #endif
 111:../CMSIS/Include/core_cm4.h **** 
 112:../CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
 113:../CMSIS/Include/core_cm4.h ****   #if defined __ARMVFP__
ARM GAS  /tmp/ccV3uvSK.s 			page 49


 114:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 116:../CMSIS/Include/core_cm4.h ****     #else
 117:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 119:../CMSIS/Include/core_cm4.h ****     #endif
 120:../CMSIS/Include/core_cm4.h ****   #else
 121:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 122:../CMSIS/Include/core_cm4.h ****   #endif
 123:../CMSIS/Include/core_cm4.h **** 
 124:../CMSIS/Include/core_cm4.h **** #elif defined ( __TI_ARM__ )
 125:../CMSIS/Include/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 126:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 128:../CMSIS/Include/core_cm4.h ****     #else
 129:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 131:../CMSIS/Include/core_cm4.h ****     #endif
 132:../CMSIS/Include/core_cm4.h ****   #else
 133:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 134:../CMSIS/Include/core_cm4.h ****   #endif
 135:../CMSIS/Include/core_cm4.h **** 
 136:../CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
 137:../CMSIS/Include/core_cm4.h ****   #if defined __FPU_VFP__
 138:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 140:../CMSIS/Include/core_cm4.h ****     #else
 141:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 143:../CMSIS/Include/core_cm4.h ****     #endif
 144:../CMSIS/Include/core_cm4.h ****   #else
 145:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 146:../CMSIS/Include/core_cm4.h ****   #endif
 147:../CMSIS/Include/core_cm4.h **** 
 148:../CMSIS/Include/core_cm4.h **** #elif defined ( __CSMC__ )
 149:../CMSIS/Include/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 150:../CMSIS/Include/core_cm4.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 152:../CMSIS/Include/core_cm4.h ****     #else
 153:../CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 155:../CMSIS/Include/core_cm4.h ****     #endif
 156:../CMSIS/Include/core_cm4.h ****   #else
 157:../CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 158:../CMSIS/Include/core_cm4.h ****   #endif
 159:../CMSIS/Include/core_cm4.h **** 
 160:../CMSIS/Include/core_cm4.h **** #endif
 161:../CMSIS/Include/core_cm4.h **** 
 162:../CMSIS/Include/core_cm4.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:../CMSIS/Include/core_cm4.h **** 
 164:../CMSIS/Include/core_cm4.h **** 
 165:../CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 166:../CMSIS/Include/core_cm4.h **** }
 167:../CMSIS/Include/core_cm4.h **** #endif
 168:../CMSIS/Include/core_cm4.h **** 
 169:../CMSIS/Include/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 170:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 50


 171:../CMSIS/Include/core_cm4.h **** #ifndef __CMSIS_GENERIC
 172:../CMSIS/Include/core_cm4.h **** 
 173:../CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 174:../CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 175:../CMSIS/Include/core_cm4.h **** 
 176:../CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 177:../CMSIS/Include/core_cm4.h ****  extern "C" {
 178:../CMSIS/Include/core_cm4.h **** #endif
 179:../CMSIS/Include/core_cm4.h **** 
 180:../CMSIS/Include/core_cm4.h **** /* check device defines and use defaults */
 181:../CMSIS/Include/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 182:../CMSIS/Include/core_cm4.h ****   #ifndef __CM4_REV
 183:../CMSIS/Include/core_cm4.h ****     #define __CM4_REV               0x0000U
 184:../CMSIS/Include/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 185:../CMSIS/Include/core_cm4.h ****   #endif
 186:../CMSIS/Include/core_cm4.h **** 
 187:../CMSIS/Include/core_cm4.h ****   #ifndef __FPU_PRESENT
 188:../CMSIS/Include/core_cm4.h ****     #define __FPU_PRESENT             0U
 189:../CMSIS/Include/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:../CMSIS/Include/core_cm4.h ****   #endif
 191:../CMSIS/Include/core_cm4.h **** 
 192:../CMSIS/Include/core_cm4.h ****   #ifndef __MPU_PRESENT
 193:../CMSIS/Include/core_cm4.h ****     #define __MPU_PRESENT             0U
 194:../CMSIS/Include/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:../CMSIS/Include/core_cm4.h ****   #endif
 196:../CMSIS/Include/core_cm4.h **** 
 197:../CMSIS/Include/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 198:../CMSIS/Include/core_cm4.h ****     #define __NVIC_PRIO_BITS          3U
 199:../CMSIS/Include/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 200:../CMSIS/Include/core_cm4.h ****   #endif
 201:../CMSIS/Include/core_cm4.h **** 
 202:../CMSIS/Include/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 203:../CMSIS/Include/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 204:../CMSIS/Include/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 205:../CMSIS/Include/core_cm4.h ****   #endif
 206:../CMSIS/Include/core_cm4.h **** #endif
 207:../CMSIS/Include/core_cm4.h **** 
 208:../CMSIS/Include/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 209:../CMSIS/Include/core_cm4.h **** /**
 210:../CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 211:../CMSIS/Include/core_cm4.h **** 
 212:../CMSIS/Include/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 213:../CMSIS/Include/core_cm4.h ****     \li to specify the access to peripheral variables.
 214:../CMSIS/Include/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 215:../CMSIS/Include/core_cm4.h **** */
 216:../CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 217:../CMSIS/Include/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 218:../CMSIS/Include/core_cm4.h **** #else
 219:../CMSIS/Include/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 220:../CMSIS/Include/core_cm4.h **** #endif
 221:../CMSIS/Include/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 222:../CMSIS/Include/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 223:../CMSIS/Include/core_cm4.h **** 
 224:../CMSIS/Include/core_cm4.h **** /* following defines should be used for structure members */
 225:../CMSIS/Include/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 226:../CMSIS/Include/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 227:../CMSIS/Include/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
ARM GAS  /tmp/ccV3uvSK.s 			page 51


 228:../CMSIS/Include/core_cm4.h **** 
 229:../CMSIS/Include/core_cm4.h **** /*@} end of group Cortex_M4 */
 230:../CMSIS/Include/core_cm4.h **** 
 231:../CMSIS/Include/core_cm4.h **** 
 232:../CMSIS/Include/core_cm4.h **** 
 233:../CMSIS/Include/core_cm4.h **** /*******************************************************************************
 234:../CMSIS/Include/core_cm4.h ****  *                 Register Abstraction
 235:../CMSIS/Include/core_cm4.h ****   Core Register contain:
 236:../CMSIS/Include/core_cm4.h ****   - Core Register
 237:../CMSIS/Include/core_cm4.h ****   - Core NVIC Register
 238:../CMSIS/Include/core_cm4.h ****   - Core SCB Register
 239:../CMSIS/Include/core_cm4.h ****   - Core SysTick Register
 240:../CMSIS/Include/core_cm4.h ****   - Core Debug Register
 241:../CMSIS/Include/core_cm4.h ****   - Core MPU Register
 242:../CMSIS/Include/core_cm4.h ****   - Core FPU Register
 243:../CMSIS/Include/core_cm4.h ****  ******************************************************************************/
 244:../CMSIS/Include/core_cm4.h **** /**
 245:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 246:../CMSIS/Include/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 247:../CMSIS/Include/core_cm4.h **** */
 248:../CMSIS/Include/core_cm4.h **** 
 249:../CMSIS/Include/core_cm4.h **** /**
 250:../CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
 251:../CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 252:../CMSIS/Include/core_cm4.h ****   \brief      Core Register type definitions.
 253:../CMSIS/Include/core_cm4.h ****   @{
 254:../CMSIS/Include/core_cm4.h ****  */
 255:../CMSIS/Include/core_cm4.h **** 
 256:../CMSIS/Include/core_cm4.h **** /**
 257:../CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 258:../CMSIS/Include/core_cm4.h ****  */
 259:../CMSIS/Include/core_cm4.h **** typedef union
 260:../CMSIS/Include/core_cm4.h **** {
 261:../CMSIS/Include/core_cm4.h ****   struct
 262:../CMSIS/Include/core_cm4.h ****   {
 263:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 264:../CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 265:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 266:../CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 267:../CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 268:../CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 269:../CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 270:../CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 271:../CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 272:../CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 273:../CMSIS/Include/core_cm4.h **** } APSR_Type;
 274:../CMSIS/Include/core_cm4.h **** 
 275:../CMSIS/Include/core_cm4.h **** /* APSR Register Definitions */
 276:../CMSIS/Include/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 277:../CMSIS/Include/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 278:../CMSIS/Include/core_cm4.h **** 
 279:../CMSIS/Include/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 280:../CMSIS/Include/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 281:../CMSIS/Include/core_cm4.h **** 
 282:../CMSIS/Include/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 283:../CMSIS/Include/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 284:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 52


 285:../CMSIS/Include/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 286:../CMSIS/Include/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 287:../CMSIS/Include/core_cm4.h **** 
 288:../CMSIS/Include/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 289:../CMSIS/Include/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 290:../CMSIS/Include/core_cm4.h **** 
 291:../CMSIS/Include/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 292:../CMSIS/Include/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 293:../CMSIS/Include/core_cm4.h **** 
 294:../CMSIS/Include/core_cm4.h **** 
 295:../CMSIS/Include/core_cm4.h **** /**
 296:../CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 297:../CMSIS/Include/core_cm4.h ****  */
 298:../CMSIS/Include/core_cm4.h **** typedef union
 299:../CMSIS/Include/core_cm4.h **** {
 300:../CMSIS/Include/core_cm4.h ****   struct
 301:../CMSIS/Include/core_cm4.h ****   {
 302:../CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 303:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 304:../CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 305:../CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:../CMSIS/Include/core_cm4.h **** } IPSR_Type;
 307:../CMSIS/Include/core_cm4.h **** 
 308:../CMSIS/Include/core_cm4.h **** /* IPSR Register Definitions */
 309:../CMSIS/Include/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 310:../CMSIS/Include/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 311:../CMSIS/Include/core_cm4.h **** 
 312:../CMSIS/Include/core_cm4.h **** 
 313:../CMSIS/Include/core_cm4.h **** /**
 314:../CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 315:../CMSIS/Include/core_cm4.h ****  */
 316:../CMSIS/Include/core_cm4.h **** typedef union
 317:../CMSIS/Include/core_cm4.h **** {
 318:../CMSIS/Include/core_cm4.h ****   struct
 319:../CMSIS/Include/core_cm4.h ****   {
 320:../CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 321:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 322:../CMSIS/Include/core_cm4.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 323:../CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 324:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 325:../CMSIS/Include/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 326:../CMSIS/Include/core_cm4.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 327:../CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 328:../CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 329:../CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 330:../CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 331:../CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 332:../CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 333:../CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 334:../CMSIS/Include/core_cm4.h **** } xPSR_Type;
 335:../CMSIS/Include/core_cm4.h **** 
 336:../CMSIS/Include/core_cm4.h **** /* xPSR Register Definitions */
 337:../CMSIS/Include/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 338:../CMSIS/Include/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 339:../CMSIS/Include/core_cm4.h **** 
 340:../CMSIS/Include/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 341:../CMSIS/Include/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
ARM GAS  /tmp/ccV3uvSK.s 			page 53


 342:../CMSIS/Include/core_cm4.h **** 
 343:../CMSIS/Include/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 344:../CMSIS/Include/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 345:../CMSIS/Include/core_cm4.h **** 
 346:../CMSIS/Include/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 347:../CMSIS/Include/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 348:../CMSIS/Include/core_cm4.h **** 
 349:../CMSIS/Include/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 350:../CMSIS/Include/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 351:../CMSIS/Include/core_cm4.h **** 
 352:../CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 353:../CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 354:../CMSIS/Include/core_cm4.h **** 
 355:../CMSIS/Include/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 356:../CMSIS/Include/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 357:../CMSIS/Include/core_cm4.h **** 
 358:../CMSIS/Include/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 359:../CMSIS/Include/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 360:../CMSIS/Include/core_cm4.h **** 
 361:../CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 362:../CMSIS/Include/core_cm4.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 363:../CMSIS/Include/core_cm4.h **** 
 364:../CMSIS/Include/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 365:../CMSIS/Include/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 366:../CMSIS/Include/core_cm4.h **** 
 367:../CMSIS/Include/core_cm4.h **** 
 368:../CMSIS/Include/core_cm4.h **** /**
 369:../CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 370:../CMSIS/Include/core_cm4.h ****  */
 371:../CMSIS/Include/core_cm4.h **** typedef union
 372:../CMSIS/Include/core_cm4.h **** {
 373:../CMSIS/Include/core_cm4.h ****   struct
 374:../CMSIS/Include/core_cm4.h ****   {
 375:../CMSIS/Include/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 376:../CMSIS/Include/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 377:../CMSIS/Include/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 378:../CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 379:../CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 380:../CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 381:../CMSIS/Include/core_cm4.h **** } CONTROL_Type;
 382:../CMSIS/Include/core_cm4.h **** 
 383:../CMSIS/Include/core_cm4.h **** /* CONTROL Register Definitions */
 384:../CMSIS/Include/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 385:../CMSIS/Include/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 386:../CMSIS/Include/core_cm4.h **** 
 387:../CMSIS/Include/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 388:../CMSIS/Include/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 389:../CMSIS/Include/core_cm4.h **** 
 390:../CMSIS/Include/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 391:../CMSIS/Include/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 392:../CMSIS/Include/core_cm4.h **** 
 393:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CORE */
 394:../CMSIS/Include/core_cm4.h **** 
 395:../CMSIS/Include/core_cm4.h **** 
 396:../CMSIS/Include/core_cm4.h **** /**
 397:../CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
 398:../CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
ARM GAS  /tmp/ccV3uvSK.s 			page 54


 399:../CMSIS/Include/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 400:../CMSIS/Include/core_cm4.h ****   @{
 401:../CMSIS/Include/core_cm4.h ****  */
 402:../CMSIS/Include/core_cm4.h **** 
 403:../CMSIS/Include/core_cm4.h **** /**
 404:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 405:../CMSIS/Include/core_cm4.h ****  */
 406:../CMSIS/Include/core_cm4.h **** typedef struct
 407:../CMSIS/Include/core_cm4.h **** {
 408:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 409:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[24U];
 410:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 411:../CMSIS/Include/core_cm4.h ****         uint32_t RSERVED1[24U];
 412:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 413:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[24U];
 414:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 415:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[24U];
 416:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 417:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[56U];
 418:../CMSIS/Include/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 419:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[644U];
 420:../CMSIS/Include/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 421:../CMSIS/Include/core_cm4.h **** }  NVIC_Type;
 422:../CMSIS/Include/core_cm4.h **** 
 423:../CMSIS/Include/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 424:../CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 425:../CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 426:../CMSIS/Include/core_cm4.h **** 
 427:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 428:../CMSIS/Include/core_cm4.h **** 
 429:../CMSIS/Include/core_cm4.h **** 
 430:../CMSIS/Include/core_cm4.h **** /**
 431:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 432:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 433:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 434:../CMSIS/Include/core_cm4.h ****   @{
 435:../CMSIS/Include/core_cm4.h ****  */
 436:../CMSIS/Include/core_cm4.h **** 
 437:../CMSIS/Include/core_cm4.h **** /**
 438:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 439:../CMSIS/Include/core_cm4.h ****  */
 440:../CMSIS/Include/core_cm4.h **** typedef struct
 441:../CMSIS/Include/core_cm4.h **** {
 442:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 443:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 444:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 445:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 446:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 447:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 448:../CMSIS/Include/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 449:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 450:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 451:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 452:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 453:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 454:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 455:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
ARM GAS  /tmp/ccV3uvSK.s 			page 55


 456:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 457:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 458:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 459:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 460:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 461:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[5U];
 462:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 463:../CMSIS/Include/core_cm4.h **** } SCB_Type;
 464:../CMSIS/Include/core_cm4.h **** 
 465:../CMSIS/Include/core_cm4.h **** /* SCB CPUID Register Definitions */
 466:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 467:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 468:../CMSIS/Include/core_cm4.h **** 
 469:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 470:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 471:../CMSIS/Include/core_cm4.h **** 
 472:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 473:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 474:../CMSIS/Include/core_cm4.h **** 
 475:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 476:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 477:../CMSIS/Include/core_cm4.h **** 
 478:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 479:../CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 480:../CMSIS/Include/core_cm4.h **** 
 481:../CMSIS/Include/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 482:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 483:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 484:../CMSIS/Include/core_cm4.h **** 
 485:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 486:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 487:../CMSIS/Include/core_cm4.h **** 
 488:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 489:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 490:../CMSIS/Include/core_cm4.h **** 
 491:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 492:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 493:../CMSIS/Include/core_cm4.h **** 
 494:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 495:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 496:../CMSIS/Include/core_cm4.h **** 
 497:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 498:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 499:../CMSIS/Include/core_cm4.h **** 
 500:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 501:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 502:../CMSIS/Include/core_cm4.h **** 
 503:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 504:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 505:../CMSIS/Include/core_cm4.h **** 
 506:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 507:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 508:../CMSIS/Include/core_cm4.h **** 
 509:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 510:../CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 511:../CMSIS/Include/core_cm4.h **** 
 512:../CMSIS/Include/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
ARM GAS  /tmp/ccV3uvSK.s 			page 56


 513:../CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 514:../CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 515:../CMSIS/Include/core_cm4.h **** 
 516:../CMSIS/Include/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 517:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 518:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 519:../CMSIS/Include/core_cm4.h **** 
 520:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 521:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 522:../CMSIS/Include/core_cm4.h **** 
 523:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 524:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 525:../CMSIS/Include/core_cm4.h **** 
 526:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 527:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 528:../CMSIS/Include/core_cm4.h **** 
 529:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 530:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 531:../CMSIS/Include/core_cm4.h **** 
 532:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 533:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 534:../CMSIS/Include/core_cm4.h **** 
 535:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 536:../CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 537:../CMSIS/Include/core_cm4.h **** 
 538:../CMSIS/Include/core_cm4.h **** /* SCB System Control Register Definitions */
 539:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 540:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 541:../CMSIS/Include/core_cm4.h **** 
 542:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 543:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 544:../CMSIS/Include/core_cm4.h **** 
 545:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 546:../CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 547:../CMSIS/Include/core_cm4.h **** 
 548:../CMSIS/Include/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 549:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 550:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 551:../CMSIS/Include/core_cm4.h **** 
 552:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 553:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 554:../CMSIS/Include/core_cm4.h **** 
 555:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 556:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 557:../CMSIS/Include/core_cm4.h **** 
 558:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 559:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 560:../CMSIS/Include/core_cm4.h **** 
 561:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 562:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 563:../CMSIS/Include/core_cm4.h **** 
 564:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 565:../CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 566:../CMSIS/Include/core_cm4.h **** 
 567:../CMSIS/Include/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 568:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 569:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
ARM GAS  /tmp/ccV3uvSK.s 			page 57


 570:../CMSIS/Include/core_cm4.h **** 
 571:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 572:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 573:../CMSIS/Include/core_cm4.h **** 
 574:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 575:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 576:../CMSIS/Include/core_cm4.h **** 
 577:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 578:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 579:../CMSIS/Include/core_cm4.h **** 
 580:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 581:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 582:../CMSIS/Include/core_cm4.h **** 
 583:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 584:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 585:../CMSIS/Include/core_cm4.h **** 
 586:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 587:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 588:../CMSIS/Include/core_cm4.h **** 
 589:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 590:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 591:../CMSIS/Include/core_cm4.h **** 
 592:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 593:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 594:../CMSIS/Include/core_cm4.h **** 
 595:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 596:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 597:../CMSIS/Include/core_cm4.h **** 
 598:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 599:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 600:../CMSIS/Include/core_cm4.h **** 
 601:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 602:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 603:../CMSIS/Include/core_cm4.h **** 
 604:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 605:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 606:../CMSIS/Include/core_cm4.h **** 
 607:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 608:../CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 609:../CMSIS/Include/core_cm4.h **** 
 610:../CMSIS/Include/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 611:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 612:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 613:../CMSIS/Include/core_cm4.h **** 
 614:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 615:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 616:../CMSIS/Include/core_cm4.h **** 
 617:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 618:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 619:../CMSIS/Include/core_cm4.h **** 
 620:../CMSIS/Include/core_cm4.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 621:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 622:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 623:../CMSIS/Include/core_cm4.h **** 
 624:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 625:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 626:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 58


 627:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 628:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 629:../CMSIS/Include/core_cm4.h **** 
 630:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 631:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 632:../CMSIS/Include/core_cm4.h **** 
 633:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 634:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 635:../CMSIS/Include/core_cm4.h **** 
 636:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 637:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 638:../CMSIS/Include/core_cm4.h **** 
 639:../CMSIS/Include/core_cm4.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 640:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 641:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 642:../CMSIS/Include/core_cm4.h **** 
 643:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 644:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 645:../CMSIS/Include/core_cm4.h **** 
 646:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 647:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 648:../CMSIS/Include/core_cm4.h **** 
 649:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 650:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 651:../CMSIS/Include/core_cm4.h **** 
 652:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 653:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 654:../CMSIS/Include/core_cm4.h **** 
 655:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 656:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 657:../CMSIS/Include/core_cm4.h **** 
 658:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 659:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 660:../CMSIS/Include/core_cm4.h **** 
 661:../CMSIS/Include/core_cm4.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 662:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 663:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 664:../CMSIS/Include/core_cm4.h **** 
 665:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 666:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 667:../CMSIS/Include/core_cm4.h **** 
 668:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 669:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 670:../CMSIS/Include/core_cm4.h **** 
 671:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 672:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 673:../CMSIS/Include/core_cm4.h **** 
 674:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 675:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 676:../CMSIS/Include/core_cm4.h **** 
 677:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 678:../CMSIS/Include/core_cm4.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 679:../CMSIS/Include/core_cm4.h **** 
 680:../CMSIS/Include/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 681:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 682:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 683:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 59


 684:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 685:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 686:../CMSIS/Include/core_cm4.h **** 
 687:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 688:../CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 689:../CMSIS/Include/core_cm4.h **** 
 690:../CMSIS/Include/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 691:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 692:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 693:../CMSIS/Include/core_cm4.h **** 
 694:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 695:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 696:../CMSIS/Include/core_cm4.h **** 
 697:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 698:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 699:../CMSIS/Include/core_cm4.h **** 
 700:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 701:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 702:../CMSIS/Include/core_cm4.h **** 
 703:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 704:../CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 705:../CMSIS/Include/core_cm4.h **** 
 706:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCB */
 707:../CMSIS/Include/core_cm4.h **** 
 708:../CMSIS/Include/core_cm4.h **** 
 709:../CMSIS/Include/core_cm4.h **** /**
 710:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 711:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 712:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 713:../CMSIS/Include/core_cm4.h ****   @{
 714:../CMSIS/Include/core_cm4.h ****  */
 715:../CMSIS/Include/core_cm4.h **** 
 716:../CMSIS/Include/core_cm4.h **** /**
 717:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 718:../CMSIS/Include/core_cm4.h ****  */
 719:../CMSIS/Include/core_cm4.h **** typedef struct
 720:../CMSIS/Include/core_cm4.h **** {
 721:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
 722:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 723:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 724:../CMSIS/Include/core_cm4.h **** } SCnSCB_Type;
 725:../CMSIS/Include/core_cm4.h **** 
 726:../CMSIS/Include/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 727:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 728:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 729:../CMSIS/Include/core_cm4.h **** 
 730:../CMSIS/Include/core_cm4.h **** /* Auxiliary Control Register Definitions */
 731:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 732:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 733:../CMSIS/Include/core_cm4.h **** 
 734:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 735:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 736:../CMSIS/Include/core_cm4.h **** 
 737:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 738:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 739:../CMSIS/Include/core_cm4.h **** 
 740:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
ARM GAS  /tmp/ccV3uvSK.s 			page 60


 741:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 742:../CMSIS/Include/core_cm4.h **** 
 743:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 744:../CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 745:../CMSIS/Include/core_cm4.h **** 
 746:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 747:../CMSIS/Include/core_cm4.h **** 
 748:../CMSIS/Include/core_cm4.h **** 
 749:../CMSIS/Include/core_cm4.h **** /**
 750:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 751:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 752:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 753:../CMSIS/Include/core_cm4.h ****   @{
 754:../CMSIS/Include/core_cm4.h ****  */
 755:../CMSIS/Include/core_cm4.h **** 
 756:../CMSIS/Include/core_cm4.h **** /**
 757:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 758:../CMSIS/Include/core_cm4.h ****  */
 759:../CMSIS/Include/core_cm4.h **** typedef struct
 760:../CMSIS/Include/core_cm4.h **** {
 761:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 762:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 763:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 764:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 765:../CMSIS/Include/core_cm4.h **** } SysTick_Type;
 766:../CMSIS/Include/core_cm4.h **** 
 767:../CMSIS/Include/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 768:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 769:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 770:../CMSIS/Include/core_cm4.h **** 
 771:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 772:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 773:../CMSIS/Include/core_cm4.h **** 
 774:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 775:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 776:../CMSIS/Include/core_cm4.h **** 
 777:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 778:../CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 779:../CMSIS/Include/core_cm4.h **** 
 780:../CMSIS/Include/core_cm4.h **** /* SysTick Reload Register Definitions */
 781:../CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 782:../CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 783:../CMSIS/Include/core_cm4.h **** 
 784:../CMSIS/Include/core_cm4.h **** /* SysTick Current Register Definitions */
 785:../CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 786:../CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 787:../CMSIS/Include/core_cm4.h **** 
 788:../CMSIS/Include/core_cm4.h **** /* SysTick Calibration Register Definitions */
 789:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 790:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 791:../CMSIS/Include/core_cm4.h **** 
 792:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 793:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 794:../CMSIS/Include/core_cm4.h **** 
 795:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 796:../CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 797:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 61


 798:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 799:../CMSIS/Include/core_cm4.h **** 
 800:../CMSIS/Include/core_cm4.h **** 
 801:../CMSIS/Include/core_cm4.h **** /**
 802:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 803:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 804:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 805:../CMSIS/Include/core_cm4.h ****   @{
 806:../CMSIS/Include/core_cm4.h ****  */
 807:../CMSIS/Include/core_cm4.h **** 
 808:../CMSIS/Include/core_cm4.h **** /**
 809:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 810:../CMSIS/Include/core_cm4.h ****  */
 811:../CMSIS/Include/core_cm4.h **** typedef struct
 812:../CMSIS/Include/core_cm4.h **** {
 813:../CMSIS/Include/core_cm4.h ****   __OM  union
 814:../CMSIS/Include/core_cm4.h ****   {
 815:../CMSIS/Include/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 816:../CMSIS/Include/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 817:../CMSIS/Include/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 818:../CMSIS/Include/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 819:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[864U];
 820:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 821:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[15U];
 822:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 823:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[15U];
 824:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 825:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[29U];
 826:../CMSIS/Include/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 827:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 828:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 829:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[43U];
 830:../CMSIS/Include/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 831:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 832:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[6U];
 833:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 834:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 835:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 836:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 837:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 838:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 839:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 840:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 841:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 842:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 843:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 844:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 845:../CMSIS/Include/core_cm4.h **** } ITM_Type;
 846:../CMSIS/Include/core_cm4.h **** 
 847:../CMSIS/Include/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 848:../CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 849:../CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 850:../CMSIS/Include/core_cm4.h **** 
 851:../CMSIS/Include/core_cm4.h **** /* ITM Trace Control Register Definitions */
 852:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 853:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 854:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 62


 855:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 856:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 857:../CMSIS/Include/core_cm4.h **** 
 858:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 859:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 860:../CMSIS/Include/core_cm4.h **** 
 861:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 862:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 863:../CMSIS/Include/core_cm4.h **** 
 864:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 865:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 866:../CMSIS/Include/core_cm4.h **** 
 867:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 868:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 869:../CMSIS/Include/core_cm4.h **** 
 870:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 871:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 872:../CMSIS/Include/core_cm4.h **** 
 873:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 874:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 875:../CMSIS/Include/core_cm4.h **** 
 876:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 877:../CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 878:../CMSIS/Include/core_cm4.h **** 
 879:../CMSIS/Include/core_cm4.h **** /* ITM Integration Write Register Definitions */
 880:../CMSIS/Include/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 881:../CMSIS/Include/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 882:../CMSIS/Include/core_cm4.h **** 
 883:../CMSIS/Include/core_cm4.h **** /* ITM Integration Read Register Definitions */
 884:../CMSIS/Include/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 885:../CMSIS/Include/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 886:../CMSIS/Include/core_cm4.h **** 
 887:../CMSIS/Include/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 888:../CMSIS/Include/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 889:../CMSIS/Include/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 890:../CMSIS/Include/core_cm4.h **** 
 891:../CMSIS/Include/core_cm4.h **** /* ITM Lock Status Register Definitions */
 892:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 893:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 894:../CMSIS/Include/core_cm4.h **** 
 895:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 896:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 897:../CMSIS/Include/core_cm4.h **** 
 898:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 899:../CMSIS/Include/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 900:../CMSIS/Include/core_cm4.h **** 
 901:../CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 902:../CMSIS/Include/core_cm4.h **** 
 903:../CMSIS/Include/core_cm4.h **** 
 904:../CMSIS/Include/core_cm4.h **** /**
 905:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 906:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 907:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 908:../CMSIS/Include/core_cm4.h ****   @{
 909:../CMSIS/Include/core_cm4.h ****  */
 910:../CMSIS/Include/core_cm4.h **** 
 911:../CMSIS/Include/core_cm4.h **** /**
ARM GAS  /tmp/ccV3uvSK.s 			page 63


 912:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 913:../CMSIS/Include/core_cm4.h ****  */
 914:../CMSIS/Include/core_cm4.h **** typedef struct
 915:../CMSIS/Include/core_cm4.h **** {
 916:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 917:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 918:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 919:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 920:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 921:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 922:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 923:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 924:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 925:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 926:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 927:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
 928:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 929:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 930:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 931:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[1U];
 932:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 933:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 934:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 935:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[1U];
 936:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 937:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 938:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 939:../CMSIS/Include/core_cm4.h **** } DWT_Type;
 940:../CMSIS/Include/core_cm4.h **** 
 941:../CMSIS/Include/core_cm4.h **** /* DWT Control Register Definitions */
 942:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 943:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 944:../CMSIS/Include/core_cm4.h **** 
 945:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 946:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 947:../CMSIS/Include/core_cm4.h **** 
 948:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 949:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 950:../CMSIS/Include/core_cm4.h **** 
 951:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 952:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 953:../CMSIS/Include/core_cm4.h **** 
 954:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 955:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 956:../CMSIS/Include/core_cm4.h **** 
 957:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 958:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 959:../CMSIS/Include/core_cm4.h **** 
 960:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 961:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 962:../CMSIS/Include/core_cm4.h **** 
 963:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 964:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 965:../CMSIS/Include/core_cm4.h **** 
 966:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 967:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 968:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 64


 969:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 970:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 971:../CMSIS/Include/core_cm4.h **** 
 972:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 973:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 974:../CMSIS/Include/core_cm4.h **** 
 975:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 976:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 977:../CMSIS/Include/core_cm4.h **** 
 978:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 979:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 980:../CMSIS/Include/core_cm4.h **** 
 981:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 982:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 983:../CMSIS/Include/core_cm4.h **** 
 984:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 985:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 986:../CMSIS/Include/core_cm4.h **** 
 987:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 988:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 989:../CMSIS/Include/core_cm4.h **** 
 990:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 991:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 992:../CMSIS/Include/core_cm4.h **** 
 993:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 994:../CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 995:../CMSIS/Include/core_cm4.h **** 
 996:../CMSIS/Include/core_cm4.h **** /* DWT CPI Count Register Definitions */
 997:../CMSIS/Include/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 998:../CMSIS/Include/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 999:../CMSIS/Include/core_cm4.h **** 
1000:../CMSIS/Include/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
1001:../CMSIS/Include/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1002:../CMSIS/Include/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1003:../CMSIS/Include/core_cm4.h **** 
1004:../CMSIS/Include/core_cm4.h **** /* DWT Sleep Count Register Definitions */
1005:../CMSIS/Include/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1006:../CMSIS/Include/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1007:../CMSIS/Include/core_cm4.h **** 
1008:../CMSIS/Include/core_cm4.h **** /* DWT LSU Count Register Definitions */
1009:../CMSIS/Include/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1010:../CMSIS/Include/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1011:../CMSIS/Include/core_cm4.h **** 
1012:../CMSIS/Include/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
1013:../CMSIS/Include/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1014:../CMSIS/Include/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1015:../CMSIS/Include/core_cm4.h **** 
1016:../CMSIS/Include/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1017:../CMSIS/Include/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1018:../CMSIS/Include/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1019:../CMSIS/Include/core_cm4.h **** 
1020:../CMSIS/Include/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1021:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1022:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1023:../CMSIS/Include/core_cm4.h **** 
1024:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1025:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
ARM GAS  /tmp/ccV3uvSK.s 			page 65


1026:../CMSIS/Include/core_cm4.h **** 
1027:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1028:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1029:../CMSIS/Include/core_cm4.h **** 
1030:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1031:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1032:../CMSIS/Include/core_cm4.h **** 
1033:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1034:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1035:../CMSIS/Include/core_cm4.h **** 
1036:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1037:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1038:../CMSIS/Include/core_cm4.h **** 
1039:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1040:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1041:../CMSIS/Include/core_cm4.h **** 
1042:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1043:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1044:../CMSIS/Include/core_cm4.h **** 
1045:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1046:../CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1047:../CMSIS/Include/core_cm4.h **** 
1048:../CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1049:../CMSIS/Include/core_cm4.h **** 
1050:../CMSIS/Include/core_cm4.h **** 
1051:../CMSIS/Include/core_cm4.h **** /**
1052:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1053:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1054:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1055:../CMSIS/Include/core_cm4.h ****   @{
1056:../CMSIS/Include/core_cm4.h ****  */
1057:../CMSIS/Include/core_cm4.h **** 
1058:../CMSIS/Include/core_cm4.h **** /**
1059:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1060:../CMSIS/Include/core_cm4.h ****  */
1061:../CMSIS/Include/core_cm4.h **** typedef struct
1062:../CMSIS/Include/core_cm4.h **** {
1063:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1064:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1065:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[2U];
1066:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1067:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[55U];
1068:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1069:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[131U];
1070:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1071:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1072:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1073:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[759U];
1074:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1075:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1076:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1077:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[1U];
1078:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1079:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1080:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1081:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[39U];
1082:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
ARM GAS  /tmp/ccV3uvSK.s 			page 66


1083:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1084:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED7[8U];
1085:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1086:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1087:../CMSIS/Include/core_cm4.h **** } TPI_Type;
1088:../CMSIS/Include/core_cm4.h **** 
1089:../CMSIS/Include/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1090:../CMSIS/Include/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1091:../CMSIS/Include/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1092:../CMSIS/Include/core_cm4.h **** 
1093:../CMSIS/Include/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1094:../CMSIS/Include/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1095:../CMSIS/Include/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1096:../CMSIS/Include/core_cm4.h **** 
1097:../CMSIS/Include/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1098:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1099:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1100:../CMSIS/Include/core_cm4.h **** 
1101:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1102:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1103:../CMSIS/Include/core_cm4.h **** 
1104:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1105:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1106:../CMSIS/Include/core_cm4.h **** 
1107:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1108:../CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1109:../CMSIS/Include/core_cm4.h **** 
1110:../CMSIS/Include/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1111:../CMSIS/Include/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1112:../CMSIS/Include/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1113:../CMSIS/Include/core_cm4.h **** 
1114:../CMSIS/Include/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1115:../CMSIS/Include/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1116:../CMSIS/Include/core_cm4.h **** 
1117:../CMSIS/Include/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1118:../CMSIS/Include/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1119:../CMSIS/Include/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1120:../CMSIS/Include/core_cm4.h **** 
1121:../CMSIS/Include/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1122:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1123:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1124:../CMSIS/Include/core_cm4.h **** 
1125:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1126:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1127:../CMSIS/Include/core_cm4.h **** 
1128:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1129:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1130:../CMSIS/Include/core_cm4.h **** 
1131:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1132:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1133:../CMSIS/Include/core_cm4.h **** 
1134:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1135:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1136:../CMSIS/Include/core_cm4.h **** 
1137:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1138:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1139:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 67


1140:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1141:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1142:../CMSIS/Include/core_cm4.h **** 
1143:../CMSIS/Include/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1144:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1145:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1146:../CMSIS/Include/core_cm4.h **** 
1147:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1148:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1149:../CMSIS/Include/core_cm4.h **** 
1150:../CMSIS/Include/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1151:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1152:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1153:../CMSIS/Include/core_cm4.h **** 
1154:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1155:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1156:../CMSIS/Include/core_cm4.h **** 
1157:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1158:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1159:../CMSIS/Include/core_cm4.h **** 
1160:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1161:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1162:../CMSIS/Include/core_cm4.h **** 
1163:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1164:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1165:../CMSIS/Include/core_cm4.h **** 
1166:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1167:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1168:../CMSIS/Include/core_cm4.h **** 
1169:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1170:../CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1171:../CMSIS/Include/core_cm4.h **** 
1172:../CMSIS/Include/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1173:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1174:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1175:../CMSIS/Include/core_cm4.h **** 
1176:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1177:../CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1178:../CMSIS/Include/core_cm4.h **** 
1179:../CMSIS/Include/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1180:../CMSIS/Include/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1181:../CMSIS/Include/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1182:../CMSIS/Include/core_cm4.h **** 
1183:../CMSIS/Include/core_cm4.h **** /* TPI DEVID Register Definitions */
1184:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1185:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1186:../CMSIS/Include/core_cm4.h **** 
1187:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1188:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1189:../CMSIS/Include/core_cm4.h **** 
1190:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1191:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1192:../CMSIS/Include/core_cm4.h **** 
1193:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1194:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1195:../CMSIS/Include/core_cm4.h **** 
1196:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
ARM GAS  /tmp/ccV3uvSK.s 			page 68


1197:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1198:../CMSIS/Include/core_cm4.h **** 
1199:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1200:../CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1201:../CMSIS/Include/core_cm4.h **** 
1202:../CMSIS/Include/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1203:../CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1204:../CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1205:../CMSIS/Include/core_cm4.h **** 
1206:../CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1207:../CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1208:../CMSIS/Include/core_cm4.h **** 
1209:../CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1210:../CMSIS/Include/core_cm4.h **** 
1211:../CMSIS/Include/core_cm4.h **** 
1212:../CMSIS/Include/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1213:../CMSIS/Include/core_cm4.h **** /**
1214:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1215:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1216:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1217:../CMSIS/Include/core_cm4.h ****   @{
1218:../CMSIS/Include/core_cm4.h ****  */
1219:../CMSIS/Include/core_cm4.h **** 
1220:../CMSIS/Include/core_cm4.h **** /**
1221:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1222:../CMSIS/Include/core_cm4.h ****  */
1223:../CMSIS/Include/core_cm4.h **** typedef struct
1224:../CMSIS/Include/core_cm4.h **** {
1225:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1226:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1227:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1228:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1229:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1230:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1231:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1232:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1233:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1234:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1235:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1236:../CMSIS/Include/core_cm4.h **** } MPU_Type;
1237:../CMSIS/Include/core_cm4.h **** 
1238:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_RALIASES                  4U
1239:../CMSIS/Include/core_cm4.h **** 
1240:../CMSIS/Include/core_cm4.h **** /* MPU Type Register Definitions */
1241:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1242:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1243:../CMSIS/Include/core_cm4.h **** 
1244:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1245:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1246:../CMSIS/Include/core_cm4.h **** 
1247:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1248:../CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1249:../CMSIS/Include/core_cm4.h **** 
1250:../CMSIS/Include/core_cm4.h **** /* MPU Control Register Definitions */
1251:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1252:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1253:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 69


1254:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1255:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1256:../CMSIS/Include/core_cm4.h **** 
1257:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1258:../CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1259:../CMSIS/Include/core_cm4.h **** 
1260:../CMSIS/Include/core_cm4.h **** /* MPU Region Number Register Definitions */
1261:../CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1262:../CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1263:../CMSIS/Include/core_cm4.h **** 
1264:../CMSIS/Include/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1265:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1266:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1267:../CMSIS/Include/core_cm4.h **** 
1268:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1269:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1270:../CMSIS/Include/core_cm4.h **** 
1271:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1272:../CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1273:../CMSIS/Include/core_cm4.h **** 
1274:../CMSIS/Include/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1275:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1276:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1277:../CMSIS/Include/core_cm4.h **** 
1278:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1279:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1280:../CMSIS/Include/core_cm4.h **** 
1281:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1282:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1283:../CMSIS/Include/core_cm4.h **** 
1284:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1285:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1286:../CMSIS/Include/core_cm4.h **** 
1287:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1288:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1289:../CMSIS/Include/core_cm4.h **** 
1290:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1291:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1292:../CMSIS/Include/core_cm4.h **** 
1293:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1294:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1295:../CMSIS/Include/core_cm4.h **** 
1296:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1297:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1298:../CMSIS/Include/core_cm4.h **** 
1299:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1300:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1301:../CMSIS/Include/core_cm4.h **** 
1302:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1303:../CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1304:../CMSIS/Include/core_cm4.h **** 
1305:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_MPU */
1306:../CMSIS/Include/core_cm4.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1307:../CMSIS/Include/core_cm4.h **** 
1308:../CMSIS/Include/core_cm4.h **** 
1309:../CMSIS/Include/core_cm4.h **** /**
1310:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
ARM GAS  /tmp/ccV3uvSK.s 			page 70


1311:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1312:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1313:../CMSIS/Include/core_cm4.h ****   @{
1314:../CMSIS/Include/core_cm4.h ****  */
1315:../CMSIS/Include/core_cm4.h **** 
1316:../CMSIS/Include/core_cm4.h **** /**
1317:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1318:../CMSIS/Include/core_cm4.h ****  */
1319:../CMSIS/Include/core_cm4.h **** typedef struct
1320:../CMSIS/Include/core_cm4.h **** {
1321:../CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
1322:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1323:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1324:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1325:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1326:../CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1327:../CMSIS/Include/core_cm4.h **** } FPU_Type;
1328:../CMSIS/Include/core_cm4.h **** 
1329:../CMSIS/Include/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1330:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1331:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1332:../CMSIS/Include/core_cm4.h **** 
1333:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1334:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1335:../CMSIS/Include/core_cm4.h **** 
1336:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1337:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1338:../CMSIS/Include/core_cm4.h **** 
1339:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1340:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1341:../CMSIS/Include/core_cm4.h **** 
1342:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1343:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1344:../CMSIS/Include/core_cm4.h **** 
1345:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1346:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1347:../CMSIS/Include/core_cm4.h **** 
1348:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1349:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1350:../CMSIS/Include/core_cm4.h **** 
1351:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1352:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1353:../CMSIS/Include/core_cm4.h **** 
1354:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1355:../CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1356:../CMSIS/Include/core_cm4.h **** 
1357:../CMSIS/Include/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1358:../CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1359:../CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1360:../CMSIS/Include/core_cm4.h **** 
1361:../CMSIS/Include/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1362:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1363:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1364:../CMSIS/Include/core_cm4.h **** 
1365:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1366:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1367:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 71


1368:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1369:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1370:../CMSIS/Include/core_cm4.h **** 
1371:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1372:../CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1373:../CMSIS/Include/core_cm4.h **** 
1374:../CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1375:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1376:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1377:../CMSIS/Include/core_cm4.h **** 
1378:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1379:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1380:../CMSIS/Include/core_cm4.h **** 
1381:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1382:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1383:../CMSIS/Include/core_cm4.h **** 
1384:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1385:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1386:../CMSIS/Include/core_cm4.h **** 
1387:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1388:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1389:../CMSIS/Include/core_cm4.h **** 
1390:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1391:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1392:../CMSIS/Include/core_cm4.h **** 
1393:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1394:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1395:../CMSIS/Include/core_cm4.h **** 
1396:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1397:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1398:../CMSIS/Include/core_cm4.h **** 
1399:../CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1400:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1401:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1402:../CMSIS/Include/core_cm4.h **** 
1403:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1404:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1405:../CMSIS/Include/core_cm4.h **** 
1406:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1407:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1408:../CMSIS/Include/core_cm4.h **** 
1409:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1410:../CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1411:../CMSIS/Include/core_cm4.h **** 
1412:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_FPU */
1413:../CMSIS/Include/core_cm4.h **** 
1414:../CMSIS/Include/core_cm4.h **** 
1415:../CMSIS/Include/core_cm4.h **** /**
1416:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1417:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1418:../CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1419:../CMSIS/Include/core_cm4.h ****   @{
1420:../CMSIS/Include/core_cm4.h ****  */
1421:../CMSIS/Include/core_cm4.h **** 
1422:../CMSIS/Include/core_cm4.h **** /**
1423:../CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1424:../CMSIS/Include/core_cm4.h ****  */
ARM GAS  /tmp/ccV3uvSK.s 			page 72


1425:../CMSIS/Include/core_cm4.h **** typedef struct
1426:../CMSIS/Include/core_cm4.h **** {
1427:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1428:../CMSIS/Include/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1429:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1430:../CMSIS/Include/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1431:../CMSIS/Include/core_cm4.h **** } CoreDebug_Type;
1432:../CMSIS/Include/core_cm4.h **** 
1433:../CMSIS/Include/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1434:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1435:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1436:../CMSIS/Include/core_cm4.h **** 
1437:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1438:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1439:../CMSIS/Include/core_cm4.h **** 
1440:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1441:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1442:../CMSIS/Include/core_cm4.h **** 
1443:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1444:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1445:../CMSIS/Include/core_cm4.h **** 
1446:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1447:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1448:../CMSIS/Include/core_cm4.h **** 
1449:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1450:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1451:../CMSIS/Include/core_cm4.h **** 
1452:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1453:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1454:../CMSIS/Include/core_cm4.h **** 
1455:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1456:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1457:../CMSIS/Include/core_cm4.h **** 
1458:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1459:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1460:../CMSIS/Include/core_cm4.h **** 
1461:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1462:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1463:../CMSIS/Include/core_cm4.h **** 
1464:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1465:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1466:../CMSIS/Include/core_cm4.h **** 
1467:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1468:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1469:../CMSIS/Include/core_cm4.h **** 
1470:../CMSIS/Include/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1471:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1472:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1473:../CMSIS/Include/core_cm4.h **** 
1474:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1475:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1476:../CMSIS/Include/core_cm4.h **** 
1477:../CMSIS/Include/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1478:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1479:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1480:../CMSIS/Include/core_cm4.h **** 
1481:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
ARM GAS  /tmp/ccV3uvSK.s 			page 73


1482:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1483:../CMSIS/Include/core_cm4.h **** 
1484:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1485:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1486:../CMSIS/Include/core_cm4.h **** 
1487:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1488:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1489:../CMSIS/Include/core_cm4.h **** 
1490:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1491:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1492:../CMSIS/Include/core_cm4.h **** 
1493:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1494:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1495:../CMSIS/Include/core_cm4.h **** 
1496:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1497:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1498:../CMSIS/Include/core_cm4.h **** 
1499:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1500:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1501:../CMSIS/Include/core_cm4.h **** 
1502:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1503:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1504:../CMSIS/Include/core_cm4.h **** 
1505:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1506:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1507:../CMSIS/Include/core_cm4.h **** 
1508:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1509:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1510:../CMSIS/Include/core_cm4.h **** 
1511:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1512:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1513:../CMSIS/Include/core_cm4.h **** 
1514:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1515:../CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1516:../CMSIS/Include/core_cm4.h **** 
1517:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1518:../CMSIS/Include/core_cm4.h **** 
1519:../CMSIS/Include/core_cm4.h **** 
1520:../CMSIS/Include/core_cm4.h **** /**
1521:../CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
1522:../CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1523:../CMSIS/Include/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1524:../CMSIS/Include/core_cm4.h ****   @{
1525:../CMSIS/Include/core_cm4.h ****  */
1526:../CMSIS/Include/core_cm4.h **** 
1527:../CMSIS/Include/core_cm4.h **** /**
1528:../CMSIS/Include/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1529:../CMSIS/Include/core_cm4.h ****   \param[in] field  Name of the register bit field.
1530:../CMSIS/Include/core_cm4.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1531:../CMSIS/Include/core_cm4.h ****   \return           Masked and shifted value.
1532:../CMSIS/Include/core_cm4.h **** */
1533:../CMSIS/Include/core_cm4.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1534:../CMSIS/Include/core_cm4.h **** 
1535:../CMSIS/Include/core_cm4.h **** /**
1536:../CMSIS/Include/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1537:../CMSIS/Include/core_cm4.h ****   \param[in] field  Name of the register bit field.
1538:../CMSIS/Include/core_cm4.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
ARM GAS  /tmp/ccV3uvSK.s 			page 74


1539:../CMSIS/Include/core_cm4.h ****   \return           Masked and shifted bit field value.
1540:../CMSIS/Include/core_cm4.h **** */
1541:../CMSIS/Include/core_cm4.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1542:../CMSIS/Include/core_cm4.h **** 
1543:../CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1544:../CMSIS/Include/core_cm4.h **** 
1545:../CMSIS/Include/core_cm4.h **** 
1546:../CMSIS/Include/core_cm4.h **** /**
1547:../CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
1548:../CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1549:../CMSIS/Include/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1550:../CMSIS/Include/core_cm4.h ****   @{
1551:../CMSIS/Include/core_cm4.h ****  */
1552:../CMSIS/Include/core_cm4.h **** 
1553:../CMSIS/Include/core_cm4.h **** /* Memory mapping of Core Hardware */
1554:../CMSIS/Include/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1555:../CMSIS/Include/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1556:../CMSIS/Include/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1557:../CMSIS/Include/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1558:../CMSIS/Include/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1559:../CMSIS/Include/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1560:../CMSIS/Include/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1561:../CMSIS/Include/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1562:../CMSIS/Include/core_cm4.h **** 
1563:../CMSIS/Include/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1564:../CMSIS/Include/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1565:../CMSIS/Include/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1566:../CMSIS/Include/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1567:../CMSIS/Include/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1568:../CMSIS/Include/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1569:../CMSIS/Include/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1570:../CMSIS/Include/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1571:../CMSIS/Include/core_cm4.h **** 
1572:../CMSIS/Include/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1573:../CMSIS/Include/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1574:../CMSIS/Include/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1575:../CMSIS/Include/core_cm4.h **** #endif
1576:../CMSIS/Include/core_cm4.h **** 
1577:../CMSIS/Include/core_cm4.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1578:../CMSIS/Include/core_cm4.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1579:../CMSIS/Include/core_cm4.h **** 
1580:../CMSIS/Include/core_cm4.h **** /*@} */
1581:../CMSIS/Include/core_cm4.h **** 
1582:../CMSIS/Include/core_cm4.h **** 
1583:../CMSIS/Include/core_cm4.h **** 
1584:../CMSIS/Include/core_cm4.h **** /*******************************************************************************
1585:../CMSIS/Include/core_cm4.h ****  *                Hardware Abstraction Layer
1586:../CMSIS/Include/core_cm4.h ****   Core Function Interface contains:
1587:../CMSIS/Include/core_cm4.h ****   - Core NVIC Functions
1588:../CMSIS/Include/core_cm4.h ****   - Core SysTick Functions
1589:../CMSIS/Include/core_cm4.h ****   - Core Debug Functions
1590:../CMSIS/Include/core_cm4.h ****   - Core Register Access Functions
1591:../CMSIS/Include/core_cm4.h ****  ******************************************************************************/
1592:../CMSIS/Include/core_cm4.h **** /**
1593:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1594:../CMSIS/Include/core_cm4.h **** */
1595:../CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccV3uvSK.s 			page 75


1596:../CMSIS/Include/core_cm4.h **** 
1597:../CMSIS/Include/core_cm4.h **** 
1598:../CMSIS/Include/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1599:../CMSIS/Include/core_cm4.h **** /**
1600:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1601:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1602:../CMSIS/Include/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1603:../CMSIS/Include/core_cm4.h ****   @{
1604:../CMSIS/Include/core_cm4.h ****  */
1605:../CMSIS/Include/core_cm4.h **** 
1606:../CMSIS/Include/core_cm4.h **** #ifdef CMSIS_NVIC_VIRTUAL
1607:../CMSIS/Include/core_cm4.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1608:../CMSIS/Include/core_cm4.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1609:../CMSIS/Include/core_cm4.h ****   #endif
1610:../CMSIS/Include/core_cm4.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1611:../CMSIS/Include/core_cm4.h **** #else
1612:../CMSIS/Include/core_cm4.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1613:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1614:../CMSIS/Include/core_cm4.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1615:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1616:../CMSIS/Include/core_cm4.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1617:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1618:../CMSIS/Include/core_cm4.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1619:../CMSIS/Include/core_cm4.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1620:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetActive              __NVIC_GetActive
1621:../CMSIS/Include/core_cm4.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1622:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1623:../CMSIS/Include/core_cm4.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1624:../CMSIS/Include/core_cm4.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1625:../CMSIS/Include/core_cm4.h **** 
1626:../CMSIS/Include/core_cm4.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1627:../CMSIS/Include/core_cm4.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1628:../CMSIS/Include/core_cm4.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1629:../CMSIS/Include/core_cm4.h ****   #endif
1630:../CMSIS/Include/core_cm4.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1631:../CMSIS/Include/core_cm4.h **** #else
1632:../CMSIS/Include/core_cm4.h ****   #define NVIC_SetVector              __NVIC_SetVector
1633:../CMSIS/Include/core_cm4.h ****   #define NVIC_GetVector              __NVIC_GetVector
1634:../CMSIS/Include/core_cm4.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1635:../CMSIS/Include/core_cm4.h **** 
1636:../CMSIS/Include/core_cm4.h **** #define NVIC_USER_IRQ_OFFSET          16
1637:../CMSIS/Include/core_cm4.h **** 
1638:../CMSIS/Include/core_cm4.h **** 
1639:../CMSIS/Include/core_cm4.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1640:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1641:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1642:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1643:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_HANDLER_FPU     (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after ret
1644:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_MSP_FPU  (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after retu
1645:../CMSIS/Include/core_cm4.h **** #define EXC_RETURN_THREAD_PSP_FPU  (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after retu
1646:../CMSIS/Include/core_cm4.h **** 
1647:../CMSIS/Include/core_cm4.h **** 
1648:../CMSIS/Include/core_cm4.h **** /**
1649:../CMSIS/Include/core_cm4.h ****   \brief   Set Priority Grouping
1650:../CMSIS/Include/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1651:../CMSIS/Include/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1652:../CMSIS/Include/core_cm4.h ****            Only values from 0..7 are used.
ARM GAS  /tmp/ccV3uvSK.s 			page 76


1653:../CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1654:../CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1655:../CMSIS/Include/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1656:../CMSIS/Include/core_cm4.h ****  */
1657:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1658:../CMSIS/Include/core_cm4.h **** {
1659:../CMSIS/Include/core_cm4.h ****   uint32_t reg_value;
1660:../CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1661:../CMSIS/Include/core_cm4.h **** 
1662:../CMSIS/Include/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1663:../CMSIS/Include/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1664:../CMSIS/Include/core_cm4.h ****   reg_value  =  (reg_value                                   |
1665:../CMSIS/Include/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1666:../CMSIS/Include/core_cm4.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key a
1667:../CMSIS/Include/core_cm4.h ****   SCB->AIRCR =  reg_value;
1668:../CMSIS/Include/core_cm4.h **** }
1669:../CMSIS/Include/core_cm4.h **** 
1670:../CMSIS/Include/core_cm4.h **** 
1671:../CMSIS/Include/core_cm4.h **** /**
1672:../CMSIS/Include/core_cm4.h ****   \brief   Get Priority Grouping
1673:../CMSIS/Include/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1674:../CMSIS/Include/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1675:../CMSIS/Include/core_cm4.h ****  */
1676:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1677:../CMSIS/Include/core_cm4.h **** {
1678:../CMSIS/Include/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1679:../CMSIS/Include/core_cm4.h **** }
1680:../CMSIS/Include/core_cm4.h **** 
1681:../CMSIS/Include/core_cm4.h **** 
1682:../CMSIS/Include/core_cm4.h **** /**
1683:../CMSIS/Include/core_cm4.h ****   \brief   Enable Interrupt
1684:../CMSIS/Include/core_cm4.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1685:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1686:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1687:../CMSIS/Include/core_cm4.h ****  */
1688:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1689:../CMSIS/Include/core_cm4.h **** {
1690:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1691:../CMSIS/Include/core_cm4.h ****   {
1692:../CMSIS/Include/core_cm4.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1693:../CMSIS/Include/core_cm4.h ****   }
1694:../CMSIS/Include/core_cm4.h **** }
1695:../CMSIS/Include/core_cm4.h **** 
1696:../CMSIS/Include/core_cm4.h **** 
1697:../CMSIS/Include/core_cm4.h **** /**
1698:../CMSIS/Include/core_cm4.h ****   \brief   Get Interrupt Enable status
1699:../CMSIS/Include/core_cm4.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1700:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1701:../CMSIS/Include/core_cm4.h ****   \return             0  Interrupt is not enabled.
1702:../CMSIS/Include/core_cm4.h ****   \return             1  Interrupt is enabled.
1703:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1704:../CMSIS/Include/core_cm4.h ****  */
1705:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1706:../CMSIS/Include/core_cm4.h **** {
1707:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1708:../CMSIS/Include/core_cm4.h ****   {
1709:../CMSIS/Include/core_cm4.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
ARM GAS  /tmp/ccV3uvSK.s 			page 77


1710:../CMSIS/Include/core_cm4.h ****   }
1711:../CMSIS/Include/core_cm4.h ****   else
1712:../CMSIS/Include/core_cm4.h ****   {
1713:../CMSIS/Include/core_cm4.h ****     return(0U);
1714:../CMSIS/Include/core_cm4.h ****   }
1715:../CMSIS/Include/core_cm4.h **** }
1716:../CMSIS/Include/core_cm4.h **** 
1717:../CMSIS/Include/core_cm4.h **** 
1718:../CMSIS/Include/core_cm4.h **** /**
1719:../CMSIS/Include/core_cm4.h ****   \brief   Disable Interrupt
1720:../CMSIS/Include/core_cm4.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1721:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1722:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1723:../CMSIS/Include/core_cm4.h ****  */
1724:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1725:../CMSIS/Include/core_cm4.h **** {
1726:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1727:../CMSIS/Include/core_cm4.h ****   {
1728:../CMSIS/Include/core_cm4.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1729:../CMSIS/Include/core_cm4.h ****     __DSB();
1730:../CMSIS/Include/core_cm4.h ****     __ISB();
1731:../CMSIS/Include/core_cm4.h ****   }
1732:../CMSIS/Include/core_cm4.h **** }
1733:../CMSIS/Include/core_cm4.h **** 
1734:../CMSIS/Include/core_cm4.h **** 
1735:../CMSIS/Include/core_cm4.h **** /**
1736:../CMSIS/Include/core_cm4.h ****   \brief   Get Pending Interrupt
1737:../CMSIS/Include/core_cm4.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1738:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1739:../CMSIS/Include/core_cm4.h ****   \return             0  Interrupt status is not pending.
1740:../CMSIS/Include/core_cm4.h ****   \return             1  Interrupt status is pending.
1741:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1742:../CMSIS/Include/core_cm4.h ****  */
1743:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1744:../CMSIS/Include/core_cm4.h **** {
1745:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1746:../CMSIS/Include/core_cm4.h ****   {
1747:../CMSIS/Include/core_cm4.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1748:../CMSIS/Include/core_cm4.h ****   }
1749:../CMSIS/Include/core_cm4.h ****   else
1750:../CMSIS/Include/core_cm4.h ****   {
1751:../CMSIS/Include/core_cm4.h ****     return(0U);
1752:../CMSIS/Include/core_cm4.h ****   }
1753:../CMSIS/Include/core_cm4.h **** }
1754:../CMSIS/Include/core_cm4.h **** 
1755:../CMSIS/Include/core_cm4.h **** 
1756:../CMSIS/Include/core_cm4.h **** /**
1757:../CMSIS/Include/core_cm4.h ****   \brief   Set Pending Interrupt
1758:../CMSIS/Include/core_cm4.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1759:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1760:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1761:../CMSIS/Include/core_cm4.h ****  */
1762:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1763:../CMSIS/Include/core_cm4.h **** {
1764:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1765:../CMSIS/Include/core_cm4.h ****   {
1766:../CMSIS/Include/core_cm4.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
ARM GAS  /tmp/ccV3uvSK.s 			page 78


1767:../CMSIS/Include/core_cm4.h ****   }
1768:../CMSIS/Include/core_cm4.h **** }
1769:../CMSIS/Include/core_cm4.h **** 
1770:../CMSIS/Include/core_cm4.h **** 
1771:../CMSIS/Include/core_cm4.h **** /**
1772:../CMSIS/Include/core_cm4.h ****   \brief   Clear Pending Interrupt
1773:../CMSIS/Include/core_cm4.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1774:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1775:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1776:../CMSIS/Include/core_cm4.h ****  */
1777:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1778:../CMSIS/Include/core_cm4.h **** {
1779:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1780:../CMSIS/Include/core_cm4.h ****   {
1781:../CMSIS/Include/core_cm4.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1782:../CMSIS/Include/core_cm4.h ****   }
1783:../CMSIS/Include/core_cm4.h **** }
1784:../CMSIS/Include/core_cm4.h **** 
1785:../CMSIS/Include/core_cm4.h **** 
1786:../CMSIS/Include/core_cm4.h **** /**
1787:../CMSIS/Include/core_cm4.h ****   \brief   Get Active Interrupt
1788:../CMSIS/Include/core_cm4.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1789:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Device specific interrupt number.
1790:../CMSIS/Include/core_cm4.h ****   \return             0  Interrupt status is not active.
1791:../CMSIS/Include/core_cm4.h ****   \return             1  Interrupt status is active.
1792:../CMSIS/Include/core_cm4.h ****   \note    IRQn must not be negative.
1793:../CMSIS/Include/core_cm4.h ****  */
1794:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1795:../CMSIS/Include/core_cm4.h **** {
1796:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1797:../CMSIS/Include/core_cm4.h ****   {
1798:../CMSIS/Include/core_cm4.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1799:../CMSIS/Include/core_cm4.h ****   }
1800:../CMSIS/Include/core_cm4.h ****   else
1801:../CMSIS/Include/core_cm4.h ****   {
1802:../CMSIS/Include/core_cm4.h ****     return(0U);
1803:../CMSIS/Include/core_cm4.h ****   }
1804:../CMSIS/Include/core_cm4.h **** }
1805:../CMSIS/Include/core_cm4.h **** 
1806:../CMSIS/Include/core_cm4.h **** 
1807:../CMSIS/Include/core_cm4.h **** /**
1808:../CMSIS/Include/core_cm4.h ****   \brief   Set Interrupt Priority
1809:../CMSIS/Include/core_cm4.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1810:../CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1811:../CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1812:../CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1813:../CMSIS/Include/core_cm4.h ****   \param [in]  priority  Priority to set.
1814:../CMSIS/Include/core_cm4.h ****   \note    The priority cannot be set for every processor exception.
1815:../CMSIS/Include/core_cm4.h ****  */
1816:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1817:../CMSIS/Include/core_cm4.h **** {
1818:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1819:../CMSIS/Include/core_cm4.h ****   {
1820:../CMSIS/Include/core_cm4.h ****     NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1821:../CMSIS/Include/core_cm4.h ****   }
1822:../CMSIS/Include/core_cm4.h ****   else
1823:../CMSIS/Include/core_cm4.h ****   {
ARM GAS  /tmp/ccV3uvSK.s 			page 79


1824:../CMSIS/Include/core_cm4.h ****     SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1825:../CMSIS/Include/core_cm4.h ****   }
1826:../CMSIS/Include/core_cm4.h **** }
1827:../CMSIS/Include/core_cm4.h **** 
1828:../CMSIS/Include/core_cm4.h **** 
1829:../CMSIS/Include/core_cm4.h **** /**
1830:../CMSIS/Include/core_cm4.h ****   \brief   Get Interrupt Priority
1831:../CMSIS/Include/core_cm4.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1832:../CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1833:../CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1834:../CMSIS/Include/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1835:../CMSIS/Include/core_cm4.h ****   \return             Interrupt Priority.
1836:../CMSIS/Include/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1837:../CMSIS/Include/core_cm4.h ****  */
1838:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1839:../CMSIS/Include/core_cm4.h **** {
1840:../CMSIS/Include/core_cm4.h **** 
1841:../CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) >= 0)
1842:../CMSIS/Include/core_cm4.h ****   {
1843:../CMSIS/Include/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
1844:../CMSIS/Include/core_cm4.h ****   }
1845:../CMSIS/Include/core_cm4.h ****   else
1846:../CMSIS/Include/core_cm4.h ****   {
1847:../CMSIS/Include/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
1848:../CMSIS/Include/core_cm4.h ****   }
1849:../CMSIS/Include/core_cm4.h **** }
1850:../CMSIS/Include/core_cm4.h **** 
1851:../CMSIS/Include/core_cm4.h **** 
1852:../CMSIS/Include/core_cm4.h **** /**
1853:../CMSIS/Include/core_cm4.h ****   \brief   Encode Priority
1854:../CMSIS/Include/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1855:../CMSIS/Include/core_cm4.h ****            preemptive priority value, and subpriority value.
1856:../CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1857:../CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1858:../CMSIS/Include/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1859:../CMSIS/Include/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1860:../CMSIS/Include/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1861:../CMSIS/Include/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1862:../CMSIS/Include/core_cm4.h ****  */
1863:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1864:../CMSIS/Include/core_cm4.h **** {
1865:../CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1866:../CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1867:../CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1868:../CMSIS/Include/core_cm4.h **** 
1869:../CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1870:../CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1871:../CMSIS/Include/core_cm4.h **** 
1872:../CMSIS/Include/core_cm4.h ****   return (
1873:../CMSIS/Include/core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1874:../CMSIS/Include/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1875:../CMSIS/Include/core_cm4.h ****          );
1876:../CMSIS/Include/core_cm4.h **** }
1877:../CMSIS/Include/core_cm4.h **** 
1878:../CMSIS/Include/core_cm4.h **** 
1879:../CMSIS/Include/core_cm4.h **** /**
1880:../CMSIS/Include/core_cm4.h ****   \brief   Decode Priority
ARM GAS  /tmp/ccV3uvSK.s 			page 80


1881:../CMSIS/Include/core_cm4.h ****   \details Decodes an interrupt priority value with a given priority group to
1882:../CMSIS/Include/core_cm4.h ****            preemptive priority value and subpriority value.
1883:../CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1884:../CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1885:../CMSIS/Include/core_cm4.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1886:../CMSIS/Include/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1887:../CMSIS/Include/core_cm4.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1888:../CMSIS/Include/core_cm4.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1889:../CMSIS/Include/core_cm4.h ****  */
1890:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1891:../CMSIS/Include/core_cm4.h **** {
1892:../CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1893:../CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1894:../CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1895:../CMSIS/Include/core_cm4.h **** 
1896:../CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1897:../CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1898:../CMSIS/Include/core_cm4.h **** 
1899:../CMSIS/Include/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1900:../CMSIS/Include/core_cm4.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1901:../CMSIS/Include/core_cm4.h **** }
1902:../CMSIS/Include/core_cm4.h **** 
1903:../CMSIS/Include/core_cm4.h **** 
1904:../CMSIS/Include/core_cm4.h **** /**
1905:../CMSIS/Include/core_cm4.h ****   \brief   Set Interrupt Vector
1906:../CMSIS/Include/core_cm4.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1907:../CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1908:../CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1909:../CMSIS/Include/core_cm4.h ****            VTOR must been relocated to SRAM before.
1910:../CMSIS/Include/core_cm4.h ****   \param [in]   IRQn      Interrupt number
1911:../CMSIS/Include/core_cm4.h ****   \param [in]   vector    Address of interrupt handler function
1912:../CMSIS/Include/core_cm4.h ****  */
1913:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1914:../CMSIS/Include/core_cm4.h **** {
1915:../CMSIS/Include/core_cm4.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1916:../CMSIS/Include/core_cm4.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
1917:../CMSIS/Include/core_cm4.h **** }
1918:../CMSIS/Include/core_cm4.h **** 
1919:../CMSIS/Include/core_cm4.h **** 
1920:../CMSIS/Include/core_cm4.h **** /**
1921:../CMSIS/Include/core_cm4.h ****   \brief   Get Interrupt Vector
1922:../CMSIS/Include/core_cm4.h ****   \details Reads an interrupt vector from interrupt vector table.
1923:../CMSIS/Include/core_cm4.h ****            The interrupt number can be positive to specify a device specific interrupt,
1924:../CMSIS/Include/core_cm4.h ****            or negative to specify a processor exception.
1925:../CMSIS/Include/core_cm4.h ****   \param [in]   IRQn      Interrupt number.
1926:../CMSIS/Include/core_cm4.h ****   \return                 Address of interrupt handler function
1927:../CMSIS/Include/core_cm4.h ****  */
1928:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1929:../CMSIS/Include/core_cm4.h **** {
1930:../CMSIS/Include/core_cm4.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1931:../CMSIS/Include/core_cm4.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
1932:../CMSIS/Include/core_cm4.h **** }
1933:../CMSIS/Include/core_cm4.h **** 
1934:../CMSIS/Include/core_cm4.h **** 
1935:../CMSIS/Include/core_cm4.h **** /**
1936:../CMSIS/Include/core_cm4.h ****   \brief   System Reset
1937:../CMSIS/Include/core_cm4.h ****   \details Initiates a system reset request to reset the MCU.
ARM GAS  /tmp/ccV3uvSK.s 			page 81


1938:../CMSIS/Include/core_cm4.h ****  */
1939:../CMSIS/Include/core_cm4.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
1940:../CMSIS/Include/core_cm4.h **** {
1941:../CMSIS/Include/core_cm4.h ****   __DSB();                                                          /* Ensure all outstanding memor
1942:../CMSIS/Include/core_cm4.h ****                                                                        buffered write are completed
1943:../CMSIS/Include/core_cm4.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1944:../CMSIS/Include/core_cm4.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1945:../CMSIS/Include/core_cm4.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1946:../CMSIS/Include/core_cm4.h ****   __DSB();                                                          /* Ensure completion of memory 
1947:../CMSIS/Include/core_cm4.h **** 
1948:../CMSIS/Include/core_cm4.h ****   for(;;)                                                           /* wait until reset */
1949:../CMSIS/Include/core_cm4.h ****   {
1950:../CMSIS/Include/core_cm4.h ****     __NOP();
1951:../CMSIS/Include/core_cm4.h ****   }
1952:../CMSIS/Include/core_cm4.h **** }
1953:../CMSIS/Include/core_cm4.h **** 
1954:../CMSIS/Include/core_cm4.h **** /*@} end of CMSIS_Core_NVICFunctions */
1955:../CMSIS/Include/core_cm4.h **** 
1956:../CMSIS/Include/core_cm4.h **** /* ##########################  MPU functions  #################################### */
1957:../CMSIS/Include/core_cm4.h **** 
1958:../CMSIS/Include/core_cm4.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1959:../CMSIS/Include/core_cm4.h **** 
1960:../CMSIS/Include/core_cm4.h **** #include "mpu_armv7.h"
1961:../CMSIS/Include/core_cm4.h **** 
1962:../CMSIS/Include/core_cm4.h **** #endif
1963:../CMSIS/Include/core_cm4.h **** 
1964:../CMSIS/Include/core_cm4.h **** 
1965:../CMSIS/Include/core_cm4.h **** /* ##########################  FPU functions  #################################### */
1966:../CMSIS/Include/core_cm4.h **** /**
1967:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1968:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1969:../CMSIS/Include/core_cm4.h ****   \brief    Function that provides FPU type.
1970:../CMSIS/Include/core_cm4.h ****   @{
1971:../CMSIS/Include/core_cm4.h ****  */
1972:../CMSIS/Include/core_cm4.h **** 
1973:../CMSIS/Include/core_cm4.h **** /**
1974:../CMSIS/Include/core_cm4.h ****   \brief   get FPU type
1975:../CMSIS/Include/core_cm4.h ****   \details returns the FPU type
1976:../CMSIS/Include/core_cm4.h ****   \returns
1977:../CMSIS/Include/core_cm4.h ****    - \b  0: No FPU
1978:../CMSIS/Include/core_cm4.h ****    - \b  1: Single precision FPU
1979:../CMSIS/Include/core_cm4.h ****    - \b  2: Double + Single precision FPU
1980:../CMSIS/Include/core_cm4.h ****  */
1981:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1982:../CMSIS/Include/core_cm4.h **** {
1983:../CMSIS/Include/core_cm4.h ****   uint32_t mvfr0;
1984:../CMSIS/Include/core_cm4.h **** 
1985:../CMSIS/Include/core_cm4.h ****   mvfr0 = FPU->MVFR0;
1986:../CMSIS/Include/core_cm4.h ****   if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1987:../CMSIS/Include/core_cm4.h ****   {
1988:../CMSIS/Include/core_cm4.h ****     return 1U;           /* Single precision FPU */
1989:../CMSIS/Include/core_cm4.h ****   }
1990:../CMSIS/Include/core_cm4.h ****   else
1991:../CMSIS/Include/core_cm4.h ****   {
1992:../CMSIS/Include/core_cm4.h ****     return 0U;           /* No FPU */
1993:../CMSIS/Include/core_cm4.h ****   }
1994:../CMSIS/Include/core_cm4.h **** }
ARM GAS  /tmp/ccV3uvSK.s 			page 82


1995:../CMSIS/Include/core_cm4.h **** 
1996:../CMSIS/Include/core_cm4.h **** 
1997:../CMSIS/Include/core_cm4.h **** /*@} end of CMSIS_Core_FpuFunctions */
1998:../CMSIS/Include/core_cm4.h **** 
1999:../CMSIS/Include/core_cm4.h **** 
2000:../CMSIS/Include/core_cm4.h **** 
2001:../CMSIS/Include/core_cm4.h **** /* ##################################    SysTick function  ########################################
2002:../CMSIS/Include/core_cm4.h **** /**
2003:../CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
2004:../CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
2005:../CMSIS/Include/core_cm4.h ****   \brief    Functions that configure the System.
2006:../CMSIS/Include/core_cm4.h ****   @{
2007:../CMSIS/Include/core_cm4.h ****  */
2008:../CMSIS/Include/core_cm4.h **** 
2009:../CMSIS/Include/core_cm4.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
2010:../CMSIS/Include/core_cm4.h **** 
2011:../CMSIS/Include/core_cm4.h **** /**
2012:../CMSIS/Include/core_cm4.h ****   \brief   System Tick Configuration
2013:../CMSIS/Include/core_cm4.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
2014:../CMSIS/Include/core_cm4.h ****            Counter is in free running mode to generate periodic interrupts.
2015:../CMSIS/Include/core_cm4.h ****   \param [in]  ticks  Number of ticks between two interrupts.
2016:../CMSIS/Include/core_cm4.h ****   \return          0  Function succeeded.
2017:../CMSIS/Include/core_cm4.h ****   \return          1  Function failed.
2018:../CMSIS/Include/core_cm4.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
2019:../CMSIS/Include/core_cm4.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
2020:../CMSIS/Include/core_cm4.h ****            must contain a vendor-specific implementation of this function.
2021:../CMSIS/Include/core_cm4.h ****  */
2022:../CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
 2078              		.loc 2 2022 26 view .LVU507
 2079              	.LBB33:
2023:../CMSIS/Include/core_cm4.h **** {
2024:../CMSIS/Include/core_cm4.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 2080              		.loc 2 2024 3 view .LVU508
 2081              		.loc 2 2024 14 is_stmt 0 view .LVU509
 2082 0018 013B     		subs	r3, r3, #1
 2083              	.LVL204:
 2084              		.loc 2 2024 6 view .LVU510
 2085 001a B3F1807F 		cmp	r3, #16777216
 2086 001e 09D2     		bcs	.L180
2025:../CMSIS/Include/core_cm4.h ****   {
2026:../CMSIS/Include/core_cm4.h ****     return (1UL);                                                   /* Reload value impossible */
2027:../CMSIS/Include/core_cm4.h ****   }
2028:../CMSIS/Include/core_cm4.h **** 
2029:../CMSIS/Include/core_cm4.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 2087              		.loc 2 2029 3 is_stmt 1 view .LVU511
 2088              		.loc 2 2029 18 is_stmt 0 view .LVU512
 2089 0020 1A4A     		ldr	r2, .L182+8
 2090 0022 5360     		str	r3, [r2, #4]
2030:../CMSIS/Include/core_cm4.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 2091              		.loc 2 2030 3 is_stmt 1 view .LVU513
 2092              	.LVL205:
 2093              	.LBB34:
 2094              	.LBI34:
1816:../CMSIS/Include/core_cm4.h **** {
 2095              		.loc 2 1816 22 view .LVU514
 2096              	.LBB35:
1818:../CMSIS/Include/core_cm4.h ****   {
ARM GAS  /tmp/ccV3uvSK.s 			page 83


 2097              		.loc 2 1818 3 view .LVU515
1824:../CMSIS/Include/core_cm4.h ****   }
 2098              		.loc 2 1824 5 view .LVU516
1824:../CMSIS/Include/core_cm4.h ****   }
 2099              		.loc 2 1824 46 is_stmt 0 view .LVU517
 2100 0024 1A4B     		ldr	r3, .L182+12
 2101              	.LVL206:
1824:../CMSIS/Include/core_cm4.h ****   }
 2102              		.loc 2 1824 46 view .LVU518
 2103 0026 F021     		movs	r1, #240
 2104 0028 83F82310 		strb	r1, [r3, #35]
 2105              	.LVL207:
1824:../CMSIS/Include/core_cm4.h ****   }
 2106              		.loc 2 1824 46 view .LVU519
 2107              	.LBE35:
 2108              	.LBE34:
2031:../CMSIS/Include/core_cm4.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 2109              		.loc 2 2031 3 is_stmt 1 view .LVU520
 2110              		.loc 2 2031 18 is_stmt 0 view .LVU521
 2111 002c 0023     		movs	r3, #0
 2112 002e 9360     		str	r3, [r2, #8]
2032:../CMSIS/Include/core_cm4.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 2113              		.loc 2 2032 3 is_stmt 1 view .LVU522
 2114              		.loc 2 2032 18 is_stmt 0 view .LVU523
 2115 0030 0723     		movs	r3, #7
 2116 0032 1360     		str	r3, [r2]
2033:../CMSIS/Include/core_cm4.h ****                    SysTick_CTRL_TICKINT_Msk   |
2034:../CMSIS/Include/core_cm4.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
2035:../CMSIS/Include/core_cm4.h ****   return (0UL);                                                     /* Function successful */
 2117              		.loc 2 2035 3 is_stmt 1 view .LVU524
 2118              	.L180:
 2119              		.loc 2 2035 3 is_stmt 0 view .LVU525
 2120              	.LBE33:
 2121              	.LBE32:
 441:main.c        **** 
 442:main.c        ****     RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // enable GPIOB clock
 2122              		.loc 1 442 5 is_stmt 1 view .LVU526
 2123              		.loc 1 442 18 is_stmt 0 view .LVU527
 2124 0034 174A     		ldr	r2, .L182+16
 2125 0036 136B     		ldr	r3, [r2, #48]
 2126 0038 43F00203 		orr	r3, r3, #2
 2127 003c 1363     		str	r3, [r2, #48]
 443:main.c        **** 
 444:main.c        ****     setClkOutput();
 2128              		.loc 1 444 5 is_stmt 1 view .LVU528
 2129 003e FFF7FEFF 		bl	setClkOutput
 2130              	.LVL208:
 445:main.c        ****     setSdaOutput();
 2131              		.loc 1 445 5 view .LVU529
 2132 0042 FFF7FEFF 		bl	setSdaOutput
 2133              	.LVL209:
 446:main.c        **** 
 447:main.c        ****     sendViaUsart("\n\r\n\r");
 2134              		.loc 1 447 5 view .LVU530
 2135 0046 1448     		ldr	r0, .L182+20
 2136 0048 FFF7FEFF 		bl	sendViaUsart
 2137              	.LVL210:
ARM GAS  /tmp/ccV3uvSK.s 			page 84


 448:main.c        **** 
 449:main.c        ****     clkUp();
 2138              		.loc 1 449 5 view .LVU531
 2139 004c FFF7FEFF 		bl	clkUp
 2140              	.LVL211:
 450:main.c        ****     sdaUp();
 2141              		.loc 1 450 5 view .LVU532
 2142 0050 FFF7FEFF 		bl	sdaUp
 2143              	.LVL212:
 451:main.c        ****     delayMcs(delvalue);
 2144              		.loc 1 451 5 view .LVU533
 2145 0054 114B     		ldr	r3, .L182+24
 2146 0056 1868     		ldr	r0, [r3]
 2147 0058 FFF7FEFF 		bl	delayMcs
 2148              	.LVL213:
 452:main.c        **** 
 453:main.c        ****     M24C16Erase(208,10);
 2149              		.loc 1 453 5 view .LVU534
 2150 005c 0A21     		movs	r1, #10
 2151 005e D020     		movs	r0, #208
 2152 0060 FFF7FEFF 		bl	M24C16Erase
 2153              	.LVL214:
 454:main.c        ****     M24C16WriteString(208,"PRIDYBAILO"); // writes my surname beginning from address 208 (this is w
 2154              		.loc 1 454 5 view .LVU535
 2155 0064 0E49     		ldr	r1, .L182+28
 2156 0066 D020     		movs	r0, #208
 2157 0068 FFF7FEFF 		bl	M24C16WriteString
 2158              	.LVL215:
 455:main.c        **** 
 456:main.c        ****     M24C16Dump(ASCII);
 2159              		.loc 1 456 5 view .LVU536
 2160 006c 0320     		movs	r0, #3
 2161 006e FFF7FEFF 		bl	M24C16Dump
 2162              	.LVL216:
 457:main.c        ****     M24C16Dump(DECIMAL); //uncomment to view memory in different modes
 2163              		.loc 1 457 5 view .LVU537
 2164 0072 0220     		movs	r0, #2
 2165 0074 FFF7FEFF 		bl	M24C16Dump
 2166              	.LVL217:
 458:main.c        ****     M24C16Dump(BINARY);
 2167              		.loc 1 458 5 view .LVU538
 2168 0078 0120     		movs	r0, #1
 2169 007a FFF7FEFF 		bl	M24C16Dump
 2170              	.LVL218:
 459:main.c        **** 
 460:main.c        ****     return 0;
 2171              		.loc 1 460 5 view .LVU539
 461:main.c        **** 
 462:main.c        **** }
 2172              		.loc 1 462 1 is_stmt 0 view .LVU540
 2173 007e 0020     		movs	r0, #0
 2174 0080 08BD     		pop	{r3, pc}
 2175              	.L183:
 2176 0082 00BF     		.align	2
 2177              	.L182:
 2178 0084 00000000 		.word	SystemCoreClock
 2179 0088 B1DB9717 		.word	395828145
ARM GAS  /tmp/ccV3uvSK.s 			page 85


 2180 008c 10E000E0 		.word	-536813552
 2181 0090 00ED00E0 		.word	-536810240
 2182 0094 00380240 		.word	1073887232
 2183 0098 00000000 		.word	.LC4
 2184 009c 00000000 		.word	.LANCHOR1
 2185 00a0 08000000 		.word	.LC5
 2186              		.cfi_endproc
 2187              	.LFE156:
 2189              		.comm	memory_dump,2048,4
 2190              		.comm	itoa_output,12,4
 2191              		.global	delvalue
 2192              		.global	ticks
 2193              		.global	errorBeyondMemoryErase
 2194              		.global	errorBeyondMemoryRead
 2195              		.global	errorBeyondMemoryWrite
 2196              		.global	errorInvalidAddress
 2197              		.global	errorInvalidMode
 2198              		.section	.rodata
 2199              		.align	2
 2200              	.LC6:
 2201 0000 4552524F 		.ascii	"ERROR: Erase length goes beyond memory size\012\015"
 2201      523A2045 
 2201      72617365 
 2201      206C656E 
 2201      67746820 
 2202 002d 0000     		.ascii	"\000\000"
 2203 002f 00       		.space	1
 2204              	.LC7:
 2205 0030 4552524F 		.ascii	"ERROR: Read length goes beyond memory size\012\015\000"
 2205      523A2052 
 2205      65616420 
 2205      6C656E67 
 2205      74682067 
 2206 005d 00       		.ascii	"\000"
 2207 005e 0000     		.space	2
 2208              	.LC8:
 2209 0060 4552524F 		.ascii	"ERROR: String goes beyond memory size\012\015\000\000"
 2209      523A2053 
 2209      7472696E 
 2209      6720676F 
 2209      65732062 
 2210 0089 000000   		.space	3
 2211              	.LC9:
 2212 008c 4552524F 		.ascii	"ERROR: Address must vary between 0 and 2047\012\015"
 2212      523A2041 
 2212      64647265 
 2212      7373206D 
 2212      75737420 
 2213 00b9 0000     		.ascii	"\000\000"
 2214 00bb 00       		.space	1
 2215              	.LC10:
 2216 00bc 4552524F 		.ascii	"ERROR: Invalid memory output mode\012\015\000\000"
 2216      523A2049 
 2216      6E76616C 
 2216      6964206D 
 2216      656D6F72 
 2217              		.section	.bss.ticks,"aw",%nobits
ARM GAS  /tmp/ccV3uvSK.s 			page 86


 2218              		.align	2
 2219              		.set	.LANCHOR0,. + 0
 2222              	ticks:
 2223 0000 00000000 		.space	4
 2224              		.section	.data.delvalue,"aw"
 2225              		.align	2
 2226              		.set	.LANCHOR1,. + 0
 2229              	delvalue:
 2230 0000 19000000 		.word	25
 2231              		.section	.data.errorBeyondMemoryErase,"aw"
 2232              		.align	2
 2233              		.set	.LANCHOR3,. + 0
 2236              	errorBeyondMemoryErase:
 2237 0000 00000000 		.word	.LC6
 2238              		.section	.data.errorBeyondMemoryRead,"aw"
 2239              		.align	2
 2240              		.set	.LANCHOR5,. + 0
 2243              	errorBeyondMemoryRead:
 2244 0000 30000000 		.word	.LC7
 2245              		.section	.data.errorBeyondMemoryWrite,"aw"
 2246              		.align	2
 2247              		.set	.LANCHOR4,. + 0
 2250              	errorBeyondMemoryWrite:
 2251 0000 60000000 		.word	.LC8
 2252              		.section	.data.errorInvalidAddress,"aw"
 2253              		.align	2
 2254              		.set	.LANCHOR2,. + 0
 2257              	errorInvalidAddress:
 2258 0000 8C000000 		.word	.LC9
 2259              		.section	.data.errorInvalidMode,"aw"
 2260              		.align	2
 2261              		.set	.LANCHOR6,. + 0
 2264              	errorInvalidMode:
 2265 0000 BC000000 		.word	.LC10
 2266              		.text
 2267              	.Letext0:
 2268              		.file 3 "../CMSIS/Device/ST/STM32F4xx/Include/stm32f469xx.h"
 2269              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2270              		.file 5 "../CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2271              		.file 6 "./util/util.h"
ARM GAS  /tmp/ccV3uvSK.s 			page 87


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccV3uvSK.s:18     .text.delayMs:0000000000000000 $t
     /tmp/ccV3uvSK.s:26     .text.delayMs:0000000000000000 delayMs
     /tmp/ccV3uvSK.s:58     .text.delayMs:0000000000000018 $d
     /tmp/ccV3uvSK.s:63     .text.delayMcs:0000000000000000 $t
     /tmp/ccV3uvSK.s:70     .text.delayMcs:0000000000000000 delayMcs
     /tmp/ccV3uvSK.s:98     .text.delayMcs:0000000000000010 $d
     /tmp/ccV3uvSK.s:103    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccV3uvSK.s:110    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccV3uvSK.s:128    .text.SysTick_Handler:000000000000000c $d
     /tmp/ccV3uvSK.s:133    .text.sendViaUsart:0000000000000000 $t
     /tmp/ccV3uvSK.s:140    .text.sendViaUsart:0000000000000000 sendViaUsart
     /tmp/ccV3uvSK.s:194    .text.sendViaUsart:0000000000000028 $d
     /tmp/ccV3uvSK.s:199    .text.UART6Config:0000000000000000 $t
     /tmp/ccV3uvSK.s:206    .text.UART6Config:0000000000000000 UART6Config
     /tmp/ccV3uvSK.s:308    .text.UART6Config:000000000000009c $d
     /tmp/ccV3uvSK.s:313    .text.setClkOutput:0000000000000000 $t
     /tmp/ccV3uvSK.s:320    .text.setClkOutput:0000000000000000 setClkOutput
     /tmp/ccV3uvSK.s:343    .text.setClkOutput:0000000000000014 $d
     /tmp/ccV3uvSK.s:348    .text.setSdaOutput:0000000000000000 $t
     /tmp/ccV3uvSK.s:355    .text.setSdaOutput:0000000000000000 setSdaOutput
     /tmp/ccV3uvSK.s:378    .text.setSdaOutput:0000000000000014 $d
     /tmp/ccV3uvSK.s:383    .text.setSdaInput:0000000000000000 $t
     /tmp/ccV3uvSK.s:390    .text.setSdaInput:0000000000000000 setSdaInput
     /tmp/ccV3uvSK.s:408    .text.setSdaInput:000000000000000c $d
     /tmp/ccV3uvSK.s:413    .text.clkUp:0000000000000000 $t
     /tmp/ccV3uvSK.s:420    .text.clkUp:0000000000000000 clkUp
     /tmp/ccV3uvSK.s:438    .text.clkUp:000000000000000c $d
     /tmp/ccV3uvSK.s:443    .text.clkDown:0000000000000000 $t
     /tmp/ccV3uvSK.s:450    .text.clkDown:0000000000000000 clkDown
     /tmp/ccV3uvSK.s:468    .text.clkDown:000000000000000c $d
     /tmp/ccV3uvSK.s:473    .text.sdaUp:0000000000000000 $t
     /tmp/ccV3uvSK.s:480    .text.sdaUp:0000000000000000 sdaUp
     /tmp/ccV3uvSK.s:498    .text.sdaUp:000000000000000c $d
     /tmp/ccV3uvSK.s:503    .text.sdaDown:0000000000000000 $t
     /tmp/ccV3uvSK.s:510    .text.sdaDown:0000000000000000 sdaDown
     /tmp/ccV3uvSK.s:528    .text.sdaDown:000000000000000c $d
     /tmp/ccV3uvSK.s:533    .text.strlen:0000000000000000 $t
     /tmp/ccV3uvSK.s:540    .text.strlen:0000000000000000 strlen
     /tmp/ccV3uvSK.s:587    .rodata.itoa.str1.4:0000000000000000 $d
     /tmp/ccV3uvSK.s:591    .text.itoa:0000000000000000 $t
     /tmp/ccV3uvSK.s:598    .text.itoa:0000000000000000 itoa
     /tmp/ccV3uvSK.s:737    .text.itoa:000000000000006c $d
                            *COM*:000000000000000c itoa_output
     /tmp/ccV3uvSK.s:744    .text.sendStartCondition:0000000000000000 $t
     /tmp/ccV3uvSK.s:751    .text.sendStartCondition:0000000000000000 sendStartCondition
     /tmp/ccV3uvSK.s:792    .text.sendStartCondition:0000000000000028 $d
     /tmp/ccV3uvSK.s:797    .text.sendStopCondition:0000000000000000 $t
     /tmp/ccV3uvSK.s:804    .text.sendStopCondition:0000000000000000 sendStopCondition
     /tmp/ccV3uvSK.s:835    .text.sendStopCondition:000000000000001c $d
     /tmp/ccV3uvSK.s:840    .text.sendBit:0000000000000000 $t
     /tmp/ccV3uvSK.s:847    .text.sendBit:0000000000000000 sendBit
     /tmp/ccV3uvSK.s:898    .text.sendBit:000000000000002c $d
     /tmp/ccV3uvSK.s:903    .text.sendByte:0000000000000000 $t
     /tmp/ccV3uvSK.s:910    .text.sendByte:0000000000000000 sendByte
     /tmp/ccV3uvSK.s:965    .text.sendByte:0000000000000024 $d
ARM GAS  /tmp/ccV3uvSK.s 			page 88


     /tmp/ccV3uvSK.s:970    .text.readBit:0000000000000000 $t
     /tmp/ccV3uvSK.s:977    .text.readBit:0000000000000000 readBit
     /tmp/ccV3uvSK.s:1024   .text.readBit:0000000000000028 $d
     /tmp/ccV3uvSK.s:1030   .text.readByte:0000000000000000 $t
     /tmp/ccV3uvSK.s:1037   .text.readByte:0000000000000000 readByte
     /tmp/ccV3uvSK.s:1114   .text.readByte:000000000000002c $d
     /tmp/ccV3uvSK.s:1119   .text.M24C16RandomAdddressRead:0000000000000000 $t
     /tmp/ccV3uvSK.s:1126   .text.M24C16RandomAdddressRead:0000000000000000 M24C16RandomAdddressRead
     /tmp/ccV3uvSK.s:1229   .text.M24C16RandomAdddressRead:0000000000000074 $d
     /tmp/ccV3uvSK.s:1234   .text.M24C16ByteWrite:0000000000000000 $t
     /tmp/ccV3uvSK.s:1241   .text.M24C16ByteWrite:0000000000000000 M24C16ByteWrite
     /tmp/ccV3uvSK.s:1314   .text.M24C16ByteWrite:0000000000000050 $d
     /tmp/ccV3uvSK.s:1319   .text.M24C16Erase:0000000000000000 $t
     /tmp/ccV3uvSK.s:1326   .text.M24C16Erase:0000000000000000 M24C16Erase
     /tmp/ccV3uvSK.s:1406   .text.M24C16Erase:0000000000000044 $d
     /tmp/ccV3uvSK.s:1412   .text.M24C16WriteString:0000000000000000 $t
     /tmp/ccV3uvSK.s:1419   .text.M24C16WriteString:0000000000000000 M24C16WriteString
     /tmp/ccV3uvSK.s:1513   .text.M24C16WriteString:0000000000000050 $d
     /tmp/ccV3uvSK.s:1519   .text.M24C16SequentialRandomRead:0000000000000000 $t
     /tmp/ccV3uvSK.s:1526   .text.M24C16SequentialRandomRead:0000000000000000 M24C16SequentialRandomRead
     /tmp/ccV3uvSK.s:1696   .text.M24C16SequentialRandomRead:00000000000000b0 $d
                            *COM*:0000000000000800 memory_dump
     /tmp/ccV3uvSK.s:1703   .rodata.M24C16Dump.str1.4:0000000000000000 $d
     /tmp/ccV3uvSK.s:1713   .text.M24C16Dump:0000000000000000 $t
     /tmp/ccV3uvSK.s:1720   .text.M24C16Dump:0000000000000000 M24C16Dump
     /tmp/ccV3uvSK.s:2027   .text.M24C16Dump:0000000000000108 $d
     /tmp/ccV3uvSK.s:2036   .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccV3uvSK.s:2043   .text.main:0000000000000000 $t
     /tmp/ccV3uvSK.s:2050   .text.main:0000000000000000 main
     /tmp/ccV3uvSK.s:2178   .text.main:0000000000000084 $d
     /tmp/ccV3uvSK.s:2229   .data.delvalue:0000000000000000 delvalue
     /tmp/ccV3uvSK.s:2222   .bss.ticks:0000000000000000 ticks
     /tmp/ccV3uvSK.s:2236   .data.errorBeyondMemoryErase:0000000000000000 errorBeyondMemoryErase
     /tmp/ccV3uvSK.s:2243   .data.errorBeyondMemoryRead:0000000000000000 errorBeyondMemoryRead
     /tmp/ccV3uvSK.s:2250   .data.errorBeyondMemoryWrite:0000000000000000 errorBeyondMemoryWrite
     /tmp/ccV3uvSK.s:2257   .data.errorInvalidAddress:0000000000000000 errorInvalidAddress
     /tmp/ccV3uvSK.s:2264   .data.errorInvalidMode:0000000000000000 errorInvalidMode
     /tmp/ccV3uvSK.s:2199   .rodata:0000000000000000 $d
     /tmp/ccV3uvSK.s:2218   .bss.ticks:0000000000000000 $d
     /tmp/ccV3uvSK.s:2225   .data.delvalue:0000000000000000 $d
     /tmp/ccV3uvSK.s:2232   .data.errorBeyondMemoryErase:0000000000000000 $d
     /tmp/ccV3uvSK.s:2239   .data.errorBeyondMemoryRead:0000000000000000 $d
     /tmp/ccV3uvSK.s:2246   .data.errorBeyondMemoryWrite:0000000000000000 $d
     /tmp/ccV3uvSK.s:2253   .data.errorInvalidAddress:0000000000000000 $d
     /tmp/ccV3uvSK.s:2260   .data.errorInvalidMode:0000000000000000 $d

UNDEFINED SYMBOLS
set_sysclk_max
SystemCoreClock
